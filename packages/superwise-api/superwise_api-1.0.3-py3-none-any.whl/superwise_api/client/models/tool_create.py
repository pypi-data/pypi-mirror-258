# coding: utf-8
"""
    Superwise Main Entities

    API reference

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import constr
from pydantic import Field

from superwise_api.client.models.description import Description
from superwise_api.client.models.secret_sql_database import SecretSQLDatabase


class ToolCreate(BaseModel):
    """
    ToolCreate
    """

    name: constr(strict=True, max_length=50, min_length=1) = Field(...)
    description: Optional[Description] = None
    type: Optional[Any] = Field(...)
    config: Optional[Any] = None
    secrets: SecretSQLDatabase = Field(...)
    __properties = ["name", "description", "type", "config", "secrets"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ToolCreate:
        """Create an instance of ToolCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict["description"] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secrets
        if self.secrets:
            _dict["secrets"] = self.secrets.to_dict()
        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict["type"] = None

        # set to None if config (nullable) is None
        # and __fields_set__ contains the field
        if self.config is None and "config" in self.__fields_set__:
            _dict["config"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ToolCreate:
        """Create an instance of ToolCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ToolCreate.parse_obj(obj)

        _obj = ToolCreate.parse_obj(
            {
                "name": obj.get("name"),
                "description": Description.from_dict(obj.get("description"))
                if obj.get("description") is not None
                else None,
                "type": obj.get("type"),
                "config": obj.get("config"),
                "secrets": SecretSQLDatabase.from_dict(obj.get("secrets")) if obj.get("secrets") is not None else None,
            }
        )
        return _obj
