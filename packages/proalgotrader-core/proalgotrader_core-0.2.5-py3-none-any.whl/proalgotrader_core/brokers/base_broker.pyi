import abc
from _typeshed import Incomplete
from abc import abstractmethod
from proalgotrader_core.algo_session import AlgoSession as AlgoSession
from proalgotrader_core.api import Api as Api
from proalgotrader_core.base_symbol import BaseSymbol as BaseSymbol
from proalgotrader_core.broker_symbol import BrokerSymbol as BrokerSymbol
from proalgotrader_core.data_manager import DataManager as DataManager
from proalgotrader_core.order import Order as Order
from proalgotrader_core.position import Position as Position
from typing import Any, Dict, List

class BaseBroker(metaclass=abc.ABCMeta):
    api: Incomplete
    algo_session: Incomplete
    algorithm: Incomplete
    id: Incomplete
    broker_uid: Incomplete
    broker_title: Incomplete
    broker_name: Incomplete
    broker_config: Incomplete
    base_symbols: Incomplete
    broker_symbols: Incomplete
    capital: int
    orders: Incomplete
    positions: Incomplete
    trades: Incomplete
    data_manager: Incomplete
    def __init__(self, api: Api, algo_session: AlgoSession) -> None: ...
    def initialize(self) -> None: ...
    async def get_order_info(self, data: Dict[str, Any]) -> Order: ...
    async def get_position_info(self, data: Dict[str, Any]) -> Position: ...
    async def set_orders(self) -> None: ...
    async def set_positions(self) -> None: ...
    async def on_after_market_closed(self) -> None: ...
    def add_equity(self, *, base_symbol: BaseSymbol, market_type: str, segment_type: str) -> BrokerSymbol: ...
    def add_future(self, *, base_symbol: BaseSymbol, market_type: str, segment_type: str, expiry_period: str, expiry_date: str) -> BrokerSymbol: ...
    def add_option(self, *, base_symbol: BaseSymbol, market_type: str, segment_type: str, expiry_period: str, expiry_date: str, strike_price: int, option_type: str) -> BrokerSymbol: ...
    def get_symbol(self, broker_symbol_info: Dict[str, Any]) -> BrokerSymbol: ...
    def get_trades(self, symbol_name: str, market_type: str, order_type: str, product_type: str, position_type: str) -> List[Position]: ...
    def get_positions(self, symbol_name: str, market_type: str, order_type: str, product_type: str, position_type: str) -> List[Position]: ...
    async def manage_position(self, order: Order) -> None: ...
    async def enter_position(self, order: Order) -> None: ...
    async def exit_position(self, order: Order) -> None: ...
    async def next(self) -> None: ...
    @abstractmethod
    async def get_product_types(self) -> Dict[Any, Any]: ...
    @abstractmethod
    async def get_order_types(self) -> Dict[Any, Any]: ...
    @abstractmethod
    async def get_position_types(self) -> Dict[Any, Any]: ...
    @abstractmethod
    async def set_token_manager(self) -> None: ...
    @abstractmethod
    async def set_capital(self) -> None: ...
    @abstractmethod
    async def get_average_enter_price(self, order: Order, trade: Position) -> float: ...
    @abstractmethod
    async def place_order(self, *, broker_symbol: BrokerSymbol, quantities: int, market_type: str, product_type: str, order_type: str, position_type: str, position_id: str | None) -> None: ...
