"use strict";(self.webpackChunknonebot=self.webpackChunknonebot||[]).push([[2282],{35318:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var a=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),m=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=m(e.components);return a.createElement(p.Provider,{value:n},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=m(t),u=r,k=s["".concat(p,".").concat(u)]||s[u]||c[u]||l;return t?a.createElement(k,i(i({ref:n},d),{},{components:t})):a.createElement(k,i({ref:n},d))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9245:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=t(25773),r=(t(27378),t(35318));const l={sidebar_position:3,description:"\u54cd\u5e94\u89c4\u5219\u7684\u4f7f\u7528"},i="Alconna \u54cd\u5e94\u89c4\u5219",o={unversionedId:"best-practice/alconna/matcher",id:"version-2.1.3/best-practice/alconna/matcher",title:"Alconna \u54cd\u5e94\u89c4\u5219",description:"\u54cd\u5e94\u89c4\u5219\u7684\u4f7f\u7528",source:"@site/versioned_docs/version-2.1.3/best-practice/alconna/matcher.md",sourceDirName:"best-practice/alconna",slug:"/best-practice/alconna/matcher",permalink:"/website/docs/2.1.3/best-practice/alconna/matcher",draft:!1,editUrl:"https://github.com/nonebot/nonebot2/edit/master/website/versioned_docs/version-2.1.3/best-practice/alconna/matcher.md",tags:[],version:"2.1.3",lastUpdatedBy:"noneflow[bot]",lastUpdatedAt:1708749338,formattedLastUpdatedAt:"2024\u5e742\u670824\u65e5",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"\u54cd\u5e94\u89c4\u5219\u7684\u4f7f\u7528"},sidebar:"tutorial",previous:{title:"Alconna \u547d\u4ee4\u89e3\u6790",permalink:"/website/docs/2.1.3/best-practice/alconna/command"},next:{title:"\u914d\u7f6e\u9879",permalink:"/website/docs/2.1.3/best-practice/alconna/config"}},p={},m=[{value:"\u54cd\u5e94\u5668\u4f7f\u7528",id:"\u54cd\u5e94\u5668\u4f7f\u7528",level:2},{value:"\u4f9d\u8d56\u6ce8\u5165",id:"\u4f9d\u8d56\u6ce8\u5165",level:2},{value:"\u6d88\u606f\u6bb5\u6807\u6ce8",id:"\u6d88\u606f\u6bb5\u6807\u6ce8",level:2},{value:"\u6761\u4ef6\u63a7\u5236",id:"\u6761\u4ef6\u63a7\u5236",level:2},{value:"\u5339\u914d\u62d3\u5c55",id:"\u5339\u914d\u62d3\u5c55",level:2}],d={toc:m},s="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(s,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"alconna-\u54cd\u5e94\u89c4\u5219"},"Alconna \u54cd\u5e94\u89c4\u5219"),(0,r.kt)("p",null,"\u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u4f7f\u7528\u793a\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from nonebot_plugin_alconna.adapters.onebot12 import Image\nfrom nonebot_plugin_alconna import At, on_alconna\nfrom arclet.alconna import Args, Option, Alconna, Arparma, MultiVar, Subcommand\n\nalc = Alconna(\n    ["/", "!"],\n    "role-group",\n    Subcommand(\n        "add",\n        Args["name", str],\n        Option("member", Args["target", MultiVar(At)]),\n    ),\n    Option("list"),\n    Option("icon", Args["icon", Image])\n)\nrg = on_alconna(alc, auto_send_output=True)\n\n\n@rg.handle()\nasync def _(result: Arparma):\n    if result.find("list"):\n        img = await ob12_gen_role_group_list_image()\n        await rg.finish(Image(img))\n    if result.find("add"):\n        group = await create_role_group(result.query[str]("add.name"))\n        if result.find("add.member"):\n            ats = result.query[tuple[At, ...]]("add.member.target")\n            group.extend(member.target for member in ats)\n        await rg.finish("\u6dfb\u52a0\u6210\u529f")\n')),(0,r.kt)("h2",{id:"\u54cd\u5e94\u5668\u4f7f\u7528"},"\u54cd\u5e94\u5668\u4f7f\u7528"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"on_alconna")," \u7684\u6240\u6709\u53c2\u6570\u5982\u4e0b\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"command: Alconna | str"),": Alconna \u547d\u4ee4"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"skip_for_unmatch: bool = True"),": \u662f\u5426\u5728\u547d\u4ee4\u4e0d\u5339\u914d\u65f6\u8df3\u8fc7\u8be5\u54cd\u5e94"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"auto_send_output: bool = False"),": \u662f\u5426\u81ea\u52a8\u53d1\u9001\u8f93\u51fa\u4fe1\u606f\u5e76\u8df3\u8fc7\u54cd\u5e94"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"aliases: set[str | tuple[str, ...]] | None = None"),": \u547d\u4ee4\u522b\u540d\uff0c\u4f5c\u7528\u7c7b\u4f3c\u4e8e ",(0,r.kt)("inlineCode",{parentName:"li"},"on_command")," \u4e2d\u7684 aliases"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"comp_config: CompConfig | None = None"),": \u8865\u5168\u4f1a\u8bdd\u914d\u7f6e\uff0c\u4e0d\u4f20\u5165\u5219\u4e0d\u542f\u7528\u8865\u5168\u4f1a\u8bdd"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extensions: list[type[Extension] | Extension] | None = None"),": \u9700\u8981\u52a0\u8f7d\u7684\u5339\u914d\u6269\u5c55\uff0c\u53ef\u4ee5\u662f\u6269\u5c55\u7c7b\u6216\u6269\u5c55\u5b9e\u4f8b"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exclude_ext: list[type[Extension] | str] | None = None"),": \u9700\u8981\u6392\u9664\u7684\u5339\u914d\u6269\u5c55\uff0c\u53ef\u4ee5\u662f\u6269\u5c55\u7c7b\u6216\u6269\u5c55\u7684 id"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"use_origin: bool = False"),": \u662f\u5426\u4f7f\u7528\u672a\u7ecf to_me \u7b49\u5904\u7406\u8fc7\u7684\u6d88\u606f"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"use_cmd_start: bool = False"),": \u662f\u5426\u4f7f\u7528 COMMAND_START \u4f5c\u4e3a\u547d\u4ee4\u524d\u7f00"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"use_cmd_sep: bool = False"),": \u662f\u5426\u4f7f\u7528 COMMAND_SEP \u4f5c\u4e3a\u547d\u4ee4\u5206\u9694\u7b26")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"on_alconna")," \u8fd4\u56de\u7684\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Matcher")," \u7684\u5b50\u7c7b ",(0,r.kt)("inlineCode",{parentName:"p"},"AlconnaMatcher"),"\uff0c\u5176\u62d3\u5c55\u4e86\u5982\u4e0b\u65b9\u6cd5\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".assign(path, value, or_not)"),": \u7528\u4e8e\u5bf9\u5305\u542b\u591a\u4e2a\u9009\u9879/\u5b50\u547d\u4ee4\u7684\u547d\u4ee4\u7684\u5206\u6d3e\u5904\u7406"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".got_path(path, prompt, middleware)"),": \u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"got")," \u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u4f1a\u4ee5 path \u5bf9\u5e94\u7684\u53c2\u6570\u4e3a\u51c6\uff0c\u8bfb\u53d6\u4f20\u5165 message \u7684\u6700\u540e\u4e00\u4e2a\u6d88\u606f\u6bb5\u5e76\u9a8c\u8bc1\u8f6c\u6362"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".set_path_arg(key, value)"),", ",(0,r.kt)("inlineCode",{parentName:"li"},".get_path_arg(key)"),": \u7c7b\u4f3c ",(0,r.kt)("inlineCode",{parentName:"li"},"set_arg")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"got_arg"),"\uff0c\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"got_path")," \u7684\u7279\u5316\u7248\u672c"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".reject_path(path[, prompt, fallback])"),": \u7c7b\u4f3c\u4e8e ",(0,r.kt)("inlineCode",{parentName:"li"},"reject_arg"),"\uff0c\u5bf9\u5e94 ",(0,r.kt)("inlineCode",{parentName:"li"},"got_path")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".dispatch"),": \u540c\u6837\u7684\u5206\u6d3e\u5904\u7406\uff0c\u4f46\u662f\u662f\u7c7b\u4f3c ",(0,r.kt)("inlineCode",{parentName:"li"},"CommandGroup")," \u4e00\u6837\u8fd4\u56de\u65b0\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"AlconnaMatcher")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".got"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"send"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"reject"),", ...: \u62d3\u5c55\u4e86 prompt \u7c7b\u578b\uff0c\u5373\u652f\u6301\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"UniMessage")," \u4f5c\u4e3a prompt")),(0,r.kt)("p",null,"\u7528\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from arclet.alconna import Alconna, Option, Args\nfrom nonebot_plugin_alconna import on_alconna, AlconnaMatch, Match, UniMessage\n\nlogin = on_alconna(Alconna(["/"], "login", Args["password?", str], Option("-r|--recall")))\n\n@login.assign("recall")\nasync def login_exit():\n    await login.finish("\u5df2\u9000\u51fa")\n\n@login.assign("password")\nasync def login_handle(pw: Match[str] = AlconnaMatch("password")):\n    if pw.available:\n        login.set_path_arg("password", pw.result)\n\n@login.got_path("password", prompt=UniMessage.template("{:At(user, $event.get_user_id())} \u8bf7\u8f93\u5165\u5bc6\u7801"))\nasync def login_got(password: str):\n    assert password\n    await login.send("\u767b\u5f55\u6210\u529f")\n')),(0,r.kt)("h2",{id:"\u4f9d\u8d56\u6ce8\u5165"},"\u4f9d\u8d56\u6ce8\u5165"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Alconna")," \u7684\u89e3\u6790\u7ed3\u679c\u4f1a\u653e\u5165 ",(0,r.kt)("inlineCode",{parentName:"p"},"Arparma")," \u7c7b\u4e2d\uff0c\u6216\u7528\u6237\u6307\u5b9a\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"Duplication")," \u7c7b\u3002"),(0,r.kt)("p",null,"\u800c ",(0,r.kt)("inlineCode",{parentName:"p"},"AlconnaMatcher")," \u5728\u539f\u6709 Matcher \u7684\u57fa\u7840\u4e0a\u62d3\u5c55\u4e86\u5141\u8bb8\u7684\u4f9d\u8d56\u6ce8\u5165\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@cmd.handle()\nasync def handle(\n    result: CommandResult,\n    arp: Arparma,\n    dup: Duplication,  # \u57fa\u7c7b\u6216\u5b50\u7c7b\u90fd\u53ef\u4ee5\n    ext: Extension,\n    source: Alconna,\n    abc: str,  # \u7c7b\u4f3c Match, \u4f46\u662f\u82e5\u5339\u914d\u7ed3\u679c\u4e0d\u5b58\u5728\u5bf9\u5e94\u5b57\u6bb5\u5219\u8df3\u8fc7\u8be5 handler\n    foo: Match[str],\n    bar: Query[int] = Query("ttt.bar", 0)  # Query \u4ecd\u7136\u9700\u8981\u4e00\u4e2a\u9ed8\u8ba4\u503c\u6765\u4f20\u9012 path \u53c2\u6570\n):\n    ...\n')),(0,r.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u672c\u63d2\u4ef6\u63d0\u4f9b\u4e86\u51e0\u7c7b\u989d\u5916\u7684\u6a21\u578b\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CommandResult"),": \u89e3\u6790\u7ed3\u679c\uff0c\u5305\u62ec\u4e86\u6e90\u547d\u4ee4 ",(0,r.kt)("inlineCode",{parentName:"li"},"source: Alconna")," \uff0c\u89e3\u6790\u7ed3\u679c ",(0,r.kt)("inlineCode",{parentName:"li"},"result: Arparma"),"\uff0c\u4ee5\u53ca\u53ef\u80fd\u7684\u8f93\u51fa\u4fe1\u606f ",(0,r.kt)("inlineCode",{parentName:"li"},"output: str | None")," \u5b57\u6bb5"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Match"),": \u5339\u914d\u9879\uff0c\u8868\u793a\u53c2\u6570\u662f\u5426\u5b58\u5728\u4e8e ",(0,r.kt)("inlineCode",{parentName:"li"},"all_matched_args")," \u5185\uff0c\u53ef\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"Match.available")," \u5224\u65ad\u662f\u5426\u5339\u914d\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"Match.result")," \u83b7\u53d6\u5339\u914d\u7684\u503c"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Query"),": \u67e5\u8be2\u9879\uff0c\u8868\u793a\u53c2\u6570\u662f\u5426\u53ef\u7531 ",(0,r.kt)("inlineCode",{parentName:"li"},"Arparma.query")," \u67e5\u8be2\u5e76\u83b7\u5f97\u7ed3\u679c\uff0c\u53ef\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"Query.available")," \u5224\u65ad\u662f\u5426\u67e5\u8be2\u6210\u529f\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"Query.result")," \u83b7\u53d6\u67e5\u8be2\u7ed3\u679c")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"\u5982\u679c\u4f60\u66f4\u559c\u6b22 Depends \u5f0f\u7684\u4f9d\u8d56\u6ce8\u5165\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"nonebot_plugin_alconna")," \u540c\u65f6\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570\uff0c\u4ed6\u4eec\u5305\u62ec\uff1a"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AlconnaResult"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"CommandResult")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AlconnaMatches"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Arparma")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AlconnaDuplication"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Duplication")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AlconnaMatch"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Match")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570\uff0c\u5176\u80fd\u591f\u989d\u5916\u4f20\u5165\u4e00\u4e2a middleware \u51fd\u6570\u6765\u5904\u7406\u5f97\u5230\u7684\u53c2\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AlconnaQuery"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Query")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570\uff0c\u5176\u80fd\u591f\u989d\u5916\u4f20\u5165\u4e00\u4e2a middleware \u51fd\u6570\u6765\u5904\u7406\u5f97\u5230\u7684\u53c2\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AlconnaExecResult"),": \u63d0\u4f9b\u6302\u8f7d\u5728\u547d\u4ee4\u4e0a\u7684 callback \u7684\u8fd4\u56de\u7ed3\u679c (",(0,r.kt)("inlineCode",{parentName:"li"},"Dict[str, Any]"),") \u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AlconnaExtension"),": \u63d0\u4f9b\u6307\u5b9a\u7c7b\u578b\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"Extension")," \u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570"))),(0,r.kt)("p",null,"\u5b9e\u4f8b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'...\nfrom nonebot import require\nrequire("nonebot_plugin_alconna")\n...\n\nfrom nonebot_plugin_alconna import on_alconna, Match, Query, AlconnaQuery\nfrom arclet.alconna import Alconna, Args, Option, Arparma\n\ntest = on_alconna(\n    Alconna(\n        "test",\n        Option("foo", Args["bar", int]),\n        Option("baz", Args["qux", bool, False])\n    ),\n    auto_send_output=True\n)\n\n\n@test.handle()\nasync def handle_test1(result: AlcResult):\n    await test.send(f"matched: {result.matched}")\n    await test.send(f"maybe output: {result.output}")\n\n@test.handle()\nasync def handle_test2(bar: Match[int]):\n    if bar.available:\n        await test.send(f"foo={bar.result}")\n\n@test.handle()\nasync def handle_test3(qux: Query[bool] = AlconnaQuery("baz.qux", False)):\n    if qux.available:\n        await test.send(f"baz.qux={qux.result}")\n')),(0,r.kt)("h2",{id:"\u6d88\u606f\u6bb5\u6807\u6ce8"},"\u6d88\u606f\u6bb5\u6807\u6ce8"),(0,r.kt)("p",null,"\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u6d88\u606f\u6bb5\u6807\u6ce8\uff0c\u5176\u4e2d ",(0,r.kt)("inlineCode",{parentName:"p"},"At")," \u5c5e\u4e8e\u901a\u7528\u6807\u6ce8\uff0c\u800c ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," \u5c5e\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"onebot12")," \u9002\u914d\u5668\u4e0b\u7684\u6807\u6ce8\u3002"),(0,r.kt)("p",null,"\u9002\u914d\u5668\u4e0b\u7684\u6d88\u606f\u6bb5\u6807\u6ce8\u4f1a\u5339\u914d\u7279\u5b9a\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageSegment"),"\uff1a"),(0,r.kt)("p",null,"\u800c\u901a\u7528\u6807\u6ce8\u4e0e\u9002\u914d\u5668\u6807\u6ce8\u7684\u533a\u522b\u5728\u4e8e\uff0c\u901a\u7528\u6807\u6ce8\u4f1a\u5339\u914d\u591a\u4e2a\u9002\u914d\u5668\u4e2d\u76f8\u4f3c\u7c7b\u578b\u7684\u6d88\u606f\u6bb5\uff0c\u5e76\u8fd4\u56de\n",(0,r.kt)("inlineCode",{parentName:"p"},"nonebot_plugin_alconna.uniseg")," \u4e2d\u5b9a\u4e49\u7684 ",(0,r.kt)("a",{parentName:"p",href:"/website/docs/2.1.3/best-practice/alconna/utils#%E9%80%9A%E7%94%A8%E6%B6%88%E6%81%AF%E6%AE%B5"},(0,r.kt)("inlineCode",{parentName:"a"},"Segment")," \u6a21\u578b")),(0,r.kt)("p",null,"\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'...\nats = result.query[tuple[At, ...]]("add.member.target")\ngroup.extend(member.target for member in ats)\n')),(0,r.kt)("p",null,"\u8fd9\u6837\u63d2\u4ef6\u4f7f\u7528\u8005\u5c31\u4e0d\u7528\u8003\u8651\u5e73\u53f0\u4e4b\u95f4\u5b57\u6bb5\u7684\u5dee\u5f02"),(0,r.kt)("p",null,"\u672c\u63d2\u4ef6\u4e3a\u4ee5\u4e0b\u9002\u914d\u5668\u63d0\u4f9b\u4e86\u4e13\u95e8\u7684\u9002\u914d\u5668\u6807\u6ce8\uff1a"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u534f\u8bae\u540d\u79f0"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8def\u5f84"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-onebot"},"OneBot \u534f\u8bae")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.onebot11, adapters.onebot12")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-telegram"},"Telegram")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.telegram")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-feishu"},"\u98de\u4e66")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.feishu")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-github"},"GitHub")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.github")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-qq"},"QQ bot")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.qq")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-qq"},"QQ \u9891\u9053 bot")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.qqguild")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-ding"},"\u9489\u9489")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.ding")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-console"},"Console")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.console")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Tian-que/nonebot-adapter-kaiheila"},"\u5f00\u9ed1\u5566")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.kook")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/ieew/nonebot_adapter_mirai2"},"Mirai")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.mirai")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/JustUndertaker/adapter-ntchat"},"Ntchat")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.ntchat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/17TheWord/nonebot-adapter-minecraft"},"MineCraft")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.minecraft")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/wwweww/adapter-bilibili"},"BiliBili Live")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.bilibili")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/onebot-walle/nonebot_adapter_walleq"},"Walle-Q")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.onebot12")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/CMHopeSunshine/nonebot-adapter-villa"},"Villa")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.villa")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-discord"},"Discord")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.discord")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-red"},"Red \u534f\u8bae")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.red")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-satori"},"Satori \u534f\u8bae")),(0,r.kt)("td",{parentName:"tr",align:null},"adapters.satori")))),(0,r.kt)("h2",{id:"\u6761\u4ef6\u63a7\u5236"},"\u6761\u4ef6\u63a7\u5236"),(0,r.kt)("p",null,"\u672c\u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"assign")," \u6765\u63a7\u5236\u4e00\u4e2a\u5177\u4f53\u7684\u54cd\u5e94\u51fd\u6570\u662f\u5426\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u65f6\u8df3\u8fc7\u54cd\u5e94\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'...\nfrom nonebot import require\nrequire("nonebot_plugin_alconna")\n...\n\nfrom arclet.alconna import Alconna, Subcommand, Option, Args\nfrom nonebot_plugin_alconna import on_alconna, CommandResult\n\npip = Alconna(\n    "pip",\n    Subcommand(\n        "install", Args["pak", str],\n        Option("--upgrade"),\n        Option("--force-reinstall")\n    ),\n    Subcommand("list", Option("--out-dated"))\n)\n\npip_cmd = on_alconna(pip)\n\n# \u4ec5\u5728\u547d\u4ee4\u4e3a `pip install pip` \u65f6\u54cd\u5e94\n@pip_cmd.assign("install.pak", "pip")\nasync def update(res: CommandResult):\n    ...\n\n# \u4ec5\u5728\u547d\u4ee4\u4e3a `pip list` \u65f6\u54cd\u5e94\n@pip_cmd.assign("list")\nasync def list_(res: CommandResult):\n    ...\n\n# \u5728\u547d\u4ee4\u4e3a `pip install xxx` \u65f6\u54cd\u5e94\n@pip_cmd.assign("install")\nasync def install(res: CommandResult):\n    ...\n')),(0,r.kt)("p",null,"\u6b64\u5916\uff0c\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"AlconnaMatcher.dispatch")," \u8fd8\u80fd\u50cf ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandGroup")," \u4e00\u6837\u4e3a\u6bcf\u4e2a\u5206\u53d1\u8bbe\u7f6e\u72ec\u7acb\u7684 matcher\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'update_cmd = pip_cmd.dispatch("install.pak", "pip")\n\n@update_cmd.handle()\nasync def update(arp: CommandResult):\n    ...\n')),(0,r.kt)("p",null,"\u53e6\u5916\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"AlconnaMatcher")," \u6709\u7c7b\u4f3c\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"got")," \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"got_path"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from nonebot_plugin_alconna import At, Match, UniMessage, on_alconna\n\ntest_cmd = on_alconna(Alconna("test", Args["target?", Union[str, At]]))\n\n@test_cmd.handle()\nasync def tt_h(target: Match[Union[str, At]]):\n    if target.available:\n        test_cmd.set_path_arg("target", target.result)\n\n@test_cmd.got_path("target", prompt="\u8bf7\u8f93\u5165\u76ee\u6807")\nasync def tt(target: Union[str, At]):\n    await test_cmd.send(UniMessage(["ok\\n", target]))\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"got_path")," \u4e0e ",(0,r.kt)("inlineCode",{parentName:"p"},"assign"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Match"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Query")," \u7b49\u5730\u65b9\u4e00\u6837\uff0c\u90fd\u9700\u8981\u6307\u660e ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," \u53c2\u6570 (\u5373\u5bf9\u5e94 Arg \u9a8c\u8bc1\u7684\u8def\u5f84)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"got_path")," \u4f1a\u83b7\u53d6\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u6d88\u606f\u6bb5\u5e76\u8f6c\u4e3a path \u5bf9\u5e94\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u793a\u4f8b\u4e2d ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," \u5bf9\u5e94\u7684 Arg \u91cc\u8981\u6c42 str \u6216 At\uff0c\u5219 got \u540e\u7528\u6237\u8f93\u5165\u7684\u6d88\u606f\u53ea\u6709\u4e3a text \u6216 at \u624d\u80fd\u8fdb\u5165\u5904\u7406\u51fd\u6570\u3002"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"path")," \u652f\u6301 ~XXX \u8bed\u6cd5\uff0c\u5176\u4f1a\u628a ~ \u66ff\u6362\u4e3a\u53ef\u80fd\u7684\u7236\u7ea7\u8def\u5f84\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},' pip = Alconna(\n     "pip",\n     Subcommand(\n         "install",\n         Args["pak", str],\n         Option("--upgrade|-U"),\n         Option("--force-reinstall"),\n     ),\n     Subcommand("list", Option("--out-dated")),\n )\n\n pipcmd = on_alconna(pip)\n pip_install_cmd = pipcmd.dispatch("install")\n\n\n @pip_install_cmd.assign("~upgrade")\n async def pip1_u(pak: Query[str] = Query("~pak")):\n     await pip_install_cmd.finish(f"pip upgrading {pak.result}...")\n'))),(0,r.kt)("h2",{id:"\u5339\u914d\u62d3\u5c55"},"\u5339\u914d\u62d3\u5c55"),(0,r.kt)("p",null,"\u672c\u63d2\u4ef6\u63d0\u4f9b\u4e86\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"Extension")," \u7c7b\uff0c\u5176\u7528\u4e8e\u81ea\u5b9a\u4e49 AlconnaMatcher \u7684\u90e8\u5206\u884c\u4e3a\u3002"),(0,r.kt)("p",null,"\u4f8b\u5982 ",(0,r.kt)("inlineCode",{parentName:"p"},"LLMExtension")," (\u4ec5\u4e3e\u4f8b)\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from nonebot_plugin_alconna import Extension, Alconna, on_alconna, Interface\n\nclass LLMExtension(Extension):\n    @property\n    def priority(self) -> int:\n        return 10\n\n    @property\n    def id(self) -> str:\n        return "LLMExtension"\n\n    def __init__(self, llm):\n      self.llm = llm\n\n    def post_init(self, alc: Alconna) -> None:\n        self.llm.add_context(alc.command, alc.meta.description)\n\n    async def receive_wrapper(self, bot, event, receive):\n        resp = await self.llm.input(str(receive))\n        return receive.__class__(resp.content)\n\n    def before_catch(self, name, annotation, default):\n        return name == "llm"\n\n    def catch(self, interface: Interface):\n        if interface.name == "llm":\n            return self.llm\n\nmatcher = on_alconna(\n    Alconna(...),\n    extensions=[LLMExtension(LLM)]\n)\n...\n')),(0,r.kt)("p",null,"\u90a3\u4e48\u4f7f\u7528\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"LLMExtension")," \u7684\u54cd\u5e94\u5668\u4fbf\u80fd\u63a5\u53d7\u4efb\u4f55\u80fd\u901a\u8fc7 llm \u7ffb\u8bd1\u4e3a\u5177\u4f53\u547d\u4ee4\u7684\u81ea\u7136\u8bed\u8a00\u6d88\u606f\uff0c\u540c\u65f6\u53ef\u4ee5\u5728\u54cd\u5e94\u5668\u4e2d\u4e3a\u6240\u6709 ",(0,r.kt)("inlineCode",{parentName:"p"},"llm")," \u53c2\u6570\u6ce8\u5165\u6a21\u578b\u53d8\u91cf"),(0,r.kt)("p",null,"\u76ee\u524d ",(0,r.kt)("inlineCode",{parentName:"p"},"Extension")," \u7684\u529f\u80fd\u6709\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"validate"),": \u5bf9\u4e8e\u4e8b\u4ef6\u7684\u6765\u6e90\u9002\u914d\u5668\u6216 bot \u9009\u62e9\u662f\u5426\u63a5\u53d7\u54cd\u5e94"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"output_converter"),": \u8f93\u51fa\u4fe1\u606f\u7684\u81ea\u5b9a\u4e49\u8f6c\u6362\u65b9\u6cd5"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message_provider"),": \u4ece\u4f20\u5165\u4e8b\u4ef6\u4e2d\u81ea\u5b9a\u4e49\u63d0\u53d6\u6d88\u606f\u7684\u65b9\u6cd5"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"receive_provider"),": \u5bf9\u4f20\u5165\u7684\u6d88\u606f (Message \u6216 UniMessage) \u7684\u989d\u5916\u5904\u7406"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"permission_check"),": \u547d\u4ee4\u5bf9\u6d88\u606f\u89e3\u6790\u5e76\u786e\u8ba4\u5934\u90e8\u5339\u914d\uff08\u5373\u786e\u8ba4\u9009\u62e9\u54cd\u5e94\uff09\u65f6\u5bf9\u53d1\u9001\u8005\u7684\u6743\u9650\u5224\u65ad"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parse_wrapper"),": \u5bf9\u547d\u4ee4\u89e3\u6790\u7ed3\u679c\u7684\u989d\u5916\u5904\u7406"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"send_wrapper"),": \u5bf9\u53d1\u9001\u7684\u6d88\u606f (Message \u6216 UniMessage) \u7684\u989d\u5916\u5904\u7406"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"before_catch"),": \u81ea\u5b9a\u4e49\u4f9d\u8d56\u6ce8\u5165\u7684\u7ed1\u5b9a\u786e\u8ba4\u51fd\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"catch"),": \u81ea\u5b9a\u4e49\u4f9d\u8d56\u6ce8\u5165\u5904\u7406\u51fd\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"post_init"),": \u54cd\u5e94\u5668\u521b\u5efa\u540e\u5bf9\u547d\u4ee4\u5bf9\u8c61\u7684\u989d\u5916\u9664\u4e86")),(0,r.kt)("p",null,"\u4f8b\u5982\u5185\u7f6e\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"DiscordSlashExtension"),"\uff0c\u5176\u53ef\u81ea\u52a8\u5c06 Alconna \u5bf9\u8c61\u7ffb\u8bd1\u6210 slash \u6307\u4ee4\u5e76\u6ce8\u518c\uff0c\u4e14\u5c06\u6536\u5230\u7684\u6307\u4ee4\u4ea4\u4e92\u4e8b\u4ef6\u8f6c\u4e3a\u6307\u4ee4\u4f9b\u547d\u4ee4\u89e3\u6790:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from nonebot_plugin_alconna import Match, on_alconna\n\nfrom nonebot_plugin_alconna.adapters.discord import DiscordSlashExtension\n\nalc = Alconna(\n    ["/"],\n    "permission",\n    Subcommand("add", Args["plugin", str]["priority?", int]),\n    Option("remove", Args["plugin", str]["time?", int]),\n    meta=CommandMeta(description="\u6743\u9650\u7ba1\u7406"),\n)\n\nmatcher = on_alconna(alc, extensions=[DiscordSlashExtension()])\n\n@matcher.assign("add")\nasync def add(plugin: Match[str], priority: Match[int]):\n    await matcher.finish(f"added {plugin.result} with {priority.result if priority.available else 0}")\n\n@matcher.assign("remove")\nasync def remove(plugin: Match[str], time: Match[int]):\n    await matcher.finish(f"removed {plugin.result} with {time.result if time.available else -1}")\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"\u5168\u5c40\u7684 Extension \u53ef\u5ef6\u8fdf\u52a0\u8f7d (\u5373\u82e5\u6709\u5168\u5c40\u62d3\u5c55\u52a0\u8f7d\u4e8e\u90e8\u5206 AlconnaMatcher \u4e4b\u540e\uff0c\u8fd9\u90e8\u5206\u54cd\u5e94\u5668\u4f1a\u88ab\u8ffd\u52a0\u62d3\u5c55)")))}c.isMDXComponent=!0}}]);