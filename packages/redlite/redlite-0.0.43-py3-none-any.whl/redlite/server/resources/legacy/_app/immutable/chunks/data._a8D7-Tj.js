import{d as w,w as f}from"./entry.UEUw4yfS.js";import{l as b}from"./load.I0GEkmNg.js";const i=f(!1),h=(()=>{const{subscribe:n,set:r}=f([]);async function o(){try{i.set(!0);const a=await b();a.sort((m,l)=>new Date(l.completed)-new Date(m.completed)),r(a)}finally{i.set(!1)}}return o(),{subscribe:n,refresh:o}})(),d=n=>`${n.dataset} ${n.split} ${n.data_digest} ${n.metric}`,u=1e-4,y=w(h,(n,r)=>{const o={},a={};for(const e of n)o[e.model]===void 0&&(o[e.model]={model:e.model,tasks:{},winRate:0}),o[e.model].tasks[d(e)]===void 0&&(o[e.model].tasks[d(e)]={data_digest:e.data_digest,dataset:e.dataset,split:e.split,metric:e.metric,winner:!1,runs:[]}),o[e.model].tasks[d(e)].runs.push(e),a[d(e)]===void 0&&(a[d(e)]={taskHash:d(e),data_digest:e.data_digest,dataset:e.dataset,split:e.split,metric:e.metric,models:{},highestScore:0}),a[d(e)].models[e.model]===void 0&&(a[d(e)].models[e.model]={model:e.model,runs:[],wins:0}),a[d(e)].models[e.model].runs.push(e);for(const e of Object.values(a)){for(const s of Object.values(e.models))s.runs.sort((c,p)=>new Date(p.completed)-new Date(c.completed)),s.completed=s.runs[0].completed,s.score_summary=s.runs[0].score_summary;const t=Math.max(...Object.values(e.models).map(s=>s.score_summary.mean));e.highestScore=t;for(const s of Object.values(e.models))Math.abs(s.score_summary.mean-t)<u&&t>u&&(s.wins+=1,o[s.model].winRate+=1,o[s.model].tasks[e.taskHash].winner=!0)}for(const e of Object.values(o)){for(const t of Object.values(e.tasks))t.runs.sort((s,c)=>new Date(c.completed)-new Date(s.completed)),t.completed=t.runs[0].completed,t.score_summary=t.runs[0].score_summary;e.winRate/=Object.keys(a).length}const m=[...Object.values(o)];m.sort((e,t)=>t.winRate-e.winRate);const l=[...Object.values(a)];l.sort((e,t)=>new Date(t.completed)-new Date(e.completed)),r({models:m,tasks:l})},{models:[],tasks:[]});export{y as a,i as l,h as r};
