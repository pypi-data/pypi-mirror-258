# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Authentication_pb2 as Authentication__pb2
import BasicResponse_pb2 as BasicResponse__pb2
import BusConfiguration_pb2 as BusConfiguration__pb2
import ModuleConfiguration_pb2 as ModuleConfiguration__pb2
import Status_pb2 as Status__pb2


class AuthenticationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/com.jifeline.OpenOBD.Protocol.AuthenticationService/Authenticate',
                request_serializer=Authentication__pb2.AuthenticationRequest.SerializeToString,
                response_deserializer=Authentication__pb2.AuthenticationResponse.FromString,
                )
        self.RefreshAuthentication = channel.unary_unary(
                '/com.jifeline.OpenOBD.Protocol.AuthenticationService/RefreshAuthentication',
                request_serializer=Authentication__pb2.AuthenticationRequest.SerializeToString,
                response_deserializer=Authentication__pb2.AuthenticationResponse.FromString,
                )


class AuthenticationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshAuthentication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthenticationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=Authentication__pb2.AuthenticationRequest.FromString,
                    response_serializer=Authentication__pb2.AuthenticationResponse.SerializeToString,
            ),
            'RefreshAuthentication': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshAuthentication,
                    request_deserializer=Authentication__pb2.AuthenticationRequest.FromString,
                    response_serializer=Authentication__pb2.AuthenticationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.jifeline.OpenOBD.Protocol.AuthenticationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthenticationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.jifeline.OpenOBD.Protocol.AuthenticationService/Authenticate',
            Authentication__pb2.AuthenticationRequest.SerializeToString,
            Authentication__pb2.AuthenticationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshAuthentication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.jifeline.OpenOBD.Protocol.AuthenticationService/RefreshAuthentication',
            Authentication__pb2.AuthenticationRequest.SerializeToString,
            Authentication__pb2.AuthenticationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ModuleConfigurationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.requestModuleConfiguration = channel.unary_unary(
                '/com.jifeline.OpenOBD.Protocol.ModuleConfigurationService/requestModuleConfiguration',
                request_serializer=ModuleConfiguration__pb2.ModuleConfiguration.SerializeToString,
                response_deserializer=BasicResponse__pb2.Result.FromString,
                )


class ModuleConfigurationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def requestModuleConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModuleConfigurationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'requestModuleConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.requestModuleConfiguration,
                    request_deserializer=ModuleConfiguration__pb2.ModuleConfiguration.FromString,
                    response_serializer=BasicResponse__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.jifeline.OpenOBD.Protocol.ModuleConfigurationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModuleConfigurationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def requestModuleConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.jifeline.OpenOBD.Protocol.ModuleConfigurationService/requestModuleConfiguration',
            ModuleConfiguration__pb2.ModuleConfiguration.SerializeToString,
            BasicResponse__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RemoteDiagnosticsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConfigureBus = channel.unary_unary(
                '/com.jifeline.OpenOBD.Protocol.RemoteDiagnostics/ConfigureBus',
                request_serializer=BusConfiguration__pb2.BusConfiguration.SerializeToString,
                response_deserializer=Status__pb2.Status.FromString,
                )
        self.ConfigureBuses = channel.stream_unary(
                '/com.jifeline.OpenOBD.Protocol.RemoteDiagnostics/ConfigureBuses',
                request_serializer=BusConfiguration__pb2.BusConfiguration.SerializeToString,
                response_deserializer=Status__pb2.Status.FromString,
                )


class RemoteDiagnosticsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConfigureBus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureBuses(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RemoteDiagnosticsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConfigureBus': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureBus,
                    request_deserializer=BusConfiguration__pb2.BusConfiguration.FromString,
                    response_serializer=Status__pb2.Status.SerializeToString,
            ),
            'ConfigureBuses': grpc.stream_unary_rpc_method_handler(
                    servicer.ConfigureBuses,
                    request_deserializer=BusConfiguration__pb2.BusConfiguration.FromString,
                    response_serializer=Status__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.jifeline.OpenOBD.Protocol.RemoteDiagnostics', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RemoteDiagnostics(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConfigureBus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.jifeline.OpenOBD.Protocol.RemoteDiagnostics/ConfigureBus',
            BusConfiguration__pb2.BusConfiguration.SerializeToString,
            Status__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureBuses(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/com.jifeline.OpenOBD.Protocol.RemoteDiagnostics/ConfigureBuses',
            BusConfiguration__pb2.BusConfiguration.SerializeToString,
            Status__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
