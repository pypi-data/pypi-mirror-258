# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2258
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from vrt_lss_studio.models.statistics import Statistics
from vrt_lss_studio.models.stop_statistics import StopStatistics
from vrt_lss_studio.models.transport_load import TransportLoad
from typing import Optional, Set
from typing_extensions import Self

class TripStatistics(BaseModel):
    """
    Statistics for a specific trip. 
    """ # noqa: E501
    trip_key: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="Trip key, unique identifier")
    statistics: Statistics
    stop_statistics: Annotated[List[StopStatistics], Field(min_length=0, max_length=15001)] = Field(description="Statistics per stop during the trip.")
    total_load: TransportLoad
    max_load: TransportLoad
    max_transfer_load: TransportLoad
    __properties: ClassVar[List[str]] = ["trip_key", "statistics", "stop_statistics", "total_load", "max_load", "max_transfer_load"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TripStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stop_statistics (list)
        _items = []
        if self.stop_statistics:
            for _item in self.stop_statistics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stop_statistics'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_load
        if self.total_load:
            _dict['total_load'] = self.total_load.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_load
        if self.max_load:
            _dict['max_load'] = self.max_load.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_transfer_load
        if self.max_transfer_load:
            _dict['max_transfer_load'] = self.max_transfer_load.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TripStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trip_key": obj.get("trip_key"),
            "statistics": Statistics.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None,
            "stop_statistics": [StopStatistics.from_dict(_item) for _item in obj["stop_statistics"]] if obj.get("stop_statistics") is not None else None,
            "total_load": TransportLoad.from_dict(obj["total_load"]) if obj.get("total_load") is not None else None,
            "max_load": TransportLoad.from_dict(obj["max_load"]) if obj.get("max_load") is not None else None,
            "max_transfer_load": TransportLoad.from_dict(obj["max_transfer_load"]) if obj.get("max_transfer_load") is not None else None
        })
        return _obj


