// The grammar of Java programming language (SE 16, JSR 391) as defined in
// https://docs.oracle.com/javase/specs/jls/se16/html/jls-19.html

CompilationUnit:
      OrdinaryCompilationUnit
    | ModularCompilationUnit;

Type:
      PrimitiveType
    | ReferenceType;

PrimitiveType:
    Annotation* NumericType
    Annotation* "boolean";

NumericType:
      IntegralType
    | FloatingPointType;

IntegralType:
    "byte" | "short" | "int" | "long" | "char";

FloatingPointType:
    "float" | "double";

ReferenceType:
      ClassOrInterfaceType
    | TypeVariable
    | ArrayType;

ClassOrInterfaceType:
      ClassType
    | InterfaceType;

ClassType:
      (PackageName dot | ClassOrInterfaceType dot)?
      Annotation* TypeIdentifier TypeArguments?;

InterfaceType:
    ClassType;

TypeVariable:
    Annotation* TypeIdentifier;

ArrayType:
      PrimitiveType Dims
    | ClassOrInterfaceType Dims
    | TypeVariable Dims;

Dims:
    Annotation* "[" "]" (Annotation* "[" "]")*;

TypeParameter:
    TypeParameterModifier* TypeIdentifier TypeBound?;

TypeParameterModifier:
    Annotation;

TypeBound:
    "extends" (TypeVariable | ClassOrInterfaceType) AdditionalBound*;

AdditionalBound:
    "&" InterfaceType;

TypeArguments:
    "<" TypeArgumentList ">";

TypeArgumentList:
    TypeArgument+[comma];

TypeArgument:
      ReferenceType
    | Wildcard;

Wildcard:
    Annotation* "?" WildcardBounds?;

WildcardBounds:
      ("extends" | "super") ReferenceType;

ModuleName:
      Identifier
    | ModuleName dot Identifier;

PackageName:
      Identifier
    | PackageName dot Identifier;

TypeName:
      TypeIdentifier
    | PackageOrTypeName dot TypeIdentifier;

ExpressionName:
      Identifier
    | AmbiguousName dot Identifier;

MethodName:
    UnqualifiedMethodIdentifier;

PackageOrTypeName:
      Identifier
    | PackageOrTypeName dot Identifier;

AmbiguousName:
      Identifier
    | AmbiguousName dot Identifier;

OrdinaryCompilationUnit:
    PackageDeclaration? ImportDeclaration* TopLevelClassOrInterfaceDeclaration*;

ModularCompilationUnit:
    ImportDeclaration* ModuleDeclaration;

PackageDeclaration:
    PackageModifier* "package" Identifier+[dot] semicolon;

PackageModifier:
    Annotation;

ImportDeclaration:
      SingleTypeImportDeclaration
    | TypeImportOnDemandDeclaration
    | SingleStaticImportDeclaration
    | StaticImportOnDemandDeclaration;

SingleTypeImportDeclaration:
    "import" TypeName semicolon;

TypeImportOnDemandDeclaration:
    "import" PackageOrTypeName dot "*" semicolon;

SingleStaticImportDeclaration:
    "import" "static" TypeName dot Identifier semicolon;

StaticImportOnDemandDeclaration:
    "import" "static" TypeName dot "*" semicolon;

TopLevelClassOrInterfaceDeclaration:
      ClassDeclaration
    | InterfaceDeclaration
    | semicolon;

ModuleDeclaration:
    Annotation* "open"? "module" Identifier+[dot] "{" ModuleDirective* "}";

ModuleDirective:
      "requires" RequiresModifier* ModuleName semicolon
    | ("exports"|"opens") PackageName ("to" ModuleName+[comma]) semicolon
    | "uses" TypeName semicolon
    | "provides" TypeName "with" TypeName+[comma] semicolon;

RequiresModifier:
    "transitive" | "static";

ClassDeclaration:
      NormalClassDeclaration
    | EnumDeclaration
    | RecordDeclaration;

NormalClassDeclaration:
    ClassModifier* "class" TypeIdentifier TypeParameters?
                   ClassExtends? ClassImplements? ClassBody;

ClassModifier:
    Annotation
    | "public" | "protected" | "private"
    | "abstract" | "static" | "final" | "strictfp";

TypeParameters:
    "<" TypeParameterList ">";

TypeParameterList:
    TypeParameter+[comma];

ClassExtends:
    "extends" ClassType;

ClassImplements:
    "implements" InterfaceTypeList;

InterfaceTypeList:
    InterfaceType+[comma];

ClassBody:
    "{" ClassBodyDeclaration* "}";

ClassBodyDeclaration:
      ClassMemberDeclaration
    | InstanceInitializer
    | StaticInitializer
    | ConstructorDeclaration;

ClassMemberDeclaration:
      FieldDeclaration
    | MethodDeclaration
    | ClassDeclaration
    | InterfaceDeclaration
    | semicolon;

FieldDeclaration:
    FieldModifier* UnannType VariableDeclaratorList semicolon;

FieldModifier:
    Annotation
    | "public" | "protected" | "private"
    | "static" | "final" | "transient" | "volatile";

VariableDeclaratorList:
    VariableDeclarator+[comma];

VariableDeclarator:
    VariableDeclaratorId ("=" VariableInitializer)?;

VariableDeclaratorId:
    Identifier Dims?;

VariableInitializer:
      Expression
    | ArrayInitializer;

UnannType:
      UnannPrimitiveType
    | UnannReferenceType;

UnannPrimitiveType:
      NumericType
    | "boolean";

UnannReferenceType:
      UnannClassOrInterfaceType
    | UnannTypeVariable
    | UnannArrayType;

UnannClassOrInterfaceType:
      UnannClassType
    | UnannInterfaceType;

UnannClassType:
    ((PackageName | UnannClassOrInterfaceType) dot Annotation*)?
                  TypeIdentifier TypeArguments?;

UnannInterfaceType:
    UnannClassType;

UnannTypeVariable:
    TypeIdentifier;

UnannArrayType:
      UnannPrimitiveType Dims
    | UnannClassOrInterfaceType Dims
    | UnannTypeVariable Dims;

MethodDeclaration:
    MethodModifier* MethodHeader MethodBody;

MethodModifier:
    Annotation
    | "public" | "protected" | "private"
    | "abstract" | "static" | "final" | "synchronized" | "native" | "strictfp";

MethodHeader:
    (TypeParameters Annotation*)? Result MethodDeclarator Throws?;

Result:
      UnannType
    | "void";

MethodDeclarator:
    Identifier "(" (ReceiverParameter comma)? FormalParameterList? ")" Dims?;

ReceiverParameter:
    Annotation* UnannType (Identifier dot)? "this";

FormalParameterList:
    FormalParameter+[comma];

FormalParameter:
      VariableModifier* UnannType VariableDeclaratorId
    | VariableArityParameter;

VariableArityParameter:
    VariableModifier* UnannType Annotation* ellipsis Identifier;

VariableModifier:
      Annotation
    | "final";

Throws:
    "throws" ExceptionTypeList;

ExceptionTypeList:
    ExceptionType+[comma];

ExceptionType:
      ClassType
    | TypeVariable;

MethodBody:
      Block
    | semicolon;

InstanceInitializer:
    Block;

StaticInitializer:
    "static" Block;

ConstructorDeclaration:
    ConstructorModifier* ConstructorDeclarator Throws? ConstructorBody;

ConstructorModifier:
    Annotation | "public" | "protected" | "private";

ConstructorDeclarator:
    TypeParameters? SimpleTypeName "(" (ReceiverParameter comma)? FormalParameterList? ")";

SimpleTypeName:
    TypeIdentifier;

ConstructorBody:
    "{" ExplicitConstructorInvocation? BlockStatements? "}";

ExplicitConstructorInvocation:
      TypeArguments? "this" "(" ArgumentList? ")" semicolon
    | TypeArguments? "super" "(" ArgumentList? ")" semicolon
    | ExpressionName dot TypeArguments? "super" "(" ArgumentList? ")" semicolon
    | Primary dot TypeArguments? "super" "(" ArgumentList? ")" semicolon;

EnumDeclaration:
    ClassModifier* "enum" TypeIdentifier ClassImplements? EnumBody;

EnumBody:
    "{" EnumConstantList? comma? EnumBodyDeclarations? "}";

EnumConstantList:
    EnumConstant+[comma];

EnumConstant:
    EnumConstantModifier* Identifier ("(" ArgumentList? ")")? ClassBody?;

EnumConstantModifier:
    Annotation;

EnumBodyDeclarations:
    semicolon ClassBodyDeclaration*;

RecordDeclaration:
    ClassModifier* "record" TypeIdentifier TypeParameters? RecordHeader
                   ClassImplements? RecordBody;

RecordHeader:
    "(" RecordComponentList? ")";

RecordComponentList:
    RecordComponent+[comma];

RecordComponent:
      RecordComponentModifier* UnannType Identifier
    | VariableArityRecordComponent;

VariableArityRecordComponent:
    RecordComponentModifier* UnannType Annotation* ellipsis Identifier;

RecordComponentModifier:
    Annotation;

RecordBody:
    "{" RecordBodyDeclaration* "}";

RecordBodyDeclaration:
      ClassBodyDeclaration
    | CompactConstructorDeclaration;

CompactConstructorDeclaration:
    ConstructorModifier* SimpleTypeName ConstructorBody;

InterfaceDeclaration:
      NormalInterfaceDeclaration
    | AnnotationInterfaceDeclaration;

NormalInterfaceDeclaration:
    InterfaceModifier* "interface" TypeIdentifier TypeParameters?
                       InterfaceExtends? InterfaceBody;

InterfaceModifier:
    Annotation
    | "public" | "protected" | "private"
    | "abstract" | "static" | "strictfp";

InterfaceExtends:
    "extends" InterfaceTypeList;

InterfaceBody:
    "{" InterfaceMemberDeclaration* "}";

InterfaceMemberDeclaration:
      ConstantDeclaration
    | InterfaceMethodDeclaration
    | ClassDeclaration
    | InterfaceDeclaration
    | semicolon;

ConstantDeclaration:
    ConstantModifier* UnannType VariableDeclaratorList semicolon;

ConstantModifier:
    Annotation | "public" | "static" | "final";

InterfaceMethodDeclaration:
    InterfaceMethodModifier* MethodHeader MethodBody;

InterfaceMethodModifier:
    Annotation
    | "public" | "private"
    | "abstract" | "default" | "static" | "strictfp";

AnnotationInterfaceDeclaration:
    InterfaceModifier* "@" "interface" TypeIdentifier AnnotationInterfaceBody;

AnnotationInterfaceBody:
    "{" AnnotationInterfaceMemberDeclaration* "}";

AnnotationInterfaceMemberDeclaration:
      AnnotationInterfaceElementDeclaration
    | ConstantDeclaration
    | ClassDeclaration
    | InterfaceDeclaration
    | semicolon;

AnnotationInterfaceElementDeclaration:
    AnnotationInterfaceElementModifier* UnannType Identifier "(" ")"
                                        Dims? DefaultValue? semicolon;

AnnotationInterfaceElementModifier:
    Annotation | "public" | "abstract";

DefaultValue:
    "default" ElementValue;

Annotation:
      NormalAnnotation
    | MarkerAnnotation
    | SingleElementAnnotation;

NormalAnnotation:
    "@" TypeName "(" ElementValuePairList? ")";

ElementValuePairList:
    ElementValuePair+[comma];

ElementValuePair:
    Identifier "=" ElementValue;

ElementValue:
      ConditionalExpression
    | ElementValueArrayInitializer
    | Annotation;

ElementValueArrayInitializer:
    "{" ElementValueList? comma? "}";

ElementValueList:
    ElementValue+[comma];

MarkerAnnotation:
    "@" TypeName;

SingleElementAnnotation:
    "@" TypeName "(" ElementValue ")";

ArrayInitializer:
    "{" VariableInitializerList? comma? "}";

VariableInitializerList:
    VariableInitializer+[comma];

Block:
    "{" BlockStatements? "}";

BlockStatements:
    BlockStatement BlockStatement*;

BlockStatement:
      LocalClassOrInterfaceDeclaration
    | LocalVariableDeclarationStatement
    | Statement;

LocalClassOrInterfaceDeclaration:
      ClassDeclaration
    | NormalInterfaceDeclaration;

LocalVariableDeclarationStatement:
    LocalVariableDeclaration semicolon;

LocalVariableDeclaration:
    VariableModifier* LocalVariableType VariableDeclaratorList;

LocalVariableType:
      UnannType
    | "var";

Statement:
    StatementWithoutTrailingSubstatement
    | LabeledStatement
    | IfThenStatement
    | IfThenElseStatement
    | WhileStatement
    | ForStatement;

StatementNoShortIf:
      StatementWithoutTrailingSubstatement
    | LabeledStatementNoShortIf
    | IfThenElseStatementNoShortIf
    | WhileStatementNoShortIf
    | ForStatementNoShortIf;

StatementWithoutTrailingSubstatement:
      Block
    | EmptyStatement
    | ExpressionStatement
    | AssertStatement
    | SwitchStatement
    | DoStatement
    | BreakStatement
    | ContinueStatement
    | ReturnStatement
    | SynchronizedStatement
    | ThrowStatement
    | TryStatement
    | YieldStatement;

EmptyStatement:
    semicolon;

LabeledStatement:
    Identifier ":" Statement;

LabeledStatementNoShortIf:
    Identifier ":" StatementNoShortIf;

ExpressionStatement:
    StatementExpression semicolon;

StatementExpression:
      Assignment
    | PreIncrementExpression
    | PreDecrementExpression
    | PostIncrementExpression
    | PostDecrementExpression
    | MethodInvocation
    | ClassInstanceCreationExpression;

IfThenStatement:
    "if" "(" Expression ")" Statement;

IfThenElseStatement:
    "if" "(" Expression ")" StatementNoShortIf "else" Statement;

IfThenElseStatementNoShortIf:
    "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf;

AssertStatement:
    "assert" Expression (":" Expression)? semicolon;

SwitchStatement:
    "switch" "(" Expression ")" SwitchBlock;

SwitchBlock:
      "{" SwitchRule SwitchRule* "}"
    | "{" SwitchBlockStatementGroup* (SwitchLabel ":")* "}";

SwitchRule:
      SwitchLabel "->" Expression semicolon
    | SwitchLabel "->" Block
    | SwitchLabel "->" ThrowStatement;

SwitchBlockStatementGroup:
    SwitchLabel ":" (SwitchLabel ":")* BlockStatements;

SwitchLabel:
      "case" CaseConstant+[comma]
    | "default";

CaseConstant:
    ConditionalExpression;

WhileStatement:
    "while" "(" Expression ")" Statement;

WhileStatementNoShortIf:
    "while" "(" Expression ")" StatementNoShortIf;

DoStatement:
    "do" Statement "while" "(" Expression ")" semicolon;

ForStatement:
      BasicForStatement
    | EnhancedForStatement;

ForStatementNoShortIf:
      BasicForStatementNoShortIf
    | EnhancedForStatementNoShortIf;

BasicForStatement:
    "for" "(" ForInit? semicolon Expression? semicolon ForUpdate? ")" Statement;

BasicForStatementNoShortIf:
    "for" "(" ForInit? semicolon Expression? semicolon ForUpdate? ")" StatementNoShortIf;

ForInit:
      StatementExpressionList
    | LocalVariableDeclaration;

ForUpdate:
    StatementExpressionList;

StatementExpressionList:
    StatementExpression+[comma];

EnhancedForStatement:
    "for" "(" LocalVariableDeclaration ":" Expression ")" Statement;

EnhancedForStatementNoShortIf:
    "for" "(" LocalVariableDeclaration ":" Expression ")" StatementNoShortIf;

BreakStatement:
    "break" Identifier? semicolon;

YieldStatement:
    "yield" Expression semicolon;

ContinueStatement:
    "continue" Identifier? semicolon;

ReturnStatement:
    "return" Expression? semicolon;

ThrowStatement:
    "throw" Expression semicolon;

SynchronizedStatement:
    "synchronized" "(" Expression ")" Block;

TryStatement:
      "try" Block Catches
    | "try" Block Catches? Finally
    | TryWithResourcesStatement;

Catches:
    CatchClause CatchClause*;

CatchClause:
    "catch" "(" CatchFormalParameter ")" Block;

CatchFormalParameter:
    VariableModifier* CatchType VariableDeclaratorId;

CatchType:
    UnannClassType ("|" ClassType)*;

Finally:
    "finally" Block;

TryWithResourcesStatement:
    "try" ResourceSpecification Block Catches? Finally?;

ResourceSpecification:
    "(" ResourceList semicolon? ")";

ResourceList:
    Resource+[semicolon];

Resource:
      LocalVariableDeclaration;
    // | VariableAccess; // this is undefined in the original grammar

Pattern:
    TypePattern;

TypePattern:
    LocalVariableDeclaration;

Primary:
      PrimaryNoNewArray
    | ArrayCreationExpression;

PrimaryNoNewArray:
      Literal
    | ClassLiteral
    | "this"
    | TypeName dot "this"
    | "(" Expression ")"
    | ClassInstanceCreationExpression
    | FieldAccess
    | ArrayAccess
    | MethodInvocation
    | MethodReference;

ClassLiteral:
      (TypeName | NumericType | "boolean") ("[" "]")* dot class
    | "void" dot class;

ClassInstanceCreationExpression:
      UnqualifiedClassInstanceCreationExpression
    | ExpressionName dot UnqualifiedClassInstanceCreationExpression
    | Primary dot UnqualifiedClassInstanceCreationExpression;

UnqualifiedClassInstanceCreationExpression:
    "new" TypeArguments? ClassOrInterfaceTypeToInstantiate "(" ArgumentList? ")" ClassBody?;

ClassOrInterfaceTypeToInstantiate:
    Annotation* Identifier (dot Annotation* Identifier)* TypeArgumentsOrDiamond?;

TypeArgumentsOrDiamond:
      TypeArguments
      | "<>";

FieldAccess:
      Primary dot Identifier
    | (TypeName dot)? "super" dot Identifier;

ArrayAccess:
      ExpressionName "[" Expression "]"
    | PrimaryNoNewArray "[" Expression "]";

MethodInvocation:
      MethodName "(" ArgumentList? ")"
    | (TypeName | ExpressionName | Primary | (TypeName dot)? "super") dot
        TypeArguments? Identifier "(" ArgumentList? ")";

ArgumentList:
    Expression+[comma];

MethodReference:
      (ExpressionName | Primary | ReferenceType | (TypeName dot)? "super" )
                      "::" TypeArguments? Identifier
    | ClassType "::" TypeArguments? "new"
    | ArrayType "::" "new";

ArrayCreationExpression:
      "new" (PrimitiveType | ClassOrInterfaceType) DimExprs Dims?
    | "new" (PrimitiveType | ClassOrInterfaceType) Dims ArrayInitializer;

DimExprs:
    DimExpr DimExpr*;

DimExpr:
    Annotation* "[" Expression "]";

Expression:
      LambdaExpression
      | AssignmentExpression;

LambdaExpression:
    LambdaParameters "->" LambdaBody;

LambdaParameters:
      "(" LambdaParameterList? ")"
    | Identifier;

LambdaParameterList:
      LambdaParameter+[comma]
    | Identifier+[comma];

LambdaParameter:
      VariableModifier* LambdaParameterType VariableDeclaratorId
    | VariableArityParameter;

LambdaParameterType:
      UnannType
    | "var";

LambdaBody:
      Expression
    | Block;

AssignmentExpression:
      ConditionalExpression
    | Assignment;

Assignment:
    LeftHandSide AssignmentOperator Expression;

LeftHandSide:
      ExpressionName
    | FieldAccess
    | ArrayAccess;

AssignmentOperator:
      "="  | "*="  | "/="  | "%="  | "+="  | "-="
    | "<<="  | ">>="  | ">>>="  | "&="  | "^="  | "|=";

ConditionalExpression:
      ConditionalOrExpression
    | ConditionalOrExpression "?" Expression ":" (ConditionalExpression | LambdaExpression);

ConditionalOrExpression:
      ConditionalAndExpression
    | ConditionalOrExpression "||" ConditionalAndExpression;

ConditionalAndExpression:
      InclusiveOrExpression
    | ConditionalAndExpression "&&" InclusiveOrExpression;

InclusiveOrExpression:
      ExclusiveOrExpression
    | InclusiveOrExpression "|" ExclusiveOrExpression;

ExclusiveOrExpression:
      AndExpression
    | ExclusiveOrExpression "^" AndExpression;

AndExpression:
      EqualityExpression
    | AndExpression "&" EqualityExpression;

EqualityExpression:
      RelationalExpression
    | EqualityExpression "==" RelationalExpression
    | EqualityExpression "!=" RelationalExpression;

RelationalExpression:
      ShiftExpression
    | RelationalExpression "<" ShiftExpression
    | RelationalExpression ">" ShiftExpression
    | RelationalExpression "<=" ShiftExpression
    | RelationalExpression ">=" ShiftExpression
    | InstanceofExpression;

InstanceofExpression:
      RelationalExpression "instanceof" ReferenceType
    | RelationalExpression "instanceof" Pattern;

ShiftExpression:
      AdditiveExpression
    | ShiftExpression "<<" AdditiveExpression
    | ShiftExpression ">>" AdditiveExpression
    | ShiftExpression ">>>" AdditiveExpression;

AdditiveExpression:
      MultiplicativeExpression
    | AdditiveExpression "+" MultiplicativeExpression
    | AdditiveExpression "-" MultiplicativeExpression;

MultiplicativeExpression:
      UnaryExpression
    | MultiplicativeExpression "*" UnaryExpression
    | MultiplicativeExpression "/" UnaryExpression
    | MultiplicativeExpression "%" UnaryExpression;

UnaryExpression:
      PreIncrementExpression
    | PreDecrementExpression
    | "+" UnaryExpression
    | "-" UnaryExpression
    | UnaryExpressionNotPlusMinus;

PreIncrementExpression:
    "++" UnaryExpression;

PreDecrementExpression:
    "--" UnaryExpression;

UnaryExpressionNotPlusMinus:
      PostfixExpression
    | "~" UnaryExpression
    | "!" UnaryExpression
    | CastExpression
    | SwitchExpression;

PostfixExpression:
      Primary
    | ExpressionName
    | PostIncrementExpression
    | PostDecrementExpression;

PostIncrementExpression:
    PostfixExpression "++";

PostDecrementExpression:
    PostfixExpression "--";

CastExpression:
      "(" PrimitiveType ")" UnaryExpression
    | "(" ReferenceType AdditionalBound* ")" UnaryExpressionNotPlusMinus
    | "(" ReferenceType AdditionalBound* ")" LambdaExpression;

SwitchExpression:
    "switch" "(" Expression ")" SwitchBlock;

ConstantExpression:
    Expression;

Literal:
      IntegerLiteral
    | FloatingPointLiteral
    | BooleanLiteral
    | CharacterLiteral
    | StringLiteral
    | TextBlock
    | NullLiteral;

TypeIdentifier:
    Identifier; // but not var, yield, or record

UnqualifiedMethodIdentifier:
    Identifier; // but not yield

LAYOUT: LayoutItem | LAYOUT LayoutItem | EMPTY;
LayoutItem: WS | Comment;
Comment: '/*' CorNCs '*/' | LineComment;
CorNCs: CorNC | CorNCs CorNC | EMPTY;
CorNC: Comment | NotComment | WS;

terminals

Identifier: /[a-zA-Z_][a-zA-Z0-9_]*/;
comma: ",";
dot: ".";
semicolon: ";";
ellipsis: "...";
IntegerLiteral: /-?                             # optional negative
                ((0|[1-9][0-9_]*)               # decimal numeral
                |(0[xX]([0-9]|[a-f]|[A-F_])+)   # hex numeral
                |(0[0-7_]+)                     # octal numeral
                |(0[bB][01_]+))                 # binary numeral
                (l|L)?                          # optional int type suffix
                /;
FloatingPointLiteral: /-?
                      (((\d+\.|\d+?\.\d+)
                       ([eE][+\-]?\d+)?
                       [fFdD]?)
                      |\d+[eE][+\-]?\d+
                      |\d+[eE][+\-]?\d+[fFdD]
                      |\d+[fFdD]
                      |((0[xX]([0-9]|[a-f]|[A-F_])+)\.?                 # hex
                        |(0[xX]([0-9]|[a-f]|[A-F_])*\.
                         ([0-9]|[a-f]|[A-F_]))([pP][+-]\d+)))
                      /;
BooleanLiteral: /true|false/;
CharacterLiteral: /'(\\'|\\\\|[^'])*'/;
StringLiteral: /"(\\"|[^"])*"/;
TextBlock: /"""(\\"""|(?!""").)*"""/;
NullLiteral: "null";


WS: /\s+/;
LineComment: /\/\/.*/;
NotComment: /((\*[^\/])|[^\s*\/]|\/[^\*])+/;
//IdentifierChars but not a Keyword or BooleanLiteral or NullLiteral

// IdentifierChars:
// JavaLetter {JavaLetterOrDigit}

// JavaLetter:
// any Unicode character that is a "Java letter"

// JavaLetterOrDigit:
// any Unicode character that is a "Java letter-or-digit"

