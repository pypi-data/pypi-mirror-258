{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Nautobot Lunch","text":"<p>    An App for Nautobot. </p>"},{"location":"index.html#overview","title":"Overview","text":"<p>This app queries Yelp to find lunch (or breakfast or dinner, we don't discriminate) near a location. The goal of this is to make it easier for field personel to find food near the site they are at. Or to re-arrange the order you want to visit sites so that you actually end up eating a good lunch.</p>"},{"location":"index.html#screenshots","title":"Screenshots","text":"<p>More screenshots can be found in the Using the App page in the documentation. Here's a quick overview of some of the app's added functionality:</p> <p></p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>Full documentation for this App can be found over on the Nautobot Docs website:</p> <ul> <li>User Guide - Overview, Using the App, Getting Started.</li> <li>Administrator Guide - How to Install, Configure, Upgrade, or Uninstall the App.</li> <li>Developer Guide - Extending the App, Code Reference, Contribution Guide.</li> <li>Release Notes / Changelog.</li> <li>Frequently Asked Questions.</li> </ul>"},{"location":"index.html#contributing-to-the-documentation","title":"Contributing to the Documentation","text":"<p>You can find all the Markdown source for the App documentation under the <code>docs</code> folder in this repository. For simple edits, a Markdown capable editor is sufficient: clone the repository and edit away.</p> <p>If you need to view the fully-generated documentation site, you can build it with MkDocs. A container hosting the documentation can be started using the <code>invoke</code> commands (details in the Development Environment Guide) on http://localhost:8001. Using this container, as your changes to the documentation are saved, they will be automatically rebuilt and any pages currently being viewed will be reloaded in your browser.</p> <p>Any PRs with fixes or improvements are very welcome!</p>"},{"location":"index.html#questions","title":"Questions","text":"<p>For any questions or comments, please check the FAQ first. Feel free to also swing by the Network to Code Slack (channel <code>#nautobot</code>), sign up here if you don't have an account.</p>"},{"location":"admin/compatibility_matrix.html","title":"Compatibility Matrix","text":"<p>Developer Note - Remove Me!</p> <p>Explain how the release models of the app and of Nautobot work together, how releases are supported, how features and older releases are deprecated etc.</p> Nautobot Lunch Version Nautobot First Support Version Nautobot Last Support Version 1.0.0 2.0.0 2.99.99"},{"location":"admin/install.html","title":"Installing the App in Nautobot","text":"<p>Here you will find detailed instructions on how to install and configure the App within your Nautobot environment.</p>"},{"location":"admin/install.html#prerequisites","title":"Prerequisites","text":"<ul> <li>The app is compatible with Nautobot 2.0.0 and higher.</li> <li>Databases supported: PostgreSQL, MySQL</li> <li>Yelp API Key</li> </ul> <p>Note</p> <p>Please check the dedicated page for a full compatibility matrix and the deprecation policy.</p>"},{"location":"admin/install.html#install-guide","title":"Install Guide","text":"<p>Note</p> <p>Apps can be installed from the Python Package Index or locally. See the Nautobot documentation for more details. The pip package name for this app is <code>nautobot_lunch</code>.</p> <p>The app is available as a Python package via PyPI and can be installed with <code>pip</code>:</p> <pre><code>pip install nautobot_lunch\n</code></pre> <p>To ensure Nautobot nautobot_lunch is automatically re-installed during future upgrades, create a file named <code>local_requirements.txt</code> (if not already existing) in the Nautobot root directory (alongside <code>requirements.txt</code>) and list the <code>nautobot_lunch</code> package:</p> <pre><code>echo nautobot_lunch &gt;&gt; local_requirements.txt\n</code></pre> <p>Once installed, the app needs to be enabled in your Nautobot configuration. The following block of code below shows the additional configuration required to be added to your <code>nautobot_config.py</code> file:</p> <ul> <li>Append <code>\"nautobot_nautobot_lunch\"</code> to the <code>PLUGINS</code> list.</li> <li>Append the <code>\"nautobot_nautobot_lunch\"</code> dictionary to the <code>PLUGINS_CONFIG</code> dictionary and override any defaults.</li> </ul> <pre><code># In your nautobot_config.py\nPLUGINS = [\"nautobot_nautobot_lunch\"]\n# PLUGINS_CONFIG = {\n#   \"nautobot_nautobot_lunch\": {\n#     ADD YOUR SETTINGS HERE\n#   }\n# }\n</code></pre> <p>Once the Nautobot configuration is updated, run the Post Upgrade command (<code>nautobot-server post_upgrade</code>) to run migrations and clear any cache:</p> <pre><code>nautobot-server post_upgrade\n</code></pre> <p>Then restart (if necessary) the Nautobot services which may include:</p> <ul> <li>Nautobot</li> <li>Nautobot Workers</li> <li>Nautobot Scheduler</li> </ul> <pre><code>sudo systemctl restart nautobot nautobot-worker nautobot-scheduler\n</code></pre>"},{"location":"admin/install.html#app-configuration","title":"App Configuration","text":"<p>The app behavior can be controlled with the following list of settings:</p> Key Environment Variable Example Default Description <code>yelp_api_key</code> YELP_API_KEY <code>Qq----</code> `` Set the Yelp API Key <code>platform_slug_map</code> NAUTOBOT_LUNCH_CACHE_TIME <code>3600</code> <code>3600</code> How long to cache the queries in seconds"},{"location":"admin/uninstall.html","title":"Uninstall the App from Nautobot","text":"<p>Here you will find any steps necessary to cleanly remove the App from your Nautobot environment.</p>"},{"location":"admin/uninstall.html#database-cleanup","title":"Database Cleanup","text":"<p>Prior to removing the app from the <code>nautobot_config.py</code>, run the following command to roll back any migration specific to this app.</p> <pre><code>nautobot-server migrate nautobot_lunch zero\n</code></pre> <p>Developer Note - Remove Me!</p> <p>Any other cleanup operations to ensure the database is clean after the app is removed. Is there anything else that needs cleaning up, such as CFs, relationships, etc. if they're no longer desired?</p>"},{"location":"admin/uninstall.html#remove-app-configuration","title":"Remove App configuration","text":"<p>Remove the configuration you added in <code>nautobot_config.py</code> from <code>PLUGINS</code> &amp; <code>PLUGINS_CONFIG</code>.</p>"},{"location":"admin/uninstall.html#uninstall-the-package","title":"Uninstall the package","text":"<pre><code>pip3 uninstall lunch\n</code></pre>"},{"location":"admin/upgrade.html","title":"Upgrading the App","text":"<p>Here you will find any steps necessary to upgrade the App in your Nautobot environment.</p>"},{"location":"admin/upgrade.html#upgrade-guide","title":"Upgrade Guide","text":"<p>When a new release comes out it may be necessary to run a migration of the database to account for any changes in the data models used by this app. Execute the command <code>nautobot-server post-upgrade</code> within the runtime environment of your Nautobot installation after updating the <code>lunch</code> package via <code>pip</code>.</p>"},{"location":"admin/release_notes/index.html","title":"Release Notes","text":"<p>All the published release notes can be found via the navigation menu. All patch releases are included in the same minor release (e.g. <code>v1.2</code>) document.</p>"},{"location":"admin/release_notes/version_1.0.html","title":"v1.0 Release Notes","text":"<p>This document describes all new features and changes in the release <code>1.0</code>. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"admin/release_notes/version_1.0.html#release-overview","title":"Release Overview","text":""},{"location":"admin/release_notes/version_1.0.html#v100-2023-02-24","title":"[v1.0.0] - 2023-02-24","text":""},{"location":"admin/release_notes/version_1.0.html#added","title":"Added","text":"<p>Initial release</p>"},{"location":"admin/release_notes/version_1.0.html#changed","title":"Changed","text":""},{"location":"admin/release_notes/version_1.0.html#fixed","title":"Fixed","text":""},{"location":"dev/arch_decision.html","title":"Architecture Decision Records","text":"<p>The intention is to document deviations from a standard Model View Controller (MVC) design.</p> <p>Developer Note - Remove Me!</p> <p>Optional page, remove if not applicable. For examples see Golden Config.</p>"},{"location":"dev/contributing.html","title":"Contributing to the App","text":"<p>The project is packaged with a light development environment based on <code>docker-compose</code> to help with the local development of the project and to run tests.</p> <p>The project is following Network to Code software development guidelines and is leveraging the following:</p> <ul> <li>Python linting and formatting: <code>black</code>, <code>pylint</code>, <code>bandit</code>, <code>flake8</code>, and <code>ruff</code>.</li> <li>YAML linting is done with <code>yamllint</code>.</li> <li>Django unit test to ensure the app is working properly.</li> </ul> <p>Documentation is built using mkdocs. The Docker based development environment automatically starts a container hosting a live version of the documentation website on http://localhost:8001 that auto-refreshes when you make any changes to your local files.</p>"},{"location":"dev/contributing.html#creating-changelog-fragments","title":"Creating Changelog Fragments","text":"<p>All pull requests to <code>next</code> or <code>develop</code> must include a changelog fragment file in the <code>./changes</code> directory. To create a fragment, use your GitHub issue number and fragment type as the filename. For example, <code>2362.added</code>. Valid fragment types are <code>added</code>, <code>changed</code>, <code>deprecated</code>, <code>fixed</code>, <code>removed</code>, and <code>security</code>. The change summary is added to the file in plain text. Change summaries should be complete sentences, starting with a capital letter and ending with a period, and be in past tense. Each line of the change fragment will generate a single change entry in the release notes. Use multiple lines in the same file if your change needs to generate multiple release notes in the same category. If the change needs to create multiple entries in separate categories, create multiple files.</p> <p>Example</p> <p>Wrong changes/1234.fixed<pre><code>fix critical bug in documentation\n</code></pre></p> <p>Right changes/1234.fixed<pre><code>Fixed critical bug in documentation.\n</code></pre></p> <p>Multiple Entry Example</p> <p>This will generate 2 entries in the <code>fixed</code> category and one entry in the <code>changed</code> category.</p> changes/1234.fixed<pre><code>Fixed critical bug in documentation.\nFixed release notes generation.\n</code></pre> changes/1234.changed<pre><code>Changed release notes generation.\n</code></pre>"},{"location":"dev/contributing.html#branching-policy","title":"Branching Policy","text":"<p>The branching policy includes the following tenets:</p> <ul> <li>The <code>develop</code> branch is the branch of the next major and minor paired version planned.</li> <li>PRs intended to add new features should be sourced from the <code>develop</code> branch.</li> <li>PRs intended to fix issues in the Nautobot LTM compatible release should be sourced from the latest <code>ltm-&lt;major.minor&gt;</code> branch instead of <code>develop</code>.</li> </ul> <p>Nautobot Lunch will observe semantic versioning, as of 1.0. This may result in a quick turnaround in minor versions to keep pace with an ever growing feature set.</p>"},{"location":"dev/contributing.html#release-policy","title":"Release Policy","text":"<p>Nautobot Lunch has currently no intended scheduled release schedule, and will release new features in minor versions.</p> <p>When a new release, from <code>develop</code> to <code>main</code>, is created the following should happen.</p> <ul> <li>A release PR is created from <code>develop</code> with:</li> <li>Update the release notes in <code>docs/admin/release_notes/version_&lt;major&gt;.&lt;minor&gt;.md</code> file to reflect the changes.</li> <li>Change the version from <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-beta</code> to <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> in <code>pyproject.toml</code>.</li> <li>Set the PR to the <code>main</code> branch.</li> <li>Ensure the tests for the PR pass.</li> <li>Merge the PR.</li> <li>Create a new tag:</li> <li>The tag should be in the form of <code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>.</li> <li>The title should be in the form of <code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>.</li> <li>The description should be the changes that were added to the <code>version_&lt;major&gt;.&lt;minor&gt;.md</code> document.</li> <li>If merged into <code>main</code>, then push from <code>main</code> to <code>develop</code>, in order to retain the merge commit created when the PR was merged</li> <li>A post release PR is created with:</li> <li>Change the version from <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> to <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch + 1&gt;-beta</code> in both <code>pyproject.toml</code> and <code>nautobot.__init__.__version__</code>.</li> <li>Set the PR to the proper branch, <code>develop</code>.</li> <li>Once tests pass, merge.</li> </ul>"},{"location":"dev/dev_environment.html","title":"Building Your Development Environment","text":""},{"location":"dev/dev_environment.html#quickstart-guide","title":"Quickstart Guide","text":"<p>The development environment can be used in two ways:</p> <ol> <li>(Recommended) All services, including Nautobot, are spun up using Docker containers and a volume mount so you can develop locally.</li> <li>With a local Poetry environment if you wish to develop outside of Docker, with the caveat of using external services provided by Docker for the database (PostgreSQL by default, MySQL optionally) and Redis services.</li> </ol> <p>This is a quick reference guide if you're already familiar with the development environment provided, which you can read more about later in this document.</p>"},{"location":"dev/dev_environment.html#invoke","title":"Invoke","text":"<p>The Invoke library is used to provide some helper commands based on the environment. There are a few configuration parameters which can be passed to Invoke to override the default configuration:</p> <ul> <li><code>nautobot_ver</code>: the version of Nautobot to use as a base for any built docker containers (default: 2.0.0)</li> <li><code>project_name</code>: the default docker compose project name (default: <code>lunch</code>)</li> <li><code>python_ver</code>: the version of Python to use as a base for any built docker containers (default: 3.11)</li> <li><code>local</code>: a boolean flag indicating if invoke tasks should be run on the host or inside the docker containers (default: False, commands will be run in docker containers)</li> <li><code>compose_dir</code>: the full path to a directory containing the project compose files</li> <li><code>compose_files</code>: a list of compose files applied in order (see Multiple Compose files for more information)</li> </ul> <p>Using Invoke these configuration options can be overridden using several methods. Perhaps the simplest is setting an environment variable <code>INVOKE_NAUTOBOT_LUNCH_VARIABLE_NAME</code> where <code>VARIABLE_NAME</code> is the variable you are trying to override. The only exception is <code>compose_files</code>, because it is a list it must be overridden in a YAML file. There is an example <code>invoke.yml</code> (<code>invoke.example.yml</code>) in this directory which can be used as a starting point.</p>"},{"location":"dev/dev_environment.html#docker-development-environment","title":"Docker Development Environment","text":"<p>Tip</p> <p>This is the recommended option for development.</p> <p>This project is managed by Python Poetry and has a few requirements to setup your development environment:</p> <ol> <li>Install Poetry, see the Poetry documentation for your operating system.</li> <li>Install Docker, see the Docker documentation for your operating system.</li> <li>Install Docker-compose, see the Docker-compose documentation for your operation system.</li> </ol> <p>Once you have Poetry and Docker installed you can run the following commands (in the root of the repository) to install all other development dependencies in an isolated Python virtual environment:</p> <pre><code>poetry shell\npoetry install\ncp development/creds.example.env development/creds.env\ninvoke build\ninvoke start\n</code></pre> <p>The Nautobot server can now be accessed at http://localhost:8080 and the live documentation at http://localhost:8001.</p> <p>To either stop or destroy the development environment use the following options.</p> <ul> <li>invoke stop - Stop the containers, but keep all underlying systems intact</li> <li>invoke destroy - Stop and remove all containers, volumes, etc. (This results in data loss due to the volume being deleted)</li> </ul>"},{"location":"dev/dev_environment.html#local-poetry-development-environment","title":"Local Poetry Development Environment","text":"<ul> <li>Create an <code>invoke.yml</code> file with the following contents at the root of the repo and edit as necessary</li> </ul> <pre><code>---\nnautobot_lunch:\nlocal: true\n</code></pre> <p>Run the following commands:</p> <pre><code>poetry shell\npoetry install --extras nautobot\nexport $(cat development/development.env | xargs)\nexport $(cat development/creds.env | xargs)\ninvoke start &amp;&amp; sleep 5\nnautobot-server migrate\n</code></pre> <p>Note</p> <p>If you want to develop on the latest develop branch of Nautobot, run the following command: <code>poetry add --optional git+https://github.com/nautobot/nautobot@develop</code>. After the <code>@</code> symbol must match either a branch or a tag.</p> <p>You can now run <code>nautobot-server</code> commands as you would from the Nautobot documentation for example to start the development server:</p> <pre><code>nautobot-server runserver 0.0.0.0:8080 --insecure\n</code></pre> <p>Nautobot server can now be accessed at http://localhost:8080.</p> <p>It is typically recommended to launch the Nautobot runserver command in a separate shell so you can keep developing and manage the webserver separately.</p>"},{"location":"dev/dev_environment.html#updating-the-documentation","title":"Updating the Documentation","text":"<p>Documentation dependencies are pinned to exact versions to ensure consistent results. For the development environment, they are defined in the <code>pyproject.toml</code> file.</p> <p>If you need to update any of the documentation dependencies to a newer version, make sure you copy the exact same versions pinned in <code>pyproject.toml</code> to the <code>docs/requirements.txt</code> file as well. The latter is used in the automated build pipeline on ReadTheDocs to build the live version of the documentation.</p>"},{"location":"dev/dev_environment.html#cli-helper-commands","title":"CLI Helper Commands","text":"<p>The project features a CLI helper based on Invoke to help setup the development environment. The commands are listed below in 3 categories:</p> <ul> <li><code>dev environment</code></li> <li><code>utility</code></li> <li><code>testing</code></li> </ul> <p>Each command can be executed with <code>invoke &lt;command&gt;</code>. All commands support the arguments <code>--nautobot-ver</code> and <code>--python-ver</code> if you want to manually define the version of Python and Nautobot to use. Each command also has its own help <code>invoke &lt;command&gt; --help</code></p>"},{"location":"dev/dev_environment.html#local-development-environment","title":"Local Development Environment","text":"<pre><code>  build            Build all docker images.\n  debug            Start Nautobot and its dependencies in debug mode.\n  destroy          Destroy all containers and volumes.\n  restart          Restart Nautobot and its dependencies in detached mode.\n  start            Start Nautobot and its dependencies in detached mode.\n  stop             Stop Nautobot and its dependencies.\n</code></pre>"},{"location":"dev/dev_environment.html#utility","title":"Utility","text":"<pre><code>  cli              Launch a bash shell inside the running Nautobot container.\n  create-user      Create a new user in django (default: admin), will prompt for password.\n  makemigrations   Run Make Migration in Django.\n  nbshell          Launch a nbshell session.\n</code></pre>"},{"location":"dev/dev_environment.html#testing","title":"Testing","text":"<pre><code>  bandit           Run bandit to validate basic static code security analysis.\n  black            Run black to check that Python files adhere to its style standards.\n  flake8           Run flake8 to check that Python files adhere to its style standards.\n  ruff             Run ruff to validate docstring formatting adheres to NTC defined standards.\n  pylint           Run pylint code analysis.\n  tests            Run all tests for this app.\n  unittest         Run Django unit tests for the app.\n</code></pre>"},{"location":"dev/dev_environment.html#project-overview","title":"Project Overview","text":"<p>This project provides the ability to develop and manage the Nautobot server locally (with supporting services being Dockerized) or by using only Docker containers to manage Nautobot. The main difference between the two environments is the ability to debug and use pdb when developing locally. Debugging with pdb within the Docker container is more complicated, but can still be accomplished by either entering into the container (via <code>docker exec</code>) or attaching your IDE to the container and running the Nautobot service manually within the container.</p> <p>The upside to having the Nautobot service handled by Docker rather than locally is that you do not have to manage the Nautobot server. The Docker logs provide the majority of the information you will need to help troubleshoot, while getting started quickly and not requiring you to perform several manual steps and remembering to have the Nautobot server running in a separate terminal while you develop.</p> <p>Note</p> <p>The local environment still uses Docker containers for the supporting services (Postgres, Redis, and RQ Worker), but the Nautobot server is handled locally by you, the developer.</p> <p>Follow the directions below for the specific development environment that you choose.</p>"},{"location":"dev/dev_environment.html#poetry","title":"Poetry","text":"<p>Poetry is used in lieu of the \"virtualenv\" commands and is leveraged in both environments. The virtual environment will provide all of the Python packages required to manage the development environment such as Invoke. See the Local Development Environment section to see how to install Nautobot if you're going to be developing locally (i.e. not using the Docker container).</p> <p>The <code>pyproject.toml</code> file outlines all of the relevant dependencies for the project:</p> <ul> <li><code>tool.poetry.dependencies</code> - the main list of dependencies.</li> <li><code>tool.poetry.group.dev.dependencies</code> - development dependencies, to facilitate linting, testing, and documentation building.</li> </ul> <p>The <code>poetry shell</code> command is used to create and enable a virtual environment managed by Poetry, so all commands ran going forward are executed within the virtual environment. This is similar to running the <code>source venv/bin/activate</code> command with virtualenvs. To install project dependencies in the virtual environment, you should run <code>poetry install</code> - this will install both project and development dependencies.</p> <p>For more details about Poetry and its commands please check out its online documentation.</p>"},{"location":"dev/dev_environment.html#full-docker-development-environment","title":"Full Docker Development Environment","text":"<p>This project is set up with a number of Invoke tasks consumed as simple CLI commands to get developing fast. You'll use a few <code>invoke</code> commands to get your environment up and running.</p>"},{"location":"dev/dev_environment.html#copy-the-credentials-file-for-nautobot","title":"Copy the credentials file for Nautobot","text":"<p>First, you need to create the <code>development/creds.env</code> file - it stores a bunch of private information such as passwords and tokens for your local Nautobot install. You can make a copy of the <code>development/creds.example.env</code> and modify it to suit you.</p> <pre><code>cp development/creds.example.env development/creds.env\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-building-the-docker-image","title":"Invoke - Building the Docker Image","text":"<p>The first thing you need to do is build the necessary Docker image for Nautobot that installs the specific <code>nautobot_ver</code>. The image is used for Nautobot and the Celery worker service used by Docker Compose.</p> <pre><code>\u279c invoke build\n... &lt;omitted for brevity&gt;\n#14 exporting to image\n#14 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00\n#14 exporting layers\n#14 exporting layers 1.2s done\n#14 writing image sha256:2d524bc1665327faa0d34001b0a9d2ccf450612bf8feeb969312e96a2d3e3503 done\n#14 naming to docker.io/lunch/nautobot:2.0.0-py3.11 done\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-starting-the-development-environment","title":"Invoke - Starting the Development Environment","text":"<p>Next, you need to start up your Docker containers.</p> <pre><code>\u279c invoke start\nStarting Nautobot in detached mode...\nRunning docker-compose command \"up --detach\"\nCreating network \"nautobot_lunch_default\" with the default driver\nCreating volume \"nautobot_lunch_postgres_data\" with default driver\nCreating nautobot_lunch_redis_1 ...\nCreating nautobot_lunch_docs_1  ...\nCreating nautobot_lunch_postgres_1 ...\nCreating nautobot_lunch_postgres_1 ... done\nCreating nautobot_lunch_redis_1    ... done\nCreating nautobot_lunch_nautobot_1 ...\nCreating nautobot_lunch_docs_1     ... done\nCreating nautobot_lunch_nautobot_1 ... done\nCreating nautobot_lunch_worker_1   ...\nCreating nautobot_lunch_worker_1   ... done\nDocker Compose is now in the Docker CLI, try `docker compose up`\n</code></pre> <p>This will start all of the Docker containers used for hosting Nautobot. You should see the following containers running after <code>invoke start</code> is finished.</p> <pre><code>\u279c docker ps\n****CONTAINER ID   IMAGE                            COMMAND                  CREATED          STATUS          PORTS                                       NAMES\nee90fbfabd77   lunch/nautobot:2.0.0-py3.11  \"nautobot-server rqw\u2026\"   16 seconds ago   Up 13 seconds                                               nautobot_lunch_worker_1\nb8adb781d013   lunch/nautobot:2.0.0-py3.11  \"/docker-entrypoint.\u2026\"   20 seconds ago   Up 15 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   nautobot_lunch_nautobot_1\nd64ebd60675d   lunch/nautobot:2.0.0-py3.11  \"mkdocs serve -v -a \u2026\"   25 seconds ago   Up 18 seconds   0.0.0.0:8001-&gt;8080/tcp, :::8001-&gt;8080/tcp   nautobot_lunch_docs_1\ne72d63129b36   postgres:13-alpine               \"docker-entrypoint.s\u2026\"   25 seconds ago   Up 19 seconds   0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp   nautobot_lunch_postgres_1\n96c6ff66997c   redis:6-alpine                   \"docker-entrypoint.s\u2026\"   25 seconds ago   Up 21 seconds   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   nautobot_lunch_redis_1\n</code></pre> <p>Once the containers are fully up, you should be able to open up a web browser, and view:</p> <ul> <li>The Nautobot homepage at http://localhost:8080</li> <li>A live version of the documentation at http://localhost:8001</li> </ul> <p>Note</p> <p>Sometimes the containers take a minute to fully spin up. If the page doesn't load right away, wait a minute and try again.</p>"},{"location":"dev/dev_environment.html#invoke-creating-a-superuser","title":"Invoke - Creating a Superuser","text":"<p>The Nautobot development image will automatically provision a super user when specifying the following variables within <code>creds.env</code> which is the default when copying <code>creds.example.env</code> to <code>creds.env</code>.</p> <ul> <li><code>NAUTOBOT_CREATE_SUPERUSER=true</code></li> <li><code>NAUTOBOT_SUPERUSER_API_TOKEN=0123456789abcdef0123456789abcdef01234567</code></li> <li><code>NAUTOBOT_SUPERUSER_PASSWORD=admin</code></li> </ul> <p>Note</p> <p>The default username is admin, but can be overridden by specifying NAUTOBOT_SUPERUSER_USERNAME.</p> <p>If you need to create additional superusers, run the follow commands.</p> <pre><code>\u279c invoke createsuperuser\nRunning docker-compose command \"ps --services --filter status=running\"\nRunning docker-compose command \"exec nautobot nautobot-server createsuperuser --username admin\"\nError: That username is already taken.\nUsername: ntc\nEmail address: ntc@networktocode.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-stopping-the-development-environment","title":"Invoke - Stopping the Development Environment","text":"<p>The last command to know for now is <code>invoke stop</code>.</p> <pre><code>\u279c invoke stop\nStopping Nautobot...\nRunning docker-compose command \"down\"\nStopping nautobot_lunch_worker_1   ...\nStopping nautobot_lunch_nautobot_1 ...\nStopping nautobot_lunch_docs_1     ...\nStopping nautobot_lunch_redis_1    ...\nStopping nautobot_lunch_postgres_1 ...\nStopping nautobot_lunch_worker_1   ... done\nStopping nautobot_lunch_nautobot_1 ... done\nStopping nautobot_lunch_postgres_1 ... done\nStopping nautobot_lunch_redis_1    ... done\nStopping nautobot_lunch_docs_1     ... done\nRemoving nautobot_lunch_worker_1   ...\nRemoving nautobot_lunch_nautobot_1 ...\nRemoving nautobot_lunch_docs_1     ...\nRemoving nautobot_lunch_redis_1    ...\nRemoving nautobot_lunch_postgres_1 ...\nRemoving nautobot_lunch_postgres_1 ... done\nRemoving nautobot_lunch_docs_1     ... done\nRemoving nautobot_lunch_worker_1   ... done\nRemoving nautobot_lunch_redis_1    ... done\nRemoving nautobot_lunch_nautobot_1 ... done\nRemoving network nautobot_lunch_default\n</code></pre> <p>This will safely shut down all of your running Docker containers for this project. When you are ready to spin containers back up, it is as simple as running <code>invoke start</code> again as seen previously.</p> <p>Warning</p> <p>If you're wanting to reset the database and configuration settings, you can use the <code>invoke destroy</code> command, but you will lose any data stored in those containers, so make sure that is what you want to do.</p>"},{"location":"dev/dev_environment.html#real-time-updates-how-cool","title":"Real-Time Updates? How Cool!","text":"<p>Your environment should now be fully setup, all necessary Docker containers are created and running, and you're logged into Nautobot in your web browser. Now what?</p> <p>Now you can start developing your app in the project folder!</p> <p>The magic here is the root directory is mounted inside your Docker containers when built and ran, so any changes made to the files in here are directly updated to the Nautobot app code running in Docker. This means that as you modify the code in your app folder, the changes will be instantly updated in Nautobot.</p> <p>Warning</p> <p>There are a few exceptions to this, as outlined in the section To Rebuild or Not To Rebuild.</p> <p>The back-end Django process is setup to automatically reload itself (it only takes a couple of seconds) every time a file is updated (saved). So for example, if you were to update one of the files like <code>tables.py</code>, then save it, the changes will be visible right away in the web browser!</p> <p>Note</p> <p>You may get connection refused while Django reloads, but it should be refreshed fairly quickly.</p>"},{"location":"dev/dev_environment.html#docker-logs","title":"Docker Logs","text":"<p>When trying to debug an issue, one helpful thing you can look at are the logs within the Docker containers.</p> <pre><code>\u279c docker logs &lt;name of container&gt; -f\n</code></pre> <p>Note</p> <p>The <code>-f</code> tag will keep the logs open, and output them in realtime as they are generated.</p> <p>Info</p> <p>Want to limit the log output even further? Use the <code>--tail &lt;#&gt;</code> command line argument in conjunction with <code>-f</code>.</p> <p>So for example, our app is named <code>lunch</code>, the command would most likely be <code>docker logs nautobot_lunch_nautobot_1 -f</code>. You can find the name of all running containers via <code>docker ps</code>.</p> <p>If you want to view the logs specific to the worker container, simply use the name of that container instead.</p>"},{"location":"dev/dev_environment.html#to-rebuild-or-not-to-rebuild","title":"To Rebuild or Not to Rebuild","text":"<p>Most of the time, you will not need to rebuild your images. Simply running <code>invoke start</code> and <code>invoke stop</code> is enough to keep your environment going.</p> <p>However there are a couple of instances when you will want to.</p>"},{"location":"dev/dev_environment.html#updating-environment-variables","title":"Updating Environment Variables","text":"<p>To add environment variables to your containers, thus allowing Nautobot to use them, you will update/add them in the <code>development/development.env</code> file. However, doing so is considered updating the underlying container shell, instead of Django (which auto restarts itself on changes).</p> <p>To get new environment variables to take effect, you will need stop any running images, rebuild the images, then restart them. This can easily be done with 3 commands:</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre> <p>Once completed, the new/updated environment variables should now be live.</p>"},{"location":"dev/dev_environment.html#installing-additional-python-packages","title":"Installing Additional Python Packages","text":"<p>If you want your app to leverage another available Nautobot app or another Python package, you can easily add them into your Docker environment.</p> <pre><code>\u279c poetry shell\n\u279c poetry add &lt;package_name&gt;\n</code></pre> <p>Once the dependencies are resolved, stop the existing containers, rebuild the Docker image, and then start all containers again.</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre>"},{"location":"dev/dev_environment.html#installing-additional-nautobot-apps","title":"Installing Additional Nautobot Apps","text":"<p>Let's say for example you want the new app you're creating to integrate into Slack. To do this, you will want to integrate into the existing Nautobot ChatOps App.</p> <pre><code>\u279c poetry shell\n\u279c poetry add nautobot-chatops\n</code></pre> <p>Once you activate the virtual environment via Poetry, you then tell Poetry to install the new app.</p> <p>Before you continue, you'll need to update the file <code>development/nautobot_config.py</code> accordingly with the name of the new app under <code>PLUGINS</code> and any relevant settings as necessary for the app under <code>PLUGINS_CONFIG</code>. Since you're modifying the underlying OS (not just Django files), you need to rebuild the image. This is a similar process to updating environment variables, which was explained earlier.</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre> <p>Once the containers are up and running, you should now see the new app installed in your Nautobot instance.</p> <p>Note</p> <p>You can even launch an <code>ngrok</code> service locally on your laptop, pointing to port 8080 (such as for chatops development), and it will point traffic directly to your Docker images.</p>"},{"location":"dev/dev_environment.html#updating-python-version","title":"Updating Python Version","text":"<p>To update the Python version, you can update it within <code>tasks.py</code>.</p> <pre><code>namespace = Collection(\"nautobot_lunch\")\nnamespace.configure(\n{\n\"nautobot_lunch\": {\n...\n\"python_ver\": \"3.11\",\n...\n}\n}\n)\n</code></pre> <p>Or set the <code>INVOKE_NAUTOBOT_LUNCH_PYTHON_VER</code> variable.</p>"},{"location":"dev/dev_environment.html#updating-nautobot-version","title":"Updating Nautobot Version","text":"<p>To update the Nautobot version, you can update it within <code>tasks.py</code>.</p> <pre><code>namespace = Collection(\"nautobot_lunch\")\nnamespace.configure(\n{\n\"nautobot_lunch\": {\n...\n\"nautobot_ver\": \"2.0.0\",\n...\n}\n}\n)\n</code></pre> <p>Or set the <code>INVOKE_NAUTOBOT_LUNCH_NAUTOBOT_VER</code> variable.</p>"},{"location":"dev/dev_environment.html#other-miscellaneous-commands-to-know","title":"Other Miscellaneous Commands To Know","text":""},{"location":"dev/dev_environment.html#python-shell","title":"Python Shell","text":"<p>To drop into a Django shell for Nautobot (in the Docker container) run:</p> <pre><code>\u279c invoke nbshell\n</code></pre> <p>This is the same as running:</p> <pre><code>\u279c invoke cli\n\u279c nautobot-server nbshell\n</code></pre>"},{"location":"dev/dev_environment.html#ipython-shell-plus","title":"iPython Shell Plus","text":"<p>Django also has a more advanced shell that uses iPython and that will automatically import all the models:</p> <pre><code>\u279c invoke shell-plus\n</code></pre> <p>This is the same as running:</p> <pre><code>\u279c invoke cli\n\u279c nautobot-server shell_plus\n</code></pre>"},{"location":"dev/dev_environment.html#tests","title":"Tests","text":"<p>To run tests against your code, you can run all of the tests that TravisCI runs against any new PR with:</p> <pre><code>\u279c invoke tests\n</code></pre> <p>To run an individual test, you can run any or all of the following:</p> <pre><code>\u279c invoke unittest\n\u279c invoke bandit\n\u279c invoke black\n\u279c invoke flake8\n\u279c invoke ruff\n\u279c invoke pylint\n</code></pre>"},{"location":"dev/dev_environment.html#app-configuration-schema","title":"App Configuration Schema","text":"<p>In the package source, there is the <code>nautobot_lunch/app-config-schema.json</code> file, conforming to the JSON Schema format. This file is used to validate the configuration of the app in CI pipelines.</p> <p>If you make changes to <code>PLUGINS_CONFIG</code> or the configuration schema, you can run the following command to validate the schema:</p> <pre><code>invoke validate-app-config\n</code></pre> <p>To generate the <code>app-config-schema.json</code> file based on the current <code>PLUGINS_CONFIG</code> configuration, run the following command:</p> <pre><code>invoke generate-app-config-schema\n</code></pre> <p>This command can only guess the schema, so it's up to the developer to manually update the schema as needed.</p>"},{"location":"dev/extending.html","title":"Extending the App","text":"<p>Developer Note - Remove Me!</p> <p>Information on how to extend the App functionality.</p> <p>Extending the application is welcome, however it is best to open an issue first, to ensure that a PR would be accepted and makes sense in terms of features and design.</p>"},{"location":"dev/code_reference/index.html","title":"Code Reference","text":"<p>Auto-generated code reference documentation from docstrings.</p>"},{"location":"dev/code_reference/package.html","title":"Package","text":""},{"location":"dev/code_reference/package.html#nautobot_lunch","title":"<code>nautobot_lunch</code>","text":"<p>App declaration for nautobot_lunch.</p>"},{"location":"dev/code_reference/package.html#nautobot_lunch.LunchConfig","title":"<code>LunchConfig</code>","text":"<p>             Bases: <code>NautobotAppConfig</code></p> <p>App configuration for the nautobot_lunch app.</p> Source code in <code>nautobot_lunch/__init__.py</code> <pre><code>class LunchConfig(NautobotAppConfig):\n\"\"\"App configuration for the nautobot_lunch app.\"\"\"\nname = \"nautobot_lunch\"\nverbose_name = \"Nautobot Lunch\"\nversion = __version__\nauthor = \"Nate Gotz\"\ndescription = \"Nautobot Lunch.\"\nbase_url = \"lunch\"\nrequired_settings = []\nmin_version = \"2.0.0\"\nmax_version = \"2.9999\"\ndefault_settings = {\n\"yelp_api_key\": os.getenv(\"YELP_API_KEY\", \"\"),\n\"cache_time\": os.getenv(\"NAUTOBOT_LUNCH_CACHE_TIME\", \"3600\"),\n}\n</code></pre>"},{"location":"user/app_getting_started.html","title":"Getting Started with the App","text":"<p>This document provides a step-by-step tutorial on how to get the App going and how to use it.</p>"},{"location":"user/app_getting_started.html#install-the-app","title":"Install the App","text":"<p>To install the App, please follow the instructions detailed in the Installation Guide.</p>"},{"location":"user/app_getting_started.html#first-steps-with-the-app","title":"First steps with the App","text":"<p>Go to a location with either the latitude/longitude set or the physical address. Click on the <code>\ud83c\udf74 Find Lunch</code> tab.</p>"},{"location":"user/app_getting_started.html#what-are-the-next-steps","title":"What are the next steps?","text":"<ul> <li>Go get lunch.</li> <li>Decide if it's worth returning from lunch.</li> </ul>"},{"location":"user/app_overview.html","title":"App Overview","text":"<p>This document provides an overview of the App including critical information and important considerations when applying it to your Nautobot environment.</p> <p>Note</p> <p>Throughout this documentation, the terms \"app\" and \"plugin\" will be used interchangeably.</p>"},{"location":"user/app_overview.html#description","title":"Description","text":"<p>Nautobot Lunch is an App that provides the ability to find restaurants via Yelp near a location.</p>"},{"location":"user/app_overview.html#audience-user-personas-who-should-use-this-app","title":"Audience (User Personas) - Who should use this App?","text":"<p>Anyone that eats food.</p>"},{"location":"user/app_overview.html#authors-and-maintainers","title":"Authors and Maintainers","text":"<p>Nate Gotz</p>"},{"location":"user/app_overview.html#nautobot-features-used","title":"Nautobot Features Used","text":"<p>Template Content. Adds a tab to the location if it has an address or latitude/longitude on it.</p>"},{"location":"user/app_overview.html#extras","title":"Extras","text":"<p>Requires Yelp API key.</p>"},{"location":"user/app_use_cases.html","title":"Using the App","text":"<p>This document describes common use-cases and scenarios for this App.</p>"},{"location":"user/app_use_cases.html#general-usage","title":"General Usage","text":""},{"location":"user/app_use_cases.html#use-cases-and-common-workflows","title":"Use-cases and common workflows","text":"<p>Go to a location with either the latitude/longitude set or the physical address. Click on the <code>\ud83c\udf74 Find Lunch</code> tab.</p>"},{"location":"user/app_use_cases.html#screenshots","title":"Screenshots","text":""},{"location":"user/external_interactions.html","title":"External Interactions","text":"<p>This document describes external dependencies and prerequisites for this App to operate, including system requirements, API endpoints, interconnection or integrations to other applications or services, and similar topics.</p>"},{"location":"user/external_interactions.html#external-system-integrations","title":"External System Integrations","text":""},{"location":"user/external_interactions.html#from-the-app-to-other-systems","title":"From the App to Other Systems","text":"<p>Requires a Yelp API key. See Install Guide for more details.</p>"},{"location":"user/external_interactions.html#from-other-systems-to-the-app","title":"From Other Systems to the App","text":"<p>None.</p>"},{"location":"user/faq.html","title":"Frequently Asked Questions","text":"<p>Q: Why? A: I like lunch.</p> <p>Q: Seriously, Why? A: As a former tech, lunch was the most important part of the day. Having a way to quickly and easily find lunch spots near a site would have been beneficial.</p> <p>Q: Are there any CAPEX/OPEX savings provided by this app? A: For every person on site going to lunch, it takes about 5 minutes longer to determine where to go to lunch1. This cuts it down to 1 minute per person2.</p> <ol> <li> <p>Back of the napkin made up statistic (probably at a lunch). 3 \u21a9</p> </li> <li> <p>Again, completely made up. Most definitely done at lunch.\u00a0\u21a9</p> </li> <li> <p>\"Time is an Illusion.: Lunchtime doubly so.\" - Ford Prefect to Arthur Dent in \"The Hitchhiker\u2019s Guide to the Galaxy\", by Douglas Adams\u00a0\u21a9</p> </li> </ol>"}]}