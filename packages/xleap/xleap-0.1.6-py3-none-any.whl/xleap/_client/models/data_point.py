# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, StrictStr

from xleap._client.models.data_point_result import DataPointResult

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class DataPoint(BaseModel):
    """
    DataPoint
    """  # noqa: E501

    id: Optional[StrictStr] = None
    question: Optional[StrictStr] = None
    answer: Optional[StrictStr] = None
    ground_truths: List[Any]
    result: DataPointResult
    contexts: Optional[List[StrictStr]] = None
    tags: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "question",
        "answer",
        "ground_truths",
        "result",
        "contexts",
        "tags",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DataPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "id",
                "question",
                "answer",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict["result"] = self.result.to_dict()
        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict["tags"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DataPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "question": obj.get("question"),
                "answer": obj.get("answer"),
                "ground_truths": obj.get("ground_truths"),
                "result": DataPointResult.from_dict(obj.get("result"))
                if obj.get("result") is not None
                else None,
                "contexts": obj.get("contexts"),
                "tags": obj.get("tags"),
            }
        )
        return _obj
