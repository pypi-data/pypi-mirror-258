# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, StrictStr, field_validator

from xleap._client.models.exchange_token_request_user import ExchangeTokenRequestUser

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ExchangeTokenRequest(BaseModel):
    """
    ExchangeTokenRequest
    """  # noqa: E501

    token: StrictStr
    provider: StrictStr
    api_key: Optional[StrictStr] = None
    access_token: Optional[StrictStr] = None
    refresh_token: Optional[StrictStr] = None
    user: Optional[ExchangeTokenRequestUser] = None
    __properties: ClassVar[List[str]] = [
        "token",
        "provider",
        "api_key",
        "access_token",
        "refresh_token",
        "user",
    ]

    @field_validator("provider")
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("google", "github"):
            raise ValueError("must be one of enum values ('google', 'github')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExchangeTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "api_key",
                "access_token",
                "refresh_token",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict["user"] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExchangeTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "token": obj.get("token"),
                "provider": obj.get("provider"),
                "api_key": obj.get("api_key"),
                "access_token": obj.get("access_token"),
                "refresh_token": obj.get("refresh_token"),
                "user": ExchangeTokenRequestUser.from_dict(obj.get("user"))
                if obj.get("user") is not None
                else None,
            }
        )
        return _obj
