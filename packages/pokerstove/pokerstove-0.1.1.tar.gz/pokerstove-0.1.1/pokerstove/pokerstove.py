# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pokerstove
else:
    import _pokerstove

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _pokerstove.SHARED_PTR_DISOWN
class Rank(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    NUM_RANK = _pokerstove.Rank_NUM_RANK
    cardianlity = _pokerstove.Rank_cardianlity

    @staticmethod
    def Two():
        return _pokerstove.Rank_Two()

    @staticmethod
    def Three():
        return _pokerstove.Rank_Three()

    @staticmethod
    def Four():
        return _pokerstove.Rank_Four()

    @staticmethod
    def Five():
        return _pokerstove.Rank_Five()

    @staticmethod
    def Six():
        return _pokerstove.Rank_Six()

    @staticmethod
    def Seven():
        return _pokerstove.Rank_Seven()

    @staticmethod
    def Eight():
        return _pokerstove.Rank_Eight()

    @staticmethod
    def Nine():
        return _pokerstove.Rank_Nine()

    @staticmethod
    def Ten():
        return _pokerstove.Rank_Ten()

    @staticmethod
    def Jack():
        return _pokerstove.Rank_Jack()

    @staticmethod
    def Queen():
        return _pokerstove.Rank_Queen()

    @staticmethod
    def King():
        return _pokerstove.Rank_King()

    @staticmethod
    def Ace():
        return _pokerstove.Rank_Ace()

    @staticmethod
    def rank_code(c):
        return _pokerstove.Rank_rank_code(c)

    def __init__(self, *args):
        _pokerstove.Rank_swiginit(self, _pokerstove.new_Rank(*args))

    def str(self):
        return _pokerstove.Rank_str(self)

    def fromString(self, s):
        return _pokerstove.Rank_fromString(self, s)

    def __eq__(self, r):
        return _pokerstove.Rank___eq__(self, r)

    def __le__(self, r):
        return _pokerstove.Rank___le__(self, r)

    def __lt__(self, r):
        return _pokerstove.Rank___lt__(self, r)

    def __gt__(self, r):
        return _pokerstove.Rank___gt__(self, r)

    def __repr__(self):
        return _pokerstove.Rank___repr__(self)
    __swig_destroy__ = _pokerstove.delete_Rank

# Register Rank in _pokerstove:
_pokerstove.Rank_swigregister(Rank)
class Suit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    NUM_SUIT = _pokerstove.Suit_NUM_SUIT

    @staticmethod
    def Clubs():
        return _pokerstove.Suit_Clubs()

    @staticmethod
    def Diamonds():
        return _pokerstove.Suit_Diamonds()

    @staticmethod
    def Hearts():
        return _pokerstove.Suit_Hearts()

    @staticmethod
    def Spades():
        return _pokerstove.Suit_Spades()

    @staticmethod
    def begin():
        return _pokerstove.Suit_begin()

    @staticmethod
    def end():
        return _pokerstove.Suit_end()

    @staticmethod
    def suit_code(c):
        return _pokerstove.Suit_suit_code(c)

    def __init__(self, *args):
        _pokerstove.Suit_swiginit(self, _pokerstove.new_Suit(*args))

    def str(self):
        return _pokerstove.Suit_str(self)
    SUIT_ASCII = _pokerstove.Suit_SUIT_ASCII
    SUIT_ASCII_EXTENDED = _pokerstove.Suit_SUIT_ASCII_EXTENDED
    SUIT_HTML = _pokerstove.Suit_SUIT_HTML
    SUIT_HTML_2COLOR = _pokerstove.Suit_SUIT_HTML_2COLOR
    SUIT_HTML_4COLOR = _pokerstove.Suit_SUIT_HTML_4COLOR
    SUIT_PREFLOP_CANNON = _pokerstove.Suit_SUIT_PREFLOP_CANNON
    SUIT_ANSI_EXT_COLOR = _pokerstove.Suit_SUIT_ANSI_EXT_COLOR
    SUIT_UNICODE = _pokerstove.Suit_SUIT_UNICODE

    @staticmethod
    def setSuitStringType(s):
        return _pokerstove.Suit_setSuitStringType(s)

    @staticmethod
    def getSuitStringType():
        return _pokerstove.Suit_getSuitStringType()

    def __eq__(self, s):
        return _pokerstove.Suit___eq__(self, s)

    def __le__(self, s):
        return _pokerstove.Suit___le__(self, s)

    def __lt__(self, s):
        return _pokerstove.Suit___lt__(self, s)

    def __repr__(self):
        return _pokerstove.Suit___repr__(self)
    __swig_destroy__ = _pokerstove.delete_Suit

# Register Suit in _pokerstove:
_pokerstove.Suit_swigregister(Suit)
class Card(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    RANK_SUIT = _pokerstove.Card_RANK_SUIT
    SUIT_CANONICAL = _pokerstove.Card_SUIT_CANONICAL
    RANK = _pokerstove.Card_RANK

    def __init__(self, *args):
        _pokerstove.Card_swiginit(self, _pokerstove.new_Card(*args))

    def rank(self):
        return _pokerstove.Card_rank(self)

    def suit(self):
        return _pokerstove.Card_suit(self)

    def code(self):
        return _pokerstove.Card_code(self)

    def str(self):
        return _pokerstove.Card_str(self)

    def fromString(self, s):
        return _pokerstove.Card_fromString(self, s)

    def __eq__(self, r):
        return _pokerstove.Card___eq__(self, r)

    def __lt__(self, r):
        return _pokerstove.Card___lt__(self, r)

    def __repr__(self):
        return _pokerstove.Card___repr__(self)
    __swig_destroy__ = _pokerstove.delete_Card

# Register Card in _pokerstove:
_pokerstove.Card_swigregister(Card)
class CardSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _pokerstove.CardSet_swiginit(self, _pokerstove.new_CardSet(*args))

    def clear(self):
        return _pokerstove.CardSet_clear(self)

    def fill(self):
        return _pokerstove.CardSet_fill(self)

    def size(self):
        return _pokerstove.CardSet_size(self)

    def mask(self):
        return _pokerstove.CardSet_mask(self)

    def cards(self):
        return _pokerstove.CardSet_cards(self)

    def cardSets(self):
        return _pokerstove.CardSet_cardSets(self)

    def insert(self, *args):
        return _pokerstove.CardSet_insert(self, *args)

    def remove(self, *args):
        return _pokerstove.CardSet_remove(self, *args)

    def disjoint(self, c):
        return _pokerstove.CardSet_disjoint(self, c)

    def intersects(self, c):
        return _pokerstove.CardSet_intersects(self, c)

    def countRanks(self):
        return _pokerstove.CardSet_countRanks(self)

    def find(self, r):
        return _pokerstove.CardSet_find(self, r)

    def rankMask(self):
        return _pokerstove.CardSet_rankMask(self)

    def hasStraight(self):
        return _pokerstove.CardSet_hasStraight(self)

    def topRank(self):
        return _pokerstove.CardSet_topRank(self)

    def bottomRank(self):
        return _pokerstove.CardSet_bottomRank(self)

    def countMaxRank(self):
        return _pokerstove.CardSet_countMaxRank(self)

    def insertRanks(self, rset):
        return _pokerstove.CardSet_insertRanks(self, rset)

    def canonizeRanks(self):
        return _pokerstove.CardSet_canonizeRanks(self)

    def countSuits(self):
        return _pokerstove.CardSet_countSuits(self)

    def count(self, *args):
        return _pokerstove.CardSet_count(self, *args)

    def countMaxSuit(self):
        return _pokerstove.CardSet_countMaxSuit(self)

    def contains(self, *args):
        return _pokerstove.CardSet_contains(self, *args)

    def flushRank(self, s):
        return _pokerstove.CardSet_flushRank(self, s)

    def suitMask(self, s):
        return _pokerstove.CardSet_suitMask(self, s)

    def canonize(self, *args):
        return _pokerstove.CardSet_canonize(self, *args)

    def rotateSuits(self, c, d, h, s):
        return _pokerstove.CardSet_rotateSuits(self, c, d, h, s)

    def flipSuits(self):
        return _pokerstove.CardSet_flipSuits(self)

    def str(self):
        return _pokerstove.CardSet_str(self)

    def rankstr(self):
        return _pokerstove.CardSet_rankstr(self)

    def toRankBitString(self):
        return _pokerstove.CardSet_toRankBitString(self)

    def colex(self):
        return _pokerstove.CardSet_colex(self)

    def rankColex(self):
        return _pokerstove.CardSet_rankColex(self)

    def evaluateHigh(self):
        return _pokerstove.CardSet_evaluateHigh(self)

    def evaluateHighRanks(self):
        return _pokerstove.CardSet_evaluateHighRanks(self)

    def evaluateHighFlush(self):
        return _pokerstove.CardSet_evaluateHighFlush(self)

    def evaluateLowA5(self):
        return _pokerstove.CardSet_evaluateLowA5(self)

    def evaluate8LowA5(self):
        return _pokerstove.CardSet_evaluate8LowA5(self)

    def evaluateLow2to7(self):
        return _pokerstove.CardSet_evaluateLow2to7(self)

    def evaluateRanksLow2to7(self):
        return _pokerstove.CardSet_evaluateRanksLow2to7(self)

    def evaluateSuitsLow2to7(self):
        return _pokerstove.CardSet_evaluateSuitsLow2to7(self)

    def evaluate3CP(self):
        return _pokerstove.CardSet_evaluate3CP(self)

    def evaluateBadugi(self):
        return _pokerstove.CardSet_evaluateBadugi(self)

    def evaluatePairing(self):
        return _pokerstove.CardSet_evaluatePairing(self)

    def evaluateStraightOuts(self):
        return _pokerstove.CardSet_evaluateStraightOuts(self)

    def __ior__(self, c):
        return _pokerstove.CardSet___ior__(self, c)

    def __ixor__(self, c):
        return _pokerstove.CardSet___ixor__(self, c)

    def __eq__(self, c):
        return _pokerstove.CardSet___eq__(self, c)

    def __ne__(self, c):
        return _pokerstove.CardSet___ne__(self, c)

    def __lt__(self, c):
        return _pokerstove.CardSet___lt__(self, c)

    def __gt__(self, c):
        return _pokerstove.CardSet___gt__(self, c)

    def __and__(self, c):
        return _pokerstove.CardSet___and__(self, c)

    def __or__(self, c):
        return _pokerstove.CardSet___or__(self, c)

    def __xor__(self, c):
        return _pokerstove.CardSet___xor__(self, c)

    def swap(self, c):
        return _pokerstove.CardSet_swap(self, c)

    def __repr__(self):
        return _pokerstove.CardSet___repr__(self)
    __swig_destroy__ = _pokerstove.delete_CardSet

# Register CardSet in _pokerstove:
_pokerstove.CardSet_swigregister(CardSet)
cvar = _pokerstove.cvar
STANDARD_DECK_SIZE = cvar.STANDARD_DECK_SIZE


def canonizeToBoard(board, hand):
    return _pokerstove.canonizeToBoard(board, hand)

def findSuitPermutation(source, dest):
    return _pokerstove.findSuitPermutation(source, dest)
class PokerHand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _pokerstove.PokerHand_swiginit(self, _pokerstove.new_PokerHand(*args))

    def clear(self):
        return _pokerstove.PokerHand_clear(self)

    def str(self):
        return _pokerstove.PokerHand_str(self)

    def preflopstr(self):
        return _pokerstove.PokerHand_preflopstr(self)

    def size(self):
        return _pokerstove.PokerHand_size(self)

    def cardSet(self, *args):
        return _pokerstove.PokerHand_cardSet(self, *args)

    def cards(self):
        return _pokerstove.PokerHand_cards(self)

    def contains(self, c):
        return _pokerstove.PokerHand_contains(self, c)

    def append(self, *args):
        return _pokerstove.PokerHand_append(self, *args)

    def remove(self, *args):
        return _pokerstove.PokerHand_remove(self, *args)

    def pushCardToFront(self, nth):
        return _pokerstove.PokerHand_pushCardToFront(self, nth)

    def sort(self):
        return _pokerstove.PokerHand_sort(self)

    def sortRanks(self):
        return _pokerstove.PokerHand_sortRanks(self)

    def sortEval(self):
        return _pokerstove.PokerHand_sortEval(self)

    def __repr__(self):
        return _pokerstove.PokerHand___repr__(self)
    __swig_destroy__ = _pokerstove.delete_PokerHand

# Register PokerHand in _pokerstove:
_pokerstove.PokerHand_swigregister(PokerHand)
MAX_PHCARDS = cvar.MAX_PHCARDS

class PokerEvaluation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _pokerstove.PokerEvaluation_swiginit(self, _pokerstove.new_PokerEvaluation(*args))

    def str(self):
        return _pokerstove.PokerEvaluation_str(self)

    def bitstr(self):
        return _pokerstove.PokerEvaluation_bitstr(self)

    def code(self):
        return _pokerstove.PokerEvaluation_code(self)

    def showdownCode(self):
        return _pokerstove.PokerEvaluation_showdownCode(self)

    def reducedCode(self):
        return _pokerstove.PokerEvaluation_reducedCode(self)

    def reducedCode2to7(self):
        return _pokerstove.PokerEvaluation_reducedCode2to7(self)

    def type(self):
        return _pokerstove.PokerEvaluation_type(self)

    def majorRank(self):
        return _pokerstove.PokerEvaluation_majorRank(self)

    def minorRank(self):
        return _pokerstove.PokerEvaluation_minorRank(self)

    def fixWheel2to7(self, rankMask):
        return _pokerstove.PokerEvaluation_fixWheel2to7(self, rankMask)

    def kickerBits(self):
        return _pokerstove.PokerEvaluation_kickerBits(self)

    def __eq__(self, e):
        return _pokerstove.PokerEvaluation___eq__(self, e)

    def __ne__(self, e):
        return _pokerstove.PokerEvaluation___ne__(self, e)

    def __le__(self, e):
        return _pokerstove.PokerEvaluation___le__(self, e)

    def __lt__(self, e):
        return _pokerstove.PokerEvaluation___lt__(self, e)

    def __gt__(self, e):
        return _pokerstove.PokerEvaluation___gt__(self, e)

    def toStringCannon(self):
        return _pokerstove.PokerEvaluation_toStringCannon(self)

    def __repr__(self):
        return _pokerstove.PokerEvaluation___repr__(self)
    __swig_destroy__ = _pokerstove.delete_PokerEvaluation

# Register PokerEvaluation in _pokerstove:
_pokerstove.PokerEvaluation_swigregister(PokerEvaluation)
NO_PAIR = cvar.NO_PAIR
ONE_PAIR = cvar.ONE_PAIR
THREE_FLUSH = cvar.THREE_FLUSH
THREE_STRAIGHT = cvar.THREE_STRAIGHT
TWO_PAIR = cvar.TWO_PAIR
THREE_OF_A_KIND = cvar.THREE_OF_A_KIND
THREE_STRAIGHT_FLUSH = cvar.THREE_STRAIGHT_FLUSH
STRAIGHT = cvar.STRAIGHT
FLUSH = cvar.FLUSH
FULL_HOUSE = cvar.FULL_HOUSE
FOUR_OF_A_KIND = cvar.FOUR_OF_A_KIND
STRAIGHT_FLUSH = cvar.STRAIGHT_FLUSH
NUM_EVAL_TYPES = cvar.NUM_EVAL_TYPES
FULL_HAND_SIZE = cvar.FULL_HAND_SIZE
MAX_EVAL_HAND_SIZE = cvar.MAX_EVAL_HAND_SIZE
VSHIFT = cvar.VSHIFT
MAJOR_SHIFT = cvar.MAJOR_SHIFT
MINOR_SHIFT = cvar.MINOR_SHIFT
ACE_LOW_BIT = cvar.ACE_LOW_BIT

class PokerHandEvaluation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _pokerstove.PokerHandEvaluation_swiginit(self, _pokerstove.new_PokerHandEvaluation(*args))

    def str(self):
        return _pokerstove.PokerHandEvaluation_str(self)

    def high(self):
        return _pokerstove.PokerHandEvaluation_high(self)

    def low(self):
        return _pokerstove.PokerHandEvaluation_low(self)

    def highlow(self):
        return _pokerstove.PokerHandEvaluation_highlow(self)

    def empty(self):
        return _pokerstove.PokerHandEvaluation_empty(self)

    def eval(self, n=0):
        return _pokerstove.PokerHandEvaluation_eval(self, n)

    def __repr__(self):
        return _pokerstove.PokerHandEvaluation___repr__(self)
    __swig_destroy__ = _pokerstove.delete_PokerHandEvaluation

# Register PokerHandEvaluation in _pokerstove:
_pokerstove.PokerHandEvaluation_swigregister(PokerHandEvaluation)
topRankTable = cvar.topRankTable
botRankTable = cvar.botRankTable
straightTable = cvar.straightTable
nRanksTable = cvar.nRanksTable
flushTable = cvar.flushTable
topFiveRanksTable = cvar.topFiveRanksTable
topThreeRanksTable = cvar.topThreeRanksTable
lowballA5Ranks = cvar.lowballA5Ranks
bottomRankMask = cvar.bottomRankMask


def shares(hero, villain):
    return _pokerstove.shares(hero, villain)
class EquityResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    winShares = property(_pokerstove.EquityResult_winShares_get, _pokerstove.EquityResult_winShares_set)
    tieShares = property(_pokerstove.EquityResult_tieShares_get, _pokerstove.EquityResult_tieShares_set)
    equity = property(_pokerstove.EquityResult_equity_get, _pokerstove.EquityResult_equity_set)
    equity2 = property(_pokerstove.EquityResult_equity2_get, _pokerstove.EquityResult_equity2_set)

    def __init__(self):
        _pokerstove.EquityResult_swiginit(self, _pokerstove.new_EquityResult())

    def __iadd__(self, other):
        return _pokerstove.EquityResult___iadd__(self, other)

    def str(self):
        return _pokerstove.EquityResult_str(self)
    __swig_destroy__ = _pokerstove.delete_EquityResult

# Register EquityResult in _pokerstove:
_pokerstove.EquityResult_swigregister(EquityResult)
class PokerHandEvaluator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pokerstove.delete_PokerHandEvaluator

    @staticmethod
    def alloc(strid):
        return _pokerstove.PokerHandEvaluator_alloc(strid)

    def evaluateHand(self, *args):
        return _pokerstove.PokerHandEvaluator_evaluateHand(self, *args)

    def evaluate(self, *args):
        return _pokerstove.PokerHandEvaluator_evaluate(self, *args)

    def eval(self, *args):
        return _pokerstove.PokerHandEvaluator_eval(self, *args)

    def handSize(self):
        return _pokerstove.PokerHandEvaluator_handSize(self)

    def boardSize(self):
        return _pokerstove.PokerHandEvaluator_boardSize(self)

    def evaluationSize(self):
        return _pokerstove.PokerHandEvaluator_evaluationSize(self)

    def numDraws(self):
        return _pokerstove.PokerHandEvaluator_numDraws(self)

    def evaluateRanks(self, *args):
        return _pokerstove.PokerHandEvaluator_evaluateRanks(self, *args)

    def evaluateSuits(self, *args):
        return _pokerstove.PokerHandEvaluator_evaluateSuits(self, *args)

    def usesSuits(self):
        return _pokerstove.PokerHandEvaluator_usesSuits(self)

    def useSuits(self, use):
        return _pokerstove.PokerHandEvaluator_useSuits(self, use)

    def setNumDraws(self, sz):
        return _pokerstove.PokerHandEvaluator_setNumDraws(self, sz)

    def evaluateShowdown(self, hands, board, evals, result, weight=1.0):
        return _pokerstove.PokerHandEvaluator_evaluateShowdown(self, hands, board, evals, result, weight)

# Register PokerHandEvaluator in _pokerstove:
_pokerstove.PokerHandEvaluator_swigregister(PokerHandEvaluator)
class isLive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, c, dead):
        return _pokerstove.isLive___call__(self, c, dead)

    def __init__(self):
        _pokerstove.isLive_swiginit(self, _pokerstove.new_isLive())
    __swig_destroy__ = _pokerstove.delete_isLive

# Register isLive in _pokerstove:
_pokerstove.isLive_swigregister(isLive)
PREFLOP = cvar.PREFLOP
FLOP = cvar.FLOP
TURN = cvar.TURN
RIVER = cvar.RIVER
BOARD_SIZE = cvar.BOARD_SIZE
NUM_FLOP_CARDS = cvar.NUM_FLOP_CARDS
NUM_TURN_CARDS = cvar.NUM_TURN_CARDS
NUM_RIVER_CARDS = cvar.NUM_RIVER_CARDS
NUM_HOLDEM_POCKET = cvar.NUM_HOLDEM_POCKET
NUM_HOLDEM_ROUNDS = cvar.NUM_HOLDEM_ROUNDS

class SimpleDeck(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self):
        _pokerstove.SimpleDeck_swiginit(self, _pokerstove.new_SimpleDeck())

    def reset(self):
        return _pokerstove.SimpleDeck_reset(self)

    def size(self):
        return _pokerstove.SimpleDeck_size(self)

    def str(self):
        return _pokerstove.SimpleDeck_str(self)

    def deal(self, ncards):
        return _pokerstove.SimpleDeck_deal(self, ncards)

    def dead(self):
        return _pokerstove.SimpleDeck_dead(self)

    def remove(self, cards):
        return _pokerstove.SimpleDeck_remove(self, cards)

    def shuffle(self):
        return _pokerstove.SimpleDeck_shuffle(self)

    def peek(self, mask):
        return _pokerstove.SimpleDeck_peek(self, mask)

    def __repr__(self):
        return _pokerstove.SimpleDeck___repr__(self)
    __swig_destroy__ = _pokerstove.delete_SimpleDeck

# Register SimpleDeck in _pokerstove:
_pokerstove.SimpleDeck_swigregister(SimpleDeck)
class CardDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pokerstove.CardDistribution_swiginit(self, _pokerstove.new_CardDistribution(*args))
    __swig_destroy__ = _pokerstove.delete_CardDistribution

    def clear(self):
        return _pokerstove.CardDistribution_clear(self)

    def removeCards(self, dead):
        return _pokerstove.CardDistribution_removeCards(self, dead)

    def weight(self):
        return _pokerstove.CardDistribution_weight(self)

    def data(self):
        return _pokerstove.CardDistribution_data(self)

    def parse(self, input):
        return _pokerstove.CardDistribution_parse(self, input)

    def display(self):
        return _pokerstove.CardDistribution_display(self)

    def str(self):
        return _pokerstove.CardDistribution_str(self)

    def fill(self, *args):
        return _pokerstove.CardDistribution_fill(self, *args)

    def size(self):
        return _pokerstove.CardDistribution_size(self)

# Register CardDistribution in _pokerstove:
_pokerstove.CardDistribution_swigregister(CardDistribution)

