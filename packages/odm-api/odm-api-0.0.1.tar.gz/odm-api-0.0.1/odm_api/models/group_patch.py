# coding: utf-8

"""
    Tasks API

    These API endpoints serve to work with asynchronous tasks. 

    The version of the OpenAPI document: default-released
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from odm_api.models.user_patch_operations_inner import UserPatchOperationsInner
from typing import Optional, Set
from typing_extensions import Self

class GroupPatch(BaseModel):
    """
    GroupPatch
    """ # noqa: E501
    operations: List[UserPatchOperationsInner] = Field(description="Patch operations list", alias="Operations")
    schemas: List[StrictStr]
    __properties: ClassVar[List[str]] = ["Operations", "schemas"]

    @field_validator('schemas')
    def schemas_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['urn:ietf:params:scim:api:messages:2.0:PatchOp']):
                raise ValueError("each list item must be one of ('urn:ietf:params:scim:api:messages:2.0:PatchOp')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item in self.operations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Operations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Operations": [UserPatchOperationsInner.from_dict(_item) for _item in obj["Operations"]] if obj.get("Operations") is not None else None,
            "schemas": obj.get("schemas")
        })
        return _obj


