# coding: utf-8

"""
    Tasks API

    These API endpoints serve to work with asynchronous tasks. 

    The version of the OpenAPI document: default-released
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VariantItem(BaseModel):
    """
    VariantItem
    """ # noqa: E501
    item_id: Optional[StrictStr] = Field(default=None, alias="itemId")
    metadata: Optional[Dict[str, Any]] = None
    run_id: Optional[StrictStr] = Field(default=None, alias="runId")
    group_id: Optional[StrictStr] = Field(default=None, alias="groupId")
    contig: Optional[StrictStr] = None
    start: Optional[StrictInt] = None
    reference: Optional[StrictStr] = None
    alteration: Optional[List[StrictStr]] = None
    variation_id: Optional[Any] = Field(default=None, alias="variationId")
    info: Optional[Dict[str, Any]] = None
    genotype: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["itemId", "metadata", "runId", "groupId", "contig", "start", "reference", "alteration", "variationId", "info", "genotype"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VariantItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if variation_id (nullable) is None
        # and model_fields_set contains the field
        if self.variation_id is None and "variation_id" in self.model_fields_set:
            _dict['variationId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VariantItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itemId": obj.get("itemId"),
            "metadata": obj.get("metadata"),
            "runId": obj.get("runId"),
            "groupId": obj.get("groupId"),
            "contig": obj.get("contig"),
            "start": obj.get("start"),
            "reference": obj.get("reference"),
            "alteration": obj.get("alteration"),
            "variationId": obj.get("variationId"),
            "info": obj.get("info"),
            "genotype": obj.get("genotype")
        })
        return _obj


