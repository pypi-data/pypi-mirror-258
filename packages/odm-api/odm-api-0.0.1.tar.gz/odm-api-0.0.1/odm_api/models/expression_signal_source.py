# coding: utf-8

"""
    Tasks API

    These API endpoints serve to work with asynchronous tasks. 

    The version of the OpenAPI document: default-released
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpressionSignalSource(BaseModel):
    """
    ExpressionSignalSource
    """ # noqa: E501
    template_id: Optional[StrictStr] = Field(default=None, description="ID of template file.", alias="templateId")
    link: StrictStr = Field(description="URL of the signal file.")
    metadata_link: Optional[StrictStr] = Field(default=None, description="URL of the signal file metadata.", alias="metadataLink")
    previous_version: Optional[StrictStr] = Field(default=None, description="Accession of matrix group or matrix group version chain.", alias="previousVersion")
    number_of_feature_attributes: Optional[StrictInt] = Field(default=None, description="Integer value that specifies the number of columns related to the feature in the uploaded data frame, and indicates the starting position of the sample data. This attribute is not needed if the uploaded file is in GCT format.", alias="numberOfFeatureAttributes")
    data_class: Optional[StrictStr] = Field(default=None, description="A mandatory parameter with the following possible values: `Bulk transcriptomics`, `Single-cell transcriptomics`, `Differential abundance (FC, pval, etc.)`, `Pathway analysis`, `Proteomics`, `Single-cell proteomics`, `Metabolomics`, `Epigenomics`, `DNA methylation`, `Chemoinformatics`, `Imaging features`, `Gene panel data`, `Biomarker data`, `Physical measures`, `Blood counts`, `Other body fluid counts`, `Nanopore`, `Other`.  In case the parameter is not set the dataClass is automatically defined as `Other`.", alias="dataClass")
    measurement_separator: Optional[StrictStr] = Field(default=None, description="This parameter is necessary when your file contains multiple measurement columns for each sample, library, or preparation. It represents the character that distinguishes the sample/library/preparation name from the measurement name in column headers. Supported separators include `. , : ; _ - /  |`, with the allowance for multi-character separators.", alias="measurementSeparator")
    __properties: ClassVar[List[str]] = ["templateId", "link", "metadataLink", "previousVersion", "numberOfFeatureAttributes", "dataClass", "measurementSeparator"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpressionSignalSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "template_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpressionSignalSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "templateId": obj.get("templateId"),
            "link": obj.get("link"),
            "metadataLink": obj.get("metadataLink"),
            "previousVersion": obj.get("previousVersion"),
            "numberOfFeatureAttributes": obj.get("numberOfFeatureAttributes"),
            "dataClass": obj.get("dataClass"),
            "measurementSeparator": obj.get("measurementSeparator")
        })
        return _obj


