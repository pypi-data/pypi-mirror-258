# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class RuleMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "orientation",
            "assignments",
            "connectionState",
            "name",
            "comment",
            "id",
            "isDefaultRule",
            "family",
            "order",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            comment = schemas.StrSchema
            
            
            class assignments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RuleAssignment']:
                        return RuleAssignment
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RuleAssignment'], typing.List['RuleAssignment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RuleAssignment':
                    return super().__getitem__(i)
        
            @staticmethod
            def connectionState() -> typing.Type['ConnectionState']:
                return ConnectionState
            
            
            class family(
                schemas.DictSchema
            ):
            
                class MetaOapg:
                    additional_properties = schemas.NotAnyTypeSchema
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'family':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            isDefaultRule = schemas.BoolSchema
            order = schemas.Float64Schema
        
            @staticmethod
            def orientation() -> typing.Type['PolicyOrientation']:
                return PolicyOrientation
            __annotations__ = {
                "id": id,
                "name": name,
                "comment": comment,
                "assignments": assignments,
                "connectionState": connectionState,
                "family": family,
                "isDefaultRule": isDefaultRule,
                "order": order,
                "orientation": orientation,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    orientation: 'PolicyOrientation'
    assignments: MetaOapg.properties.assignments
    connectionState: 'ConnectionState'
    name: MetaOapg.properties.name
    comment: MetaOapg.properties.comment
    id: MetaOapg.properties.id
    isDefaultRule: MetaOapg.properties.isDefaultRule
    family: MetaOapg.properties.family
    order: MetaOapg.properties.order
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orientation"]) -> 'PolicyOrientation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignments"]) -> MetaOapg.properties.assignments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionState"]) -> 'ConnectionState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDefaultRule"]) -> MetaOapg.properties.isDefaultRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["family"]) -> MetaOapg.properties.family: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["orientation"], typing_extensions.Literal["assignments"], typing_extensions.Literal["connectionState"], typing_extensions.Literal["name"], typing_extensions.Literal["comment"], typing_extensions.Literal["id"], typing_extensions.Literal["isDefaultRule"], typing_extensions.Literal["family"], typing_extensions.Literal["order"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orientation"]) -> 'PolicyOrientation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignments"]) -> MetaOapg.properties.assignments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionState"]) -> 'ConnectionState': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDefaultRule"]) -> MetaOapg.properties.isDefaultRule: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["family"]) -> MetaOapg.properties.family: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["orientation"], typing_extensions.Literal["assignments"], typing_extensions.Literal["connectionState"], typing_extensions.Literal["name"], typing_extensions.Literal["comment"], typing_extensions.Literal["id"], typing_extensions.Literal["isDefaultRule"], typing_extensions.Literal["family"], typing_extensions.Literal["order"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        orientation: 'PolicyOrientation',
        assignments: typing.Union[MetaOapg.properties.assignments, list, tuple, ],
        connectionState: 'ConnectionState',
        name: typing.Union[MetaOapg.properties.name, str, ],
        comment: typing.Union[MetaOapg.properties.comment, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        isDefaultRule: typing.Union[MetaOapg.properties.isDefaultRule, bool, ],
        family: typing.Union[MetaOapg.properties.family, dict, frozendict.frozendict, ],
        order: typing.Union[MetaOapg.properties.order, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RuleMetadata':
        return super().__new__(
            cls,
            *_args,
            orientation=orientation,
            assignments=assignments,
            connectionState=connectionState,
            name=name,
            comment=comment,
            id=id,
            isDefaultRule=isDefaultRule,
            family=family,
            order=order,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.connection_state import ConnectionState
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.policy_orientation import PolicyOrientation
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.rule_assignment import RuleAssignment
