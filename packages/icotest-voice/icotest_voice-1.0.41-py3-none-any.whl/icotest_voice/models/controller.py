# coding: utf-8

"""
    IcoTest Voice

    IcoTest Voice API  # noqa: E501

    The version of the OpenAPI document: 1.0.41
    Contact: shaun.hirst@3adesign.co.uk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from icotest_voice.configuration import Configuration


class Controller(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'controller_id': 'str',
        'controller_type': 'str',
        'description': 'str',
        'location': 'str',
        'callback_url': 'str',
        'created': 'datetime',
        'last_contact': 'datetime'
    }

    attribute_map = {
        'controller_id': 'controller_id',
        'controller_type': 'controller_type',
        'description': 'description',
        'location': 'location',
        'callback_url': 'callback_url',
        'created': 'created',
        'last_contact': 'last_contact'
    }

    def __init__(self, controller_id=None, controller_type=None, description=None, location=None, callback_url=None, created=None, last_contact=None, local_vars_configuration=None):  # noqa: E501
        """Controller - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._controller_id = None
        self._controller_type = None
        self._description = None
        self._location = None
        self._callback_url = None
        self._created = None
        self._last_contact = None
        self.discriminator = None

        self.controller_id = controller_id
        self.controller_type = controller_type
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if callback_url is not None:
            self.callback_url = callback_url
        if created is not None:
            self.created = created
        if last_contact is not None:
            self.last_contact = last_contact

    @property
    def controller_id(self):
        """Gets the controller_id of this Controller.  # noqa: E501

        the unique id of the controller  # noqa: E501

        :return: The controller_id of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._controller_id

    @controller_id.setter
    def controller_id(self, controller_id):
        """Sets the controller_id of this Controller.

        the unique id of the controller  # noqa: E501

        :param controller_id: The controller_id of this Controller.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and controller_id is None:  # noqa: E501
            raise ValueError("Invalid value for `controller_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                controller_id is not None and len(controller_id) > 36):
            raise ValueError("Invalid value for `controller_id`, length must be less than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                controller_id is not None and len(controller_id) < 36):
            raise ValueError("Invalid value for `controller_id`, length must be greater than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                controller_id is not None and not re.search(r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}', controller_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `controller_id`, must be a follow pattern or equal to `/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/`")  # noqa: E501

        self._controller_id = controller_id

    @property
    def controller_type(self):
        """Gets the controller_type of this Controller.  # noqa: E501

        the type of the controller  # noqa: E501

        :return: The controller_type of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._controller_type

    @controller_type.setter
    def controller_type(self, controller_type):
        """Sets the controller_type of this Controller.

        the type of the controller  # noqa: E501

        :param controller_type: The controller_type of this Controller.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and controller_type is None:  # noqa: E501
            raise ValueError("Invalid value for `controller_type`, must not be `None`")  # noqa: E501
        allowed_values = ["dect", "sip", "fxo", "appium"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and controller_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `controller_type` ({0}), must be one of {1}"  # noqa: E501
                .format(controller_type, allowed_values)
            )

        self._controller_type = controller_type

    @property
    def description(self):
        """Gets the description of this Controller.  # noqa: E501

        the description of the controller  # noqa: E501

        :return: The description of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Controller.

        the description of the controller  # noqa: E501

        :param description: The description of this Controller.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def location(self):
        """Gets the location of this Controller.  # noqa: E501

        the location of the controller  # noqa: E501

        :return: The location of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Controller.

        the location of the controller  # noqa: E501

        :param location: The location of this Controller.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                location is not None and len(location) > 128):
            raise ValueError("Invalid value for `location`, length must be less than or equal to `128`")  # noqa: E501

        self._location = location

    @property
    def callback_url(self):
        """Gets the callback_url of this Controller.  # noqa: E501

        the url to contact the controller  # noqa: E501

        :return: The callback_url of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Controller.

        the url to contact the controller  # noqa: E501

        :param callback_url: The callback_url of this Controller.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                callback_url is not None and len(callback_url) > 256):
            raise ValueError("Invalid value for `callback_url`, length must be less than or equal to `256`")  # noqa: E501

        self._callback_url = callback_url

    @property
    def created(self):
        """Gets the created of this Controller.  # noqa: E501

        The date the controller was added  # noqa: E501

        :return: The created of this Controller.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Controller.

        The date the controller was added  # noqa: E501

        :param created: The created of this Controller.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def last_contact(self):
        """Gets the last_contact of this Controller.  # noqa: E501

        The last contact date time with the controller  # noqa: E501

        :return: The last_contact of this Controller.  # noqa: E501
        :rtype: datetime
        """
        return self._last_contact

    @last_contact.setter
    def last_contact(self, last_contact):
        """Sets the last_contact of this Controller.

        The last contact date time with the controller  # noqa: E501

        :param last_contact: The last_contact of this Controller.  # noqa: E501
        :type: datetime
        """

        self._last_contact = last_contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Controller):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Controller):
            return True

        return self.to_dict() != other.to_dict()
