Metadata-Version: 2.1
Name: libcloudspawner
Version: 2.1.0
Summary: JupyterHub Spawner for clouds
Project-URL: Homepage, https://github.com/tristanlt/jupyter-libcloudspawner
Project-URL: Documentation, https://jupyter-libcloudspawner.readthedocs.io/en/latest/
Project-URL: Bug Tracker, https://github.com/tristanlt/jupyter-libcloudspawner/issues
Author-email: Tristan Le Toullec <tristan.letoullec@cnrs.fr>
License-File: AUTHORS
License-File: LICENSE
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Requires-Dist: apache-libcloud
Requires-Dist: jinja2
Requires-Dist: jupyterhub>=4.0.0
Description-Content-Type: text/markdown

# About LibCloudSpawner

[![Chat on Gitter](https://img.shields.io/badge/Chat%20on-Gitter-green.svg)](https://gitter.im/jupyter-libcloudspawner/community)

LibcloudSpawner enables JupyterHub to spwan single-user notebooks server inside fresh cloud instance.

LibcloudSpawner is based on [Apache Libcloud](https://libcloud.apache.org/) which aims to provide an abstraction API for a lot of cloud providers.

!!! note "For the moment, only OpenStack is supported"

    Apache Libcloud provides the ability to manage resources in AWS, Google Cloud or Azure. But for the moment, only OpenStack is supported.

## Overview

A [Jupyterhub Spawner](https://jupyterhub.readthedocs.io/en/stable/reference/spawners.html) start each single-user notebook server. LibcloudSpawner is a spawner that operate with cloud API to manage singleuser notebook server instance life-cycle. Each Jupyterhub user will have one cloud instance for his usage.

### Benefits

* needs one small instance for JupyterHub server, all other resources are dynamic
* single-user servers have real OS, feel free to integrate them in your information system (ActiveDirectory, authentication, mountpoint...)
* simple access to VT-io or pci-passthrough devices (GPU)
* ability to host third-party services on user instance (VNC, RStudio...)
* no need for Docker or Kubernetes

### Drawbacks

* user server could be very slow to start (depending cloud provider and image size)
* no need for Docker or Kubernetes

[See the full documentation for informations, use-case and tutorials](https://jupyter-libcloudspawner.readthedocs.io/en/latest/)