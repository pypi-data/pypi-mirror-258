# coding: utf-8

"""
    fine-tuning-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictStr, conlist

class TextToSpeechLatentTune(BaseModel):
    """
    A TextToSpeechLatentTune.  # noqa: E501
    """
    asset_ids: conlist(StrictStr) = Field(..., description="The Asset Lake asset ids used for this task.")
    inline_assets: Optional[StrictBool] = None
    tune_type: Optional[Any] = Field(None, description="Tune type.")
    __properties = ["asset_ids", "inline_assets", "tune_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TextToSpeechLatentTune:
        """Create an instance of TextToSpeechLatentTune from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if inline_assets (nullable) is None
        # and __fields_set__ contains the field
        if self.inline_assets is None and "inline_assets" in self.__fields_set__:
            _dict['inline_assets'] = None

        # set to None if tune_type (nullable) is None
        # and __fields_set__ contains the field
        if self.tune_type is None and "tune_type" in self.__fields_set__:
            _dict['tune_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TextToSpeechLatentTune:
        """Create an instance of TextToSpeechLatentTune from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TextToSpeechLatentTune.parse_obj(obj)

        _obj = TextToSpeechLatentTune.parse_obj({
            "asset_ids": obj.get("asset_ids"),
            "inline_assets": obj.get("inline_assets"),
            "tune_type": obj.get("tune_type")
        })
        return _obj


