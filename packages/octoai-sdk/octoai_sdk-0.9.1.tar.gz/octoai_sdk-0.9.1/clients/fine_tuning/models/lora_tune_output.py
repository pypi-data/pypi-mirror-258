# coding: utf-8

"""
    fine-tuning-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from clients.fine_tuning.models.lora_tune_checkpoint import LoraTuneCheckpoint
from clients.fine_tuning.models.lora_tune_file import LoraTuneFile

class LoraTuneOutput(BaseModel):
    """
    A LoRA Tune.  # noqa: E501
    """
    base_checkpoint: LoraTuneCheckpoint = Field(...)
    files: conlist(LoraTuneFile) = Field(..., description="The files used for this LoRA Tune.")
    resize_images: Optional[StrictBool] = None
    seed: Optional[StrictInt] = None
    steps: StrictInt = Field(..., description="The number of steps used for this LoRA Tune.")
    trigger_words: conlist(StrictStr) = Field(..., description="The trigger words used for this tune. As of now, only one trigger word is supported. `List` is used for future-proofing.")
    tune_type: Optional[Any] = Field(None, description="Tune type.")
    __properties = ["base_checkpoint", "files", "resize_images", "seed", "steps", "trigger_words", "tune_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoraTuneOutput:
        """Create an instance of LoraTuneOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of base_checkpoint
        if self.base_checkpoint:
            _dict['base_checkpoint'] = self.base_checkpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # set to None if resize_images (nullable) is None
        # and __fields_set__ contains the field
        if self.resize_images is None and "resize_images" in self.__fields_set__:
            _dict['resize_images'] = None

        # set to None if seed (nullable) is None
        # and __fields_set__ contains the field
        if self.seed is None and "seed" in self.__fields_set__:
            _dict['seed'] = None

        # set to None if tune_type (nullable) is None
        # and __fields_set__ contains the field
        if self.tune_type is None and "tune_type" in self.__fields_set__:
            _dict['tune_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoraTuneOutput:
        """Create an instance of LoraTuneOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoraTuneOutput.parse_obj(obj)

        _obj = LoraTuneOutput.parse_obj({
            "base_checkpoint": LoraTuneCheckpoint.from_dict(obj.get("base_checkpoint")) if obj.get("base_checkpoint") is not None else None,
            "files": [LoraTuneFile.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None,
            "resize_images": obj.get("resize_images"),
            "seed": obj.get("seed"),
            "steps": obj.get("steps"),
            "trigger_words": obj.get("trigger_words"),
            "tune_type": obj.get("tune_type")
        })
        return _obj


