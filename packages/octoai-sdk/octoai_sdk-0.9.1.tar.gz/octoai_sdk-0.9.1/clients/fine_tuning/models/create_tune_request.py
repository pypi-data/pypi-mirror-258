# coding: utf-8

"""
    fine-tuning-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictStr
from clients.fine_tuning.models.details import Details

class CreateTuneRequest(BaseModel):
    """
    The create tune request.  # noqa: E501
    """
    continue_on_rejection: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    details: Details = Field(...)
    name: StrictStr = Field(..., description="The name of the tune.")
    __properties = ["continue_on_rejection", "description", "details", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateTuneRequest:
        """Create an instance of CreateTuneRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # set to None if continue_on_rejection (nullable) is None
        # and __fields_set__ contains the field
        if self.continue_on_rejection is None and "continue_on_rejection" in self.__fields_set__:
            _dict['continue_on_rejection'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTuneRequest:
        """Create an instance of CreateTuneRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateTuneRequest.parse_obj(obj)

        _obj = CreateTuneRequest.parse_obj({
            "continue_on_rejection": obj.get("continue_on_rejection"),
            "description": obj.get("description"),
            "details": Details.from_dict(obj.get("details")) if obj.get("details") is not None else None,
            "name": obj.get("name")
        })
        return _obj


