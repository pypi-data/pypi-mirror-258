# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic.v1 import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class ImageGeneration(BaseModel):
    """
    Represent a generated image.  # noqa: E501
    """
    image_b64: Optional[StrictStr] = Field(None, description="The generated image or None if it was removed for safety.")
    removed_for_safety: StrictBool = Field(..., description="True if the image was removed for safety, False otherwise.")
    seed: StrictInt = Field(..., description="Seed used to generate the image. It can be used to recreate the generation.")
    safety_score: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Safety score of the image generated.")
    __properties = ["image_b64", "removed_for_safety", "seed", "safety_score"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImageGeneration:
        """Create an instance of ImageGeneration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImageGeneration:
        """Create an instance of ImageGeneration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImageGeneration.parse_obj(obj)

        _obj = ImageGeneration.parse_obj({
            "image_b64": obj.get("image_b64"),
            "removed_for_safety": obj.get("removed_for_safety"),
            "seed": obj.get("seed"),
            "safety_score": obj.get("safety_score")
        })
        return _obj


