# coding: utf-8

"""
    fine-tuning-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic.v1 import BaseModel, StrictInt, StrictStr, conlist

class TuneResult(BaseModel):
    """
    Tune result on worker.  # noqa: E501
    """
    number_of_available_assets: Optional[StrictInt] = None
    output_assets: Optional[conlist(StrictStr)] = None
    rejected_assets: Optional[conlist(StrictStr)] = None
    unready_assets: Optional[conlist(StrictStr)] = None
    __properties = ["number_of_available_assets", "output_assets", "rejected_assets", "unready_assets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TuneResult:
        """Create an instance of TuneResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if number_of_available_assets (nullable) is None
        # and __fields_set__ contains the field
        if self.number_of_available_assets is None and "number_of_available_assets" in self.__fields_set__:
            _dict['number_of_available_assets'] = None

        # set to None if output_assets (nullable) is None
        # and __fields_set__ contains the field
        if self.output_assets is None and "output_assets" in self.__fields_set__:
            _dict['output_assets'] = None

        # set to None if rejected_assets (nullable) is None
        # and __fields_set__ contains the field
        if self.rejected_assets is None and "rejected_assets" in self.__fields_set__:
            _dict['rejected_assets'] = None

        # set to None if unready_assets (nullable) is None
        # and __fields_set__ contains the field
        if self.unready_assets is None and "unready_assets" in self.__fields_set__:
            _dict['unready_assets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TuneResult:
        """Create an instance of TuneResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TuneResult.parse_obj(obj)

        _obj = TuneResult.parse_obj({
            "number_of_available_assets": obj.get("number_of_available_assets"),
            "output_assets": obj.get("output_assets"),
            "rejected_assets": obj.get("rejected_assets"),
            "unready_assets": obj.get("unready_assets")
        })
        return _obj


