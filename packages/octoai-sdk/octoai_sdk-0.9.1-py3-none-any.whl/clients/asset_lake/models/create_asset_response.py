# coding: utf-8

"""
    asset-lake-api-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictStr
from clients.asset_lake.models.asset import Asset
from clients.asset_lake.models.transfer_api import TransferApi

class CreateAssetResponse(BaseModel):
    """
    CreateAssetResponse
    """
    asset: Asset = Field(...)
    token: Optional[StrictStr] = Field('', description="Unused. Present for compatibility purposes.")
    transfer_api: TransferApi = Field(...)
    __properties = ["asset", "token", "transfer_api"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAssetResponse:
        """Create an instance of CreateAssetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of asset
        if self.asset:
            _dict['asset'] = self.asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_api
        if self.transfer_api:
            _dict['transfer_api'] = self.transfer_api.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAssetResponse:
        """Create an instance of CreateAssetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAssetResponse.parse_obj(obj)

        _obj = CreateAssetResponse.parse_obj({
            "asset": Asset.from_dict(obj.get("asset")) if obj.get("asset") is not None else None,
            "token": obj.get("token") if obj.get("token") is not None else '',
            "transfer_api": TransferApi.from_dict(obj.get("transfer_api")) if obj.get("transfer_api") is not None else None
        })
        return _obj


