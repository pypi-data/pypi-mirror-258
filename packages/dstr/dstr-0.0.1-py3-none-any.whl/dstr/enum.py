# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_enum.ipynb.

# %% auto 0
__all__ = ['DimChars', 'DimType']

# %% ../nbs/00_enum.ipynb 6
from enum import StrEnum, auto

# %% ../nbs/00_enum.ipynb 8
#| export


# %% ../nbs/00_enum.ipynb 10
#| export


# %% ../nbs/00_enum.ipynb 12
#| export


# %% ../nbs/00_enum.ipynb 14
#| export


# %% ../nbs/00_enum.ipynb 17
class DimChars(StrEnum):
    '''
    Enumeration representing different dimensionality character labels for tensors.

    Members
    -------
    ij : General 2D tensor.
    hw : 2D spatial dimensions (height and width).
    xy : General 2D spatial dimensions.
    
    nhw : Batch of 2D spatial dimensions.
    hwd : Height-Width-Depth for 3D spatial dimensions.
    hwc : Height-Width-Channel for 3D image dimensions.
    ijk : General 3D tensor.
    xyz : General 3D spatial dimensions.
    
    ctp : Channel-Time-Polarization for multi-polarized time series data
    cst : Channel-Spatial-Temporal format, focusing on channels first followed by spatial and temporal dimensions
    dft : Dimension-Frequency-Time for frequency domain data across time
    lvh : Length-Volume-Height for 3D sequences with variable lengths and volumes
    rst : Row-Slice-Time for time series of 2D slices or images
    vct : Volume-Channel-Time for 3D medical imaging data across time
    
    ijkl : General 4D tensor.
    nchw : Tensor in NCHW format.
    nhwc : Tensor in NHWC format.
    thwc : Video in Time-Height-Width-Channel format.

    Examples
    --------
    >>> DimChars.ijk
    DimChars.ijk

    >>> DimChars.nchw.name
    'nchw'
    '''
    ij   = auto()
    '''General 2D tensor''';
    
    hw   = auto()
    '''2D spatial dimensions (height and width)''';
    
    xy   = auto()
    '''General 2D tensor''';
    
    tf   = auto()
    '''2D temporal tensor (time, features)''';
    
    cst  = auto()
    '''Channel-Spatial-Temporal format, focusing on channels first followed by spatial and temporal dimensions.''';
    
    ctp  = auto()
    '''Channel-Time-Polarization for multi-polarized time series data''';
    
    dft  = auto()
    '''Dimension-Frequency-Time for frequency domain data across time''';
    
    ijk  = auto()
    '''General 3D tensor''';
    
    hwd  = auto()
    '''Height-Width-Depth for 3D spatial dimensions''';
    
    hwc  = auto()
    '''Height-Width-Channel for 3D image dimensions''';
    
    lvh  = auto()
    '''Length-Volume-Height for 3D sequences with variable lengths and volumes.''';
    
    nhw  = auto()
    '''Batch of 2D spatial dimensions''';
    
    rst  = auto()
    '''Row-Slice-Time for time series of 2D slices or images''';
    
    vct  = auto()
    '''Volume-Channel-Time for 3D medical imaging data across time''';
    
    xyz  = auto()
    '''General 3D spatial dimensions''';
    
    ijkl  = auto()
    '''General 4D tensor''';
    
    nchw = auto()
    '''Tensor in NCHW format''';
    
    nhwc = auto()
    '''Tensor in NHWC format''';
    
    thwc = auto()
    '''Video in Time-Height-Width-Channel format''';

# %% ../nbs/00_enum.ipynb 19
class DimType(StrEnum):
    '''
    Enumeration representing different types of data represented by tensors.

    Members
    -------
    ten : General tensor.
    arr : Array-like tensor.
    vid : Video data tensor.
    img : Image data tensor.
    mat : General matrix.
    seq : Sequence tensor.
    nlp : Natural Language Processing data.

    Examples
    --------
    >>> DimType.ten
    DimType.ten

    >>> DimType.img.name
    'img'
    '''
    
    ten = auto()
    '''General tensor''';
    
    arr = auto()
    '''Array-like data''';
    
    vid = auto()
    '''Video data tensor''';
    
    img = auto()
    '''Image-data tensor''';
    
    mat = auto()
    '''General matrix''';
    
    seq = auto()
    '''Sequence tensor''';
    
    nlp = auto()
    '''Natural Language Processing data''';


# %% ../nbs/00_enum.ipynb 21
#| export
