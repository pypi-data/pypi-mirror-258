# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_char.ipynb.

# %% auto 0
__all__ = ['dimchars']

# %% ../nbs/03_char.ipynb 6
from functools import singledispatch

# %% ../nbs/03_char.ipynb 8
from typing import (overload, )

# %% ../nbs/03_char.ipynb 10
#| export


# %% ../nbs/03_char.ipynb 12
from nchr import NIL
from nlit import NAME

# %% ../nbs/03_char.ipynb 14
from .enum import DimChars, DimType
from .type import NDim, Dims, Spec, Chars, DType

# %% ../nbs/03_char.ipynb 17
@singledispatch
def _dimchars(ndim: NDim, dtype: DimType = DimType.ten, default: Chars = NIL) -> str:
    match (dtype, ndim):
        case (DimType.ten, 2): return str(DimChars.ij)
        case (DimType.ten, 3): return str(DimChars.ijk)
        case (DimType.ten, 4): return str(DimChars.ijkl)
        
        case (DimType.arr, 2): return str(DimChars.xy)
        case (DimType.arr, 3): return str(DimChars.xyz)
        
        case (DimType.img, 2): return str(DimChars.hw)
        case (DimType.img, 3): return str(DimChars.hwc)
        
        case (DimType.vid, 2): return str(DimChars.tf)
        case (DimType.vid, 3): return str(DimChars.nhw)
        case (DimType.vid, 4): return str(DimChars.thwc)
        
        case (None, _): return str(default) or NIL
        case (_, 2): return str(DimChars.ij)
        case (_, 3): return str(DimChars.ijk)
        case (_, 4): return str(dtype) if dtype else str(default)
        case (default, _): return str(default)
        case (dtype, _): return str(dtype) if dtype else str(default)
        case _: return default or NIL

# %% ../nbs/03_char.ipynb 18
@_dimchars.register(tuple)
@_dimchars.register(list)
def _(dims: Dims, dtype: DType = DimType.ten, default: Chars = NIL) -> str:
    ndim = len(dims)
    chars = _dimchars(ndim, dtype, default)
    return getattr(chars, NAME, chars) if chars else default

# %% ../nbs/03_char.ipynb 20
@overload
def dimchars(dims: Dims, dtype: DType = DimType.ten, default: Chars = NIL) -> str: ...
@overload
def dimchars(ndim: NDim, dtype: DType = DimType.ten, default: Chars = NIL) -> str: ...
def dimchars(spec: Spec, dtype: DType = DimType.ten, default: Chars = NIL):
    '''Returns a string representing the dimension characters for the given dimensions.

    Parameters
    ----------
    spec : int | tuple[int, ...]
        Either the number of dimensions or a tuple representing the dimensions of the tensor.
    
    dtype : DimType, optional
        The type of the tensor to provide context for dimension characters, defaults to DimType.ten.
    
    default : str, optional
        The default value to return if no match is found, defaults to an empty string.
        
    Returns
    -------
    str
        A string representing the dimension characters, or an empty string if no match is found.

    Examples
    --------
    >>> dimchars((3, 3, 3), DimType.ten)
    'ijk'

    >>> dimchars((1, 28, 28, 3), DimType.vid)
    'thwc'
    
    See Also
    --------
    DimName.get
    
    Notes
    -----
    - case `(DimType.ten, 3)` ==> `DimChars.ijk`
    - case `(DimType.arr, 3)` ==> `DimChars.xyz`
    - case `(DimType.vid, 4)` ==> `DimChars.thwc`
    - case `(DimType.vid, 3)` ==> `DimChars.hw`
    - case `(DimType.img, 2)` ==> `DimChars.hw`
    - case `(DimType.img, 3)` ==> `DimChars.nhw`
    '''
    return _dimchars(spec, dtype, default)

# %% ../nbs/03_char.ipynb 23
#| export
