# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_strs.ipynb.

# %% auto 0
__all__ = ['dstr', 'sstr', 'dimsstr', 'sizestr', 'vidstr', 'tenstr', 'tensiz', 'vidsiz']

# %% ../nbs/07_strs.ipynb 6
from functools import wraps

# %% ../nbs/07_strs.ipynb 8
from typing import (Type, Self, Tuple, overload, )

# %% ../nbs/07_strs.ipynb 10
#| export


# %% ../nbs/07_strs.ipynb 12
from nchr import NIL

# %% ../nbs/07_strs.ipynb 14
from .enum import DimChars, DimType
from .type import NDim, Dims, Spec, Chars, DType
from .char import dimchars
from .size import size2str
from .meta import dimsmeta, sizemeta

# %% ../nbs/07_strs.ipynb 17
class dstr(metaclass=dimsmeta):
    '''Dimmensional String Representation
    
    Examples
    --------
    >>> dstr(3), dstr(4), dstr(2, DimType.img)
    ('ijk', 'ijkl', 'hw')
    
    >>> @dstr(DimType.vid, DimChars.thwc)
    ... class vidstr: ...
    ...
    ... @dstr(DimType.ten, DimChars.ijk)
    ... class tenstr: ...
    ... (
    ...     (vidstr(1), vidstr(2), vidstr(3), vidstr(4),),
    ...     (tenstr(1), tenstr(2), tenstr(3), tenstr(4),)
    ... )
    (('vid', 'vid', 'nhw', 'thwc'), ('ten', 'ij', 'ijk', 'ijkl'))
    '''
    @overload
    def __init__(self: Self, dims: Dims, dtype: DType = None, default: Chars = NIL) -> str: ...
    @overload
    def __init__(self: Self, ndim: NDim, dtype: DType = None, default: Chars = NIL) -> str: ...
    @overload
    def __init__(self: Self, spec: Spec, dtype: DType = None, default: Chars = NIL) -> str: ...
    @overload
    def __init__(self: Self, *args, **kwargs) -> Tuple[Type[Self], str]: ...
    def __init__(spec: Spec, dtype: DType = None, default: Chars = NIL) -> Tuple[Type[Self], str]:
        '''Returns a string representing the dimension characters for the given dimensions.

        Parameters
        ----------
        spec : int | tuple[int, ...]
            Either the number of dimensions or a tuple representing the dimensions of the tensor.
        
        dtype : DimType, optional
            The type of the tensor to provide context for dimension characters, defaults to DimType.ten.
        
        default : str, optional
            The default value to return if no match is found, defaults to an empty string.
            
        Returns
        -------
        str
            A string representing the dimension characters, or an empty string if no match is found.
        '''
        return super().__call__(spec, dtype, default)

# %% ../nbs/07_strs.ipynb 19
class sstr(metaclass=sizemeta):
    '''Size String Representation
    
    Examples
    --------
    >>> sstr(3), sstr(4), sstr(2, DimType.img), sstr(2, DimType.img, True)
    ('ijk_d1_d2_d3', 'ijkl_d1_d2_d3_d4', 'hw_d1_d2', 'hw_d1xd2')
    
    >>> @sstr(DimType.vid, DimChars.thwc, times=True)
    ... class vidsiz: ...
    ...
    ... @sstr(DimType.ten, times=False)
    ... class tensiz: ...
    ... (
    ...     (vidsiz(1), vidsiz(2), vidsiz(3), vidsiz(4),),
    ...     (tensiz(1), tensiz(2), tensiz(3), tensiz(4),)
    ... )
    (
        ('vid_d1', 'tf_d1_d2', 'nhw_d1_d2_d3', 'thwc_d1_d2_d3_d4'),
        ('ten_d1', 'ij_d1xd2', 'ijk_d1xd2xd3', 'ijkl_d1xd2xd3xd4')
    )
    '''

# %% ../nbs/07_strs.ipynb 21
@wraps(dstr, updated=())
class dimsstr(dstr): ...

@wraps(sstr, updated=())
class sizestr(sstr): ...

# %% ../nbs/07_strs.ipynb 23
@dstr(DimType.vid, DimChars.thwc)
class vidstr: ...

@dstr(DimType.ten, DimChars.ijk)
class tenstr: ...

@sstr(DimType.ten, times=False)
class tensiz: ...

@sstr(DimType.vid, DimChars.thwc, times=True)
class vidsiz: ...

# %% ../nbs/07_strs.ipynb 35
#| export
