# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_name.ipynb.

# %% auto 0
__all__ = ['DimName']

# %% ../nbs/05_name.ipynb 6
#| export

# %% ../nbs/05_name.ipynb 8
from typing import (overload, )

# %% ../nbs/05_name.ipynb 10
#| export


# %% ../nbs/05_name.ipynb 12
from nchr import NIL

# %% ../nbs/05_name.ipynb 14
from .enum import DimType
from .type import NDim, Dims, Spec, Chars, DType
from .char import dimchars
from .size import size2str

# %% ../nbs/05_name.ipynb 16
class DimName:
    '''Enumeration representing different types of data represented by tensors.
    
    Methods
    -------
    get(dims: tuple[int, ...], dtype: DimType, default: Optional[str] = NIL) -> str
        Gets the dimension name for the specified data type and number of dimensions.
        
    dimchars(dims: int | tuple[int, ...], dtype: DimType = DimType.ten, default: Optional[str] = NIL) -> str
        Returns a string representing the dimension characters for the given dimensions.
        
    size2str(size: Optional[tuple[int, ...]], dtype: DimType = DimType.img, use_cross: bool = False) -> str
        Converts a size tuple to a string representation, optionally including dimension characters.
    '''
    @overload
    def get(cls, dims: Dims, dtype: DType, default: Chars = NIL) -> str: ...
    @overload
    def get(cls, ndim: NDim, dtype: DType, default: Chars = NIL) -> str: ...
    @classmethod
    def get(cls, spec: Spec, dtype: DType, default: Chars = NIL) -> str:
        '''Gets the dimension name for the specified data type and number of dimensions.'''
        return dimchars(spec, dtype, default)
    
    dimchars = dimchars
    size2str = size2str

# %% ../nbs/05_name.ipynb 21
#| export
