[tool.poetry]
name = "fastapi-inject"
version = "0.4.0"
description = "A simple tool to enhance FastAPI's 'Depends' functionality. Enables usage of 'Depends' outside of endpoints or sub-dependencies."
authors = ["Chobshaw <cameron.helsby@live.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/Chobshaw/fastapi-inject"
keywords = ["fastapi", "dependency injection"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Framework :: FastAPI",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.109.0"
httpx = "^0.26.0"
asyncer = "^0.0.4"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
uvicorn = "^0.27.0.post1"
mypy = "^1.8.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Docstrings
    "D",
    # Todo comments
    "TD",
    # Fixme comments
    "FIX",
    # Missing type annotation for 'self'
    "ANN101",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Assert used
    "S101",
    # Missing return type
    "ANN201",
    # Unused function argument
    "ARG001",
    # Magic value used in comparison
    "PLR2004",
]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
    "def __repr__",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    "pass",
    '\.\.\.',
]
