The words module
================

    >>> from pysyte import words

This module handles some english words

    >>> expected = [
    ...     ('cat', 'cats'),
    ...     ('bass', 'basses'),
    ...     ('cheetah', 'cheetahs'),
    ...     ('coach', 'coaches'),
    ...     ('day', 'days'),
    ...     ('deer', 'deer'),
    ...     ('fax', 'faxes'),
    ...     ('fish', 'fish'),
    ...     ('hero', 'heroes'),
    ...     ('house', 'houses'),
    ...     ('human', 'humans'),
    ...     ('knife', 'knives'),
    ...     ('louse', 'lice'),
    ...     ('lunch', 'lunches'),
    ...     ('man', 'men'),
    ...     ('mouse', 'mice'),
    ...     ('piano', 'pianos'),
    ...     ('punch', 'punches'),
    ...     ('rash', 'rashes'),
    ...     ('sheep', 'sheep'),
    ...     ('vacancy', 'vacancies'),
    ...     ('wife', 'wives'),
    ...     ('woman', 'women'),
    ... ]
    >>> for singular, plural in expected:
    ...     assert words.pluralize(singular) == plural, f'{singular} failed'
    ...     assert words.singularize(plural) == singular, f'{plural} failed'
    ...

    >>> words.pluralize('lowlife') == 'lowlifes'
    True


    >>> assert words.singularize('freds') == 'fred'
    >>> assert words.singularize('freddies') == 'freddy'

    >>> assert words.number_name('1') == 'one'
    >>> assert words.number_name(0) == 'zero'
    >>> assert words.number_name(-0) == 'zero'
    >>> assert words.number_name(1) == 'one'
    >>> assert words.number_name(11) == 'eleven'
    >>> assert words.number_name(16) == 'sixteen'
    >>> assert words.number_name(-16) == 'minus sixteen'
    >>> assert words.number_name(20) == 'twenty'
    >>> assert words.number_name(26) == 'twenty-six'
    >>> assert words.number_name(400) == 'four hundred'
    >>> assert words.number_name(606) == 'six hundred and six'
    >>> assert words.number_name(876) == 'eight hundred and seventy-six'
    >>> assert words.number_name(3006) == 'three thousand and six'
    >>> assert words.number_name(3076) == 'three thousand and seventy-six'
    >>> expected = 'three thousand, eight hundred and seventy'
    >>> assert words.number_name(3870) == expected
    >>> expected = 'twenty-three thousand, eight hundred and seventy-six'
    >>> assert words.number_name(23876) == expected
    >>> assert words.number_name(500000) == 'five hundred thousand'
    >>> assert words.number_name(500002) == 'five hundred thousand and two'
    >>> expected = (
    ...     'five hundred and twenty-three thousand, ' 'eight hundred and seventy-six'
    ... )
    >>> assert words.number_name(523876) == expected
    >>> expected = 'minus five hundred and twenty-three thousand, eight hundred and seventy-six'
    >>> assert words.number_name(-523876) == expected
    >>> assert words.number_name(1_000_000) == 'one million'
    >>> assert words.number_name(1_000_001) == 'one million and one'
    >>> assert words.number_name(1_000_100) == 'one million, one hundred'
    >>> assert words.number_name(1_001_000) == 'one million, one thousand'
    >>> expected = 'one million, one thousand and five'
    >>> assert words.number_name(1_001_005) == expected
    >>> expected = 'one million, one thousand and fifty'
    >>> assert words.number_name(1_001_050) == expected
    >>> expected = 'one million, one thousand, five hundred'
    >>> assert words.number_name(1_001_500) == expected
    >>> expected = 'one million, one thousand, five hundred and fifty-five'
    >>> assert words.number_name(1_001_555) == expected
    >>> expected = 'five million, fifty thousand and fifty'
    >>> assert words.number_name(5_050_050) == expected
    >>> expected = 'two hundred and thirty-five million, one hundred and fifty'
    >>> assert words.number_name(235_000_150) == expected
    >>> expected = (
    ...     'nineteen billion, four million, three hundred thousand, ' 'nine hundred'
    ... )
    >>> assert words.number_name(19_004_300_900) == expected
    >>> assert words.number_name(33_000_000_000_000) == 'thirty-three trillion'
    >>> import math
    >>> expected = 'minus three point one four one five nine'
    >>> assert words.number_name(-math.pi).startswith(expected)
