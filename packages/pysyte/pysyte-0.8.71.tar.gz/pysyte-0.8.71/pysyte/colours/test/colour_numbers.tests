The colour_numbers module
=========================

    >>> from pysyte.colours import colour_numbers


More modules for testing
------------------------

    >>> import random

integers
--------

There are 16 small-numbered colours (CGA)
    >>> assert all([bool(0 <= i <= 0x0F) for i in colour_numbers.small_integers()])

integer to ansi
---------------

    >>> small_int = random.randint(0, 15)
    >>> assert colour_numbers.integer_to_ansi(small_int) == small_int

    >>> assert colour_numbers.integer_to_ansi(0x00005F) == 17
    >>> assert colour_numbers.integer_to_ansi(0x000087) == 18
    >>> assert colour_numbers.integer_to_ansi(0x0000AF) == 19
    >>> assert colour_numbers.integer_to_ansi(0x0000D7) == 20
    >>> assert colour_numbers.integer_to_ansi(0x0000FF) == 21

    >>> assert colour_numbers.integer_to_ansi(0x005F00) == 22
    >>> assert colour_numbers.integer_to_ansi(0x008700) == 28
    >>> assert colour_numbers.integer_to_ansi(0x00AF00) == 34
    >>> assert colour_numbers.integer_to_ansi(0x00D700) == 40
    >>> assert colour_numbers.integer_to_ansi(0x00FF00) == 46

    >>> assert colour_numbers.integer_to_ansi(0x5F0000) == 52
    >>> assert colour_numbers.integer_to_ansi(0x870000) == 88
    >>> assert colour_numbers.integer_to_ansi(0xAF0000) == 124
    >>> assert colour_numbers.integer_to_ansi(0xD70000) == 160
    >>> assert colour_numbers.integer_to_ansi(0xFF0000) == 196

    >>> assert (
    ...     colour_numbers.integer_to_html(colour_numbers.ansi_to_int(196)) == '#FF0000'
    ... )

    >>> assert colour_numbers.integer_to_ansi(0xFFFFFE) == 231
    >>> assert colour_numbers.integer_to_ansi(0xFFFFFF) == 231

    >>> assert colour_numbers.integer_to_ansi(0xAFD7FF) == 153
    >>> assert colour_numbers.integer_to_ansi(0x5FAF87) == 72


    >>> assert colour_numbers.integer_to_ansi(0x1C1C1C) == 234
    >>> assert colour_numbers.integer_to_ansi(0xB2B2B2) == 249

    >>> assert (
    ...     colour_numbers.integer_to_html(colour_numbers.ansi_to_int(249)) == '#B2B2B2'
    ... )

Convert to ansi to integer and back
------------------------------------

    >>> # assert all([colour_numbers.integer_to_ansi(colour_numbers.ansi_to_int(i)) == i for i in range(1,255)])

Convert to html to integer and back
-----------------------------------

The next iteration might take a while, so we'll skip a few points
    >>> step = random.randint(0xCC, 0xFF)

Can convert from integer to hex string (html) and back again for any number
    >>> assert all(
    ...     [
    ...         colour_numbers.html_to_int(colour_numbers.integer_to_html(i)) == i
    ...         for i in range(0x000000, 0xFFFFFF, step)
    ...     ]
    ... )

    >>> assert colour_numbers.html_to_int('not a colour code') is None

Can get the integer in 3 parts, for red, green, blue
    >>> r, g, b = colour_numbers.html_to_red_green_blue('#A79')
    >>> i = colour_numbers.html_to_int('#A79')
    >>> assert r * 256 * 256 + g * 256 + b == i

NINO
    >>> assert colour_numbers.html_to_int('') == 0
    >>> assert colour_numbers.html_to_red_green_blue('') == (None, None, None)

convert ansi to html and back
-----------------------------

In converting ANSI codes into html codes and back again some do not pass through unchanged
    because
        the "pure colours" have entries for numbers < 16 and for other numbers
        e.g. '#0000FF' is both 21 and 12
        (or - "both 12 and 21 give '#0000FF')

Test method to recognise pure colours
    >>> def pure_colour(string):
    ...     return string == '#808080' or all([bool(c in '0F') for c in string[1:]])
    ...

By "pure colour" I mean anything with only 0 and F, and Silver ('#808080')
    >>> assert pure_colour('#808080')
    >>> assert pure_colour('#FF0000')
    >>> assert pure_colour('#FFFF00')
    >>> assert not pure_colour('#005f87')

So now we can test that (with the exception of such pure colours)
    all colours pass through ANSI -> HTML -> ANSI
    >>> for i in range(1, 255):
    ...     html = colour_numbers.ansi_to_html(i)
    ...     if pure_colour(html):
    ...         continue
    ...     if colour_numbers.html_to_ansi(html) != i:
    ...         break
    ...

    >>> assert colour_numbers.small_ansi_to_html(0x0A) == '#00FF00'
    >>> assert colour_numbers.small_ansi_to_html(0x10) is None
