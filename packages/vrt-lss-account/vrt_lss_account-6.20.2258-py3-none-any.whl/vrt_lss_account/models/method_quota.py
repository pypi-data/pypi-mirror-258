# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg) 

    The version of the OpenAPI document: 6.20.2258
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from vrt_lss_account.models.method_group import MethodGroup
from typing import Optional, Set
from typing_extensions import Self

class MethodQuota(BaseModel):
    """
    Quota for the service method group.  If any of the quotas are exceeded, the request is not returned with the quota exceeded error. 
    """ # noqa: E501
    method_group: MethodGroup
    points_per_request: Annotated[int, Field(le=1000000, strict=True, ge=0)] = Field(description="Maximum number of non-unique points per request.")
    points_per_day: Annotated[int, Field(le=100000000, strict=True, ge=0)] = Field(description="Maximum number of non-unique points per request per day.")
    points_per_date_window: Optional[Annotated[int, Field(le=100000000, strict=True, ge=0)]] = Field(default=None, description="The maximum total number of non-unique points for the specified time period, multiple of a day. If the time period equals to a day, this parameter is not taken into account, since it is responsible for one day ")
    max_concurrent_execution: Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]] = Field(default=None, description="The maximum total number of concurrent method execution. ")
    __properties: ClassVar[List[str]] = ["method_group", "points_per_request", "points_per_day", "points_per_date_window", "max_concurrent_execution"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MethodQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if points_per_date_window (nullable) is None
        # and model_fields_set contains the field
        if self.points_per_date_window is None and "points_per_date_window" in self.model_fields_set:
            _dict['points_per_date_window'] = None

        # set to None if max_concurrent_execution (nullable) is None
        # and model_fields_set contains the field
        if self.max_concurrent_execution is None and "max_concurrent_execution" in self.model_fields_set:
            _dict['max_concurrent_execution'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MethodQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "method_group": obj.get("method_group"),
            "points_per_request": obj.get("points_per_request"),
            "points_per_day": obj.get("points_per_day"),
            "points_per_date_window": obj.get("points_per_date_window"),
            "max_concurrent_execution": obj.get("max_concurrent_execution")
        })
        return _obj


