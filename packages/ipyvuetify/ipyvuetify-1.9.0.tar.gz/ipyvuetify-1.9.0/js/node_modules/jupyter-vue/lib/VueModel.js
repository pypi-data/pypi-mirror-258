function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint camelcase: off */
import { DOMWidgetModel, unpack_models } from '@jupyter-widgets/base';
export class VueModel extends DOMWidgetModel {
  defaults() {
    return _objectSpread({}, super.defaults(), {}, {
      _jupyter_vue: null,
      _model_name: 'VueModel',
      _view_name: 'VueView',
      _view_module: 'jupyter-vue',
      _model_module: 'jupyter-vue',
      _view_module_version: '^0.0.3',
      _model_module_version: '^0.0.3',
      _metadata: null,
      children: undefined,
      slot: null,
      _events: null,
      v_model: '!!disabled!!',
      style_: null,
      class_: null,
      attributes: null,
      v_slots: null,
      v_on: null
    });
  }

}
VueModel.serializers = _objectSpread({}, DOMWidgetModel.serializers, {
  children: {
    deserialize: unpack_models
  },
  v_slots: {
    deserialize: unpack_models
  }
});