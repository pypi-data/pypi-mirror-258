import "core-js/modules/es.array.iterator";
import "core-js/modules/es.string.replace";
import "core-js/modules/es.string.starts-with";
import "core-js/modules/web.dom-collections.iterator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createObjectForNestedModel, eventToObject, vueRender } from './VueRenderer'; // eslint-disable-line import/no-cycle

import { VueModel } from './VueModel';
import { VueTemplateModel } from './VueTemplateModel';
export function vueTemplateRender(createElement, model, parentView) {
  return createElement(createComponentObject(model, parentView));
}

function createComponentObject(model, parentView) {
  if (model instanceof VueModel) {
    return {
      render(createElement) {
        return vueRender(createElement, model, parentView, {});
      }

    };
  }

  if (!(model instanceof VueTemplateModel)) {
    return createObjectForNestedModel(model, parentView);
  }

  if (model.get('css')) {
    const style = document.createElement('style');
    style.id = model.cid;
    style.innerHTML = model.get('css');
    document.head.appendChild(style);
    parentView.once('remove', () => {
      document.head.removeChild(style);
    });
  } // eslint-disable-next-line no-new-func


  const methods = model.get('methods') ? Function("return ".concat(model.get('methods').replace('\n', ' ')))() : {}; // eslint-disable-next-line no-new-func

  const data = model.get('data') ? Function("return ".concat(model.get('data').replace('\n', ' ')))() : {};
  return {
    data() {
      return _objectSpread({}, data, {}, createDataMapping(model));
    },

    created() {
      addModelListeners(model, this);
    },

    watch: createWatches(model, parentView),
    methods: _objectSpread({}, methods, {}, createMethods(model, parentView)),
    components: createComponents(model.get('components') || {}, parentView),
    template: trimTemplateTags(model.get('template'))
  };
}

function trimTemplateTags(template) {
  return template.replace(/^\s*<template>/ig, '').replace(/<\/template>\s*$/ig, '');
}

function createDataMapping(model) {
  return model.keys().filter(prop => !prop.startsWith('_') && !['events', 'template', 'components'].includes(prop)).reduce((result, prop) => {
    result[prop] = model.get(prop); // eslint-disable-line no-param-reassign

    return result;
  }, {});
}

function addModelListeners(model, vueModel) {
  model.keys().filter(prop => !prop.startsWith('_') && !['v_model', 'components'].includes(prop)) // eslint-disable-next-line no-param-reassign
  .forEach(prop => model.on("change:".concat(prop), () => {
    vueModel[prop] = model.get(prop);
  }));
}

function createWatches(model, parentView) {
  return model.keys().filter(prop => !prop.startsWith('_') && !['events', 'template', 'components'].includes(prop)).reduce((result, prop) => {
    result[prop] = value => {
      // eslint-disable-line no-param-reassign
      model.set(prop, value === undefined ? null : value);
      model.save_changes(model.callbacks(parentView));
    };

    return result;
  }, {});
}

function createMethods(model, parentView) {
  return model.get('events').reduce((result, event) => {
    // eslint-disable-next-line no-param-reassign
    result[event] = value => model.send({
      event,
      data: eventToObject(value)
    }, model.callbacks(parentView));

    return result;
  }, {});
}

function createComponents(components, parentView) {
  return Object.entries(components).reduce((result, _ref) => {
    let [name, model] = _ref;
    // eslint-disable-next-line no-param-reassign
    result[name] = createComponentObject(model, parentView);
    return result;
  }, {});
}