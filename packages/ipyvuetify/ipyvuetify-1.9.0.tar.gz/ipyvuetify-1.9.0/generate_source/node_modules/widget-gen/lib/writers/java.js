"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const template_1 = require("./template");
const core_1 = require("../core");
/**
 * A writer for Java based widgets
 */
class JavaWriter extends template_1.TemplateWriter {
    /**
     * Create a Java writer
     */
    constructor(output, options = {}) {
        super(output, Object.assign({ fileExt: 'java', template: path.resolve(__dirname, '../../templates/java.njk') }, options));
        this.env.addFilter('camelcase', camelCase);
        this.env.addFilter('fromlower', fromLower);
    }
    /**
     * Write out a sequence of widget definitions to disk.
     *
     * @param filename The filename to save to.
     * @param widgets The widget definitions to write.
     */
    write(filename, widgets) {
        if (widgets.length > 1 && !this.outputMultiple) {
            throw new Error('Cannot write multiple widget definitions to one Java file!');
        }
        return super.write(filename, widgets);
    }
    javatype(attr) {
        if (!attr) {
            return 'Object';
        }
        switch (attr.type) {
            case 'string': {
                return 'String';
            }
            case 'boolean': {
                return 'boolean';
            }
            case 'int': {
                return 'int';
            }
            case 'float': {
                return 'double';
            }
            case 'array': {
                return 'List';
            }
            case 'object': {
                return 'Map<String, Serializable>';
            }
            case 'widgetRef': {
                if (Array.isArray(attr.widgetType)) {
                    // For widget refs that can be one of multiple types,
                    // use the known common base:
                    return 'Widget';
                }
                return attr.widgetType;
            }
            default: {
                return 'Object';
            }
        }
    }
    transformState(data) {
        data = super.transformState(data);
        data.package = '<placeholderPackageName>';
        data.widgets = data.widgets.map((widget) => {
            let { properties } = widget;
            return Object.assign({}, widget, { properties: properties ? Object.keys(properties).reduce((res, key) => {
                    let attr = properties[key];
                    res[key] = Object.assign({}, attr, { javatype: this.javatype(attr), defaultValue: formatDefault(attr), initializer: initializer(key, attr) });
                    return res;
                }, {}) : properties });
        });
        return data;
    }
    finalize() {
        return super.finalize();
    }
}
exports.JavaWriter = JavaWriter;
function camelCase(str) {
    let parsed_str = '';
    const split = str.split("_");
    for (let word of split) {
        parsed_str += word.charAt(0).toUpperCase() + word.slice(1);
    }
    return parsed_str;
}
function fromLower(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
}
function convertValue(value) {
    if (value === true) {
        return 'true';
    }
    else if (value === false) {
        return 'false';
    }
    else if (value === null) {
        return 'null';
    }
    else if (value === undefined) {
        return 'null';
    }
    else if (Array.isArray(value)) {
        return `${value.map(v => convertValue(v)).join(', ')}`;
    }
    else if (typeof value === 'string') {
        return `"${value.toString()}"`;
    }
    return value.toString();
}
/**
 * Transform the default value.
 */
function formatDefault(data, recursive = false) {
    let res;
    if (data === undefined) {
        // Attribute definition is in simplified form
        res = convertValue(data);
    }
    else {
        // Atrtibute definition is a full specification object
        if (core_1.Attributes.isUnion(data)) {
            // Use the default from the first possible union type:
            res = formatDefault(data.oneOf[0], true);
        }
        else {
            switch (data.type) {
                case 'object':
                    if (data.default === null || data.default === undefined) {
                        res = 'null';
                    }
                    else {
                        res = 'new HashMap<String, Serializable>()';
                    }
                    break;
                case 'array':
                    let items = data.items;
                    if (items === undefined) {
                        res = `new ArrayList<>()`;
                    }
                    else if (Array.isArray(items)) {
                        if (data.default !== undefined) {
                            res = (`Arrays.asList(${convertValue(data.default)})`);
                        }
                        else {
                            res = `new ArrayList<>()`;
                        }
                    }
                    else {
                        res = `Arrays.asList(${formatDefault(items, true)}))`;
                    }
                    break;
                case 'widgetRef':
                    if (data.default === null || data.default === undefined) {
                        res = 'null';
                    }
                    else {
                        res = `new ${data.widgetType}()`;
                    }
                    break;
                case 'ndarray':
                    // TODO: Make a Java package for ipydatawidgets
                    res = `null`;
                    break;
                case 'dataunion':
                    // TODO: Make a Java package for ipydatawidgets
                    res = `null`;
                    break;
                default:
                    res = convertValue(data.default);
            }
        }
    }
    return res;
}
/**
 * Create an initializer block, or return null if no block is needed.
 */
function initializer(key, data) {
    let res = null;
    if (data !== undefined) {
        // Attribute definition is a full specification object
        if (core_1.Attributes.isUnion(data)) {
            // Use the default from the first possible union type:
            res = initializer(key, data.oneOf[0]);
        }
        else if (data.type === 'object') {
            if (data.default !== null && data.default !== undefined) {
                // This should also get an initializer if there is a default value!
                const keys = Object.keys(data.default);
                if (keys.length > 0) {
                    const lines = ['{'];
                    for (let dkey of keys) {
                        lines.push(`    ${fromLower(camelCase(key))}.put("${dkey}", ${formatDefault(data.default[dkey])});`);
                    }
                    lines.push('  }');
                    res = lines.join('\n');
                }
            }
        }
    }
    return res;
}
//# sourceMappingURL=java.js.map