"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Check whether the attribute defintion is for a union type.
 */
function isUnionAttribute(attribute) {
    return !!attribute && typeof attribute === 'object' && 'oneOf' in attribute && attribute.oneOf !== undefined;
}
exports.isUnionAttribute = isUnionAttribute;
/**
 * Check whether the attribute defintion is for a widget reference type.
 */
function isWidgetRef(data) {
    return !!data && typeof data === 'object' &&
        !isUnionAttribute(data) && data.type === 'widgetRef';
}
exports.isWidgetRef = isWidgetRef;
/**
 * Check whether the attribute defintion is for an array/sequence type.
 */
function isArrayAttribute(data) {
    return !!data && typeof data === 'object' &&
        !isUnionAttribute(data) && data.type === 'array';
}
exports.isArrayAttribute = isArrayAttribute;
/**
 * Check whether the attribute defintion is for an ndarray type.
 */
function isNDArray(data) {
    return !!data && typeof data === 'object' &&
        !isUnionAttribute(data) && data.type === 'ndarray';
}
exports.isNDArray = isNDArray;
/**
 * Check whether the attribute defintion is for an dataunion type.
 */
function isDataUnion(data) {
    return !!data && typeof data === 'object' &&
        !isUnionAttribute(data) && data.type === 'dataunion';
}
exports.isDataUnion = isDataUnion;
function translateToInternal(attribute) {
    if (typeof attribute === 'string') {
        return {
            type: 'string',
            default: attribute,
        };
    }
    else if (typeof attribute === 'number') {
        if (Number.isInteger(attribute)) {
            return {
                type: 'int',
                default: attribute,
            };
        }
        return {
            type: 'float',
            default: attribute,
        };
    }
    else if (typeof attribute === 'boolean') {
        return {
            type: 'boolean',
            default: attribute,
        };
    }
    else if (attribute === null) {
        throw new Error('Property is simply defined as "null", which is invalid');
    }
    else if (attribute === undefined) {
        return undefined;
    }
    else if (isUnionAttribute(attribute)) {
        return Object.assign({ type: 'union', oneOf: attribute.oneOf.map((a) => translateToInternal(a)) }, attribute.allowNull && { allowNull: attribute.allowNull }, { default: attribute.default });
    }
    else if (isArrayAttribute(attribute)) {
        let items;
        if (attribute.items === undefined) {
            items = undefined;
        }
        else if (Array.isArray(attribute.items)) {
            items = attribute.items.map((a) => translateToInternal(a));
        }
        else {
            items = translateToInternal(attribute.items);
        }
        return Object.assign({}, attribute, { items });
    }
    else {
        return attribute;
    }
}
exports.translateToInternal = translateToInternal;
function translatePropertiesToInternal(props) {
    if (!props) {
        return props;
    }
    return Object.keys(props).reduce((res, key) => {
        res[key] = translateToInternal(props[key]);
        return res;
    }, {});
}
exports.translatePropertiesToInternal = translatePropertiesToInternal;
//# sourceMappingURL=formatTypes.js.map