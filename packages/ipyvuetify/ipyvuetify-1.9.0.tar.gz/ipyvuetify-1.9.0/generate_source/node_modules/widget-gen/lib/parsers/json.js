"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const base_1 = require("./base");
const formatTypes_1 = require("./formatTypes");
const setMethods_1 = require("../setMethods");
/**
 * Parser for our custom JSON schema format.
 */
class JsonParser extends base_1.Parser {
    start() {
        return fs.readFile(this.input).then((f) => {
            this.processDefinition(JSON.parse(f.toString()));
        });
    }
    processDefinition(data) {
        if (data.widgets === undefined) {
            throw new Error('Missing "widgets" key in definition file');
        }
        this._names = new setMethods_1.MSet(Object.keys(data.widgets));
        for (let name of Object.keys(data.widgets)) {
            let def = data.widgets[name];
            let properties = formatTypes_1.translatePropertiesToInternal(def.properties);
            let refs = this.resolveInternalRefs(properties);
            if (def.inherits) {
                // Include local ancestors in refs
                refs = refs.union(this.widgetNames.intersection(def.inherits));
            }
            let widget = Object.assign({}, def, { properties,
                name, localDependencies: [...refs], 
                // Default base class:
                inherits: def.inherits ? def.inherits : ['Widget'] });
            this._newWidget.emit(widget);
        }
    }
    get widgetNames() {
        return this._names;
    }
}
exports.JsonParser = JsonParser;
//# sourceMappingURL=json.js.map