"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const parsers_1 = require("./parsers");
const writers_1 = require("./writers");
function makeParser(filename, parserName) {
    if (parserName !== undefined) {
        switch (parserName.toLowerCase()) {
            case 'json':
                return new parsers_1.JsonParser(filename);
            case 'py':
            case 'python':
                return new parsers_1.PythonParser(filename);
            default:
                throw new Error(`Unknown parser name: ${parserName}`);
        }
    }
    switch (path.extname(filename)) {
        case '':
        case '.json':
            return new parsers_1.JsonParser(filename);
        case '.py':
            return new parsers_1.PythonParser(filename);
        default:
            throw new Error(`Unknown file extension for file: ${filename}`);
    }
}
function run(filename, languages, options) {
    const { parserName, templateFile, fileExt } = options;
    const output = options.output || '.';
    let parser = makeParser(filename, parserName);
    let instances = [];
    for (let language of languages) {
        let writerCtor = writers_1.writers[language];
        if (writerCtor === undefined) {
            throw new Error(`Unknown language: ${language}. ` +
                `Valid languages: ${Object.keys(writers_1.writers)}.`);
        }
        let options = {};
        if (templateFile) {
            options.template = templateFile;
        }
        if (fileExt) {
            options.fileExt = fileExt;
        }
        let writer = new writerCtor(output, options);
        instances.push(writer);
        parser.newWidget.connect(writer.onWidget, writer);
    }
    return parser.start().then(() => {
        return Promise.all(instances.map((writer) => {
            return writer.finalize();
        }));
    }, (error) => {
        console.log(error);
    });
}
exports.run = run;
//# sourceMappingURL=run.js.map