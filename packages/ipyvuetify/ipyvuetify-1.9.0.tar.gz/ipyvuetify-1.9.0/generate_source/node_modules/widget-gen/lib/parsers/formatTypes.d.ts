import { Attributes } from '../core';
/**
 * Interface of the JSON definition file root node.
 */
export interface IDefinition {
    widgets: {
        [key: string]: IWidgetJSON;
    };
}
/**
 * A widget definition structure.
 */
export interface IWidgetJSON {
    inherits?: string[];
    properties?: {
        [key: string]: AttributeDef;
    };
    help?: string;
}
/**
 * Base structure for all attribute definitions.
 */
export interface IBaseAttributeJSON {
    help?: string;
    allowNull?: boolean;
}
/**
 * Base structure for all typed attribute definitions.
 */
export interface ITypedAttributeJSON extends IBaseAttributeJSON {
    type: string;
}
/**
 * Array/sequence attribute definition.
 */
export interface IArrayAttributeJSON extends ITypedAttributeJSON {
    type: 'array';
    default?: any[] | null;
    items?: IAttributeJSON[] | IAttributeJSON;
}
/**
 * Widget reference attribute definition.
 */
export interface IWidgetRefAttributeJSON extends ITypedAttributeJSON {
    type: 'widgetRef';
    widgetType: string | string[];
    default?: null;
}
/**
 * Object/hashmap/dictionary attribute definition.
 */
export interface IObjectAttributeJSON extends ITypedAttributeJSON {
    type: 'object';
    default?: any | null;
}
/**
 * String attribute definition.
 */
export interface IStringAttributeJSON extends ITypedAttributeJSON {
    type: 'string';
    default?: string | null;
}
/**
 * Floating point number attribute definition.
 */
export interface IFloatAttributeJSON extends ITypedAttributeJSON {
    type: 'float';
    default?: number | null;
}
/**
 * Integer attribute definition.
 */
export interface IIntegerAttributeJSON extends ITypedAttributeJSON {
    type: 'int';
    default?: number | null;
}
/**
 * Boolean attribute definition.
 */
export interface IBooleanAttributeJSON extends ITypedAttributeJSON {
    type: 'boolean';
    default?: boolean | null;
}
/**
 * Numpy.ndarray-like attribute definition.
 */
export interface INDArrayAttributeJSON extends ITypedAttributeJSON {
    type: 'ndarray';
    default?: any[] | null;
    shape?: number[];
    dtype: string;
}
/**
 * Dataunion attribute definition.
 *
 * See jupyter-datawidgets for details.
 */
export interface IDataUnionAttributeJSON extends ITypedAttributeJSON {
    type: 'dataunion';
    default?: any[] | null;
    shape?: number[];
    dtype: string;
}
/**
 * Union attribute definition.
 */
export interface IUnionAttributeJSON extends IBaseAttributeJSON {
    oneOf: NNAttributeDef[];
    default?: any | null;
}
/**
 * An extended attribute definition.
 */
export declare type IAttributeJSON = (IArrayAttributeJSON | IObjectAttributeJSON | IWidgetRefAttributeJSON | IStringAttributeJSON | IFloatAttributeJSON | IIntegerAttributeJSON | IBooleanAttributeJSON | IUnionAttributeJSON | INDArrayAttributeJSON | IDataUnionAttributeJSON);
export declare type NNAttributeDef = string | number | boolean | IAttributeJSON;
/**
 * An attribute definition.
 */
export declare type AttributeDef = NNAttributeDef | null | undefined;
export declare type Properties = {
    [key: string]: AttributeDef;
};
/**
 * Check whether the attribute defintion is for a union type.
 */
export declare function isUnionAttribute(attribute: AttributeDef): attribute is IUnionAttributeJSON;
/**
 * Check whether the attribute defintion is for a widget reference type.
 */
export declare function isWidgetRef(data: AttributeDef): data is IWidgetRefAttributeJSON;
/**
 * Check whether the attribute defintion is for an array/sequence type.
 */
export declare function isArrayAttribute(data: AttributeDef): data is IArrayAttributeJSON;
/**
 * Check whether the attribute defintion is for an ndarray type.
 */
export declare function isNDArray(data: AttributeDef): data is INDArrayAttributeJSON;
/**
 * Check whether the attribute defintion is for an dataunion type.
 */
export declare function isDataUnion(data: AttributeDef): data is IDataUnionAttributeJSON;
/**
 * Translate an attribute definition from its form on disk, to the
 * representation used internally (more verbose, no shortcuts).
 *
 * @param attribute The attribute definition to translate.
 * @returns The translated attribute
 */
export declare function translateToInternal(attribute: NNAttributeDef): Attributes.DefinedAttribute;
export declare function translateToInternal(attribute: null | undefined): undefined;
export declare function translateToInternal(attribute: AttributeDef): Attributes.Attribute;
export declare function translatePropertiesToInternal(props: Properties | undefined): Attributes.Properties | undefined;
