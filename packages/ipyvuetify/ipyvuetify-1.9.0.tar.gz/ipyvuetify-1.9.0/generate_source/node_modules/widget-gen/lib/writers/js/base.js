"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const template_1 = require("../template");
const core_1 = require("../../core");
const utils_1 = require("./utils");
/**
 * Javascript ES6 code writer.
 */
class BaseJSWriter extends template_1.TemplateWriter {
    constructor(output, options) {
        super(output, Object.assign({ fileExt: 'js' }, options));
    }
    transformState(data) {
        data = super.transformState(data);
        data.widgets = data.widgets.map((widget) => {
            let { inherits, properties } = widget;
            if (inherits.length > 1) {
                console.warn(`Cannot use multiple inheritance for ${name} with JS.` +
                    `Dropping ancestors: ${inherits.slice(1)}`);
            }
            const serializers = {};
            if (properties) {
                for (let key of Object.keys(properties)) {
                    if (core_1.Attributes.isDataUnion(properties[key])) {
                        serializers[key] = 'data_union_serialization';
                    }
                    else if (core_1.Attributes.isNDArray(properties[key])) {
                        serializers[key] = 'array_serialization';
                    }
                    else if (core_1.hasWidgetRef(properties[key])) {
                        serializers[key] = '{ deserialize: unpack_models }';
                    }
                }
            }
            return Object.assign({}, widget, { properties: properties ? Object.keys(properties).reduce((res, key) => {
                    let attr = properties[key];
                    res[key] = Object.assign({}, attr, { default: utils_1.getDefaultValue(attr) });
                    return res;
                }, {}) : properties, inherits: inherits.slice(0, 1), serializers });
        });
        return data;
    }
    filenameForIndex() {
        return path.join(this.output, `index.${this.fileExt}`);
    }
}
exports.BaseJSWriter = BaseJSWriter;
//# sourceMappingURL=base.js.map