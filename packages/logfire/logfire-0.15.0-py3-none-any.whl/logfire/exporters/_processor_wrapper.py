from __future__ import annotations

from opentelemetry import context
from opentelemetry.sdk.trace import ReadableSpan, Span, SpanProcessor

from logfire._constants import ATTRIBUTES_MESSAGE_KEY


class SpanProcessorWrapper(SpanProcessor):
    """Wrapper around other processors to intercept starting and ending spans with our own global logic.

    Suppresses starting/ending if the current context has a `suppress_instrumentation` value.
    Tweaks the send/receive span names generated by the ASGI middleware.
    """

    def __init__(self, processor: SpanProcessor) -> None:
        self.processor = processor

    def on_start(
        self,
        span: Span,
        parent_context: context.Context | None = None,
    ) -> None:
        if context.get_value('suppress_instrumentation'):
            return
        self.processor.on_start(span, parent_context)

    def on_end(self, span: ReadableSpan) -> None:
        if context.get_value('suppress_instrumentation'):
            return
        span = _tweak_asgi_span_name(span)
        self.processor.on_end(span)

    def shutdown(self) -> None:
        self.processor.shutdown()

    def force_flush(self, timeout_millis: int = 30000) -> bool:
        return self.processor.force_flush(timeout_millis)


def _tweak_asgi_span_name(span: ReadableSpan) -> ReadableSpan:
    """Make the name/message of spans generated by OTEL's ASGI middleware more useful.

    For example, a single request will typically generate two 'send' spans with the same message,
    e.g. 'GET /foo http send'. This function may add part of the ASGI event type to the name to make it more useful,
    so instead it shows e.g. 'http send response.start' and 'http send response.body'.
    """
    instrumentation_scope = span.instrumentation_scope
    if not (instrumentation_scope and instrumentation_scope.name == 'opentelemetry.instrumentation.asgi'):
        return span

    if not (name := span.name).endswith(
        (
            ' http send',
            ' http receive',
            ' websocket send',
            ' websocket receive',
        )
    ):
        return span

    attributes = span.attributes or {}
    typ = attributes.get('type')
    if (
        not (isinstance(typ, str) and typ.startswith(('http.', 'websocket.')))
        # No point in adding anything in this case, otherwise it'd say e.g. 'websocket send send'.
        # No other event types in https://asgi.readthedocs.io/en/latest/specs/www.html are redundant like this.
        or typ in ('websocket.send', 'websocket.receive')
    ):
        return span

    # Strip the 'http.' or 'websocket.' prefix from the event type and add it to the span name.
    new_name = f'{name} {typ.split(".", 1)[1]}'
    if attributes.get(ATTRIBUTES_MESSAGE_KEY) == name:  # this should usually be the case
        attributes = {**attributes, ATTRIBUTES_MESSAGE_KEY: new_name}

    return ReadableSpan(
        name=new_name,
        context=span.context,
        parent=span.parent,
        resource=span.resource,
        attributes=attributes,
        events=span.events,
        links=span.links,
        status=span.status,
        kind=span.kind,
        start_time=span.start_time,
        end_time=span.end_time,
        instrumentation_scope=instrumentation_scope,
    )
