# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_smpl.ipynb.

# %% auto 0
__all__ = ['groupget', 'sample']

# %% ../nbs/02_smpl.ipynb 6
import random
from itertools import takewhile, accumulate

# %% ../nbs/02_smpl.ipynb 8
from typing import Tuple, Union

# %% ../nbs/02_smpl.ipynb 11
#| export

# %% ../nbs/02_smpl.ipynb 13
try: import numpy as np
except ImportError: ...

try: import pandas as pd
except ImportError: ...

# %% ../nbs/02_smpl.ipynb 15
#| export


# %% ../nbs/02_smpl.ipynb 17
#| export


# %% ../nbs/02_smpl.ipynb 19
from nlit import SAMPLES
from ltyp import ints, groupkey, array, tensor, device as ptdevice, dataframe
from asto import asten

# %% ../nbs/02_smpl.ipynb 21
#| export


# %% ../nbs/02_smpl.ipynb 23
def groupget(
    df: dataframe,
    group: groupkey, 
    groupby: str = SAMPLES,
    index: str = SAMPLES, 
    set_index: bool = True
) -> array:    
    sub = df.groupby(groupby).get_group(group)
    if set_index: sub = sub.set_index(index)        
    return sub

def sample(
    df: dataframe, 
    
    group: groupkey, 
    groupby: str = SAMPLES,
    index: str = SAMPLES, 
    set_index: bool = True,
        
    size: ints = (100, ), 
    replace: bool = False,
    
    cpu: bool = False, 
    mps: bool = False, 
    cuda: bool = False, 
    device: ptdevice = None,
) -> Union[array, tensor]:
    
    if index is None: index = groupby        
    sub = groupget(df, group, groupby, index, set_index)    
    
    idx = np.arange(sub.shape[0])
    sub = sub[np.random.choice(idx, size=size, replace=replace)]
        
    if any((device, cpu, mps, cuda)):
        return asten(sub, device=device, cpu=cpu, mps=mps, cuda=cuda)    
    return sub

# %% ../nbs/02_smpl.ipynb 25
#| export
