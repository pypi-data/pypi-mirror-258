# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_util.ipynb.

# %% auto 0
__all__ = ['percent', 'ipercent', 'idxstep', 'idxperm', 'pair']

# %% ../nbs/01_util.ipynb 6
import random
from itertools import takewhile, accumulate

# %% ../nbs/01_util.ipynb 8
from typing import Iterable

# %% ../nbs/01_util.ipynb 11
#| export

# %% ../nbs/01_util.ipynb 13
try: import numpy as np
except ImportError: ...

try: import pandas as pd
except ImportError: ...

# %% ../nbs/01_util.ipynb 15
#| export


# %% ../nbs/01_util.ipynb 17
#| export


# %% ../nbs/01_util.ipynb 19
from ltyp import ints

# %% ../nbs/01_util.ipynb 21
from .seed import seedall

# %% ../nbs/01_util.ipynb 23
def percent(p: float, digits: int = 3) -> float:
    return round(p if (p := abs(p)) < 1 else p / 100, digits)

def ipercent(total: int = 1, p: float = 1., digits: int = 3) -> int:
    return int(total * percent(p, digits))

def idxstep(total: int, *percents: float, digits: int = 3) -> tuple[tuple[int, int], ...]:
    pints = [ipercent(total, pct, digits) for pct in percents]    
    if sum(pints) < total: pints.append(total - sum(pints))
    asums = takewhile(lambda s: s <= total, accumulate(pints))
    return list((idx-off, idx) for off, idx in zip(pints, asums))

def idxperm(total: int, *percents: float, seed: int = 3) -> tuple[ints, ...]:
    idx = list(range(total))
    seedall(seed)
    random.shuffle(idx)
    return tuple(idx[a:b] for a, b in idxstep(total, *percents))

# %% ../nbs/01_util.ipynb 24
def pair(a: ints, n: int = 2, i: int = 1) -> tuple[ints, ...]:
    '''Pair numbers in an array
    
    Parameters
    ----------
    a: nums
        array of numbers
        
    n: int
        number to pair in each tuple
        
    i: int
        number to increment index by in each tuple
        
    Returns
    -------
    tuple[nums, ...]
        tuple of paired numbers
        
    Examples
    --------
    >>> pair(np.arange(1, 6), 2)
    [(1, 2), (2, 3), (3, 4), (4, 5)]
    
    >>> pair(np.arange(1, 6), 3)
    [(1, 2, 3), (2, 3, 4), (3, 4, 5)]
    
    >>> pair(np.arange(1, 6), 2, 2)
    [(1, 3), (2, 4), (3, 5)]
    '''
    if not isinstance(a, Iterable): a = [a]
    return tuple(zip(a, *(a[(i * _):] for _ in range(1, n))))

# %% ../nbs/01_util.ipynb 26
#| export
