# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/30_adjs.ipynb.

# %% auto 0
__all__ = ['addz', 'catx', 'negcats', 'npxy', 'addx', 'dfxy']

# %% ../nbs/30_adjs.ipynb 6
#| export


# %% ../nbs/30_adjs.ipynb 8
from typing import Tuple

# %% ../nbs/30_adjs.ipynb 11
#| export

# %% ../nbs/30_adjs.ipynb 13
try: import numpy as np
except ImportError: ...

try: import pandas as pd
except ImportError: ...

try: import matplotlib.pyplot as plt
except ImportError: ...

try: import seaborn as sns
except ImportError: ...

# %% ../nbs/30_adjs.ipynb 15
try: import torch
except ImportError: ...

try: import pytorch_lightning as pl
except ImportError: ...

# %% ../nbs/30_adjs.ipynb 17
from ltyp import real, intq

# %% ../nbs/30_adjs.ipynb 19
from .atyp import XYArray, LabelArray
from .seed import seedall
from .data import catdists
from .trig import rotate, ntheta, catrad, chord
from .poly import orbit, circle, subring, diamond

# %% ../nbs/30_adjs.ipynb 22
def addz(data: XYArray = None, zscale: float = 0.02, seed: int = 3) -> XYArray:
    '''Add noize to data.'''
    seedall(seed)
    # add Gaussian noise
    return data + np.random.normal(0, zscale, np.array(data).shape)

# %% ../nbs/30_adjs.ipynb 24
def catx(data: XYArray = None, i: int = 0, ncats: intq = 1, distcats: bool = True) -> LabelArray:
    '''Categorize data'''
    return catdists(data, ncats) if distcats else np.full(data.shape[0], i)

# %% ../nbs/30_adjs.ipynb 26
def negcats(df: pd.DataFrame, label: str = 'label') -> pd.DataFrame:
    idx = ((df.x <= 0) & (0 < df.y)) | ((df.y <= 0) & (0 < df.x))
    df[label] += 1
    df.loc[idx, label] *= -1
    df[label] += df[label].min()
    df[label] *= -1
    return df

# %% ../nbs/30_adjs.ipynb 28
def npxy(data: XYArray = None, cats: LabelArray = None, seed: int = 3) -> Tuple[XYArray, LabelArray]:
    seedall(seed)
    if data is None: data = np.empty((0, 2))
    if cats is None: cats = np.empty(0, dtype=int)
    return data, cats

# %% ../nbs/30_adjs.ipynb 30
def addx(
    i: int, newx: XYArray, data: XYArray = None, cats: LabelArray = None,
    zscale: float = 0.02, distcats: bool = True, ncats: intq = 1, seed: int = 3,
) -> Tuple[XYArray, LabelArray]:
    data, cats = npxy(data, cats, seed)
    newx = addz(newx, zscale, seed)
    newy = catx(newx, i, ncats, distcats)
    data, cats = np.vstack((data, newx)), np.hstack((cats, newy))
    return data, cats

# %% ../nbs/30_adjs.ipynb 32
def dfxy(x: XYArray, y: LabelArray, label: str = 'label', use_index: bool = True) -> pd.DataFrame:
    '''Generates a dataset from 2D coordinates (`x`) and labels (`y`)'''
    index = pd.CategoricalIndex(y, name=label)
    df = pd.DataFrame(x, columns=['x', 'y'], index=index)
    if not use_index: df.reset_index(inplace=True)
    return df

# %% ../nbs/30_adjs.ipynb 34
#| export
