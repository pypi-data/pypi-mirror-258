# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['StrGuard', 'KeepStrs', 'joinmeta', 'join', 'dotstr', 'nilstr', 'sunstr', 'dunstr', 'dashstr', 'mulstr', 'justmeta',
           'just', 'justpunc', 'justabc', 'justnum']

# %% ../nbs/00_core.ipynb 6
import string

# %% ../nbs/00_core.ipynb 8
from typing import (Self, Type, Union, TypeAlias, TypeGuard, ClassVar, Callable, Optional)

# %% ../nbs/00_core.ipynb 10
#| export


# %% ../nbs/00_core.ipynb 12
#| export


# %% ../nbs/00_core.ipynb 14
from nchr import U1, U2, NIL, DOT, DASH
from nlit import CHAR, DECO
from atup import vargs

# %% ../nbs/00_core.ipynb 16
StrGuard: TypeAlias = Callable[[str], TypeGuard[str]]
KeepStrs: TypeAlias = Union[str, StrGuard]

# %% ../nbs/00_core.ipynb 19
class joinmeta(type):
    '''Metaclass for joining strings with a given character, dropping nils, and casting to string.'''
    char: ClassVar[str] = NIL
    nils: ClassVar[bool] = False
    deco: ClassVar[bool] = False
    
    def __new__(cls, name, bases, dct, **kwargs):
        return super().__new__(cls, name, bases, dct)
    
    def docs(cls, char: str = NIL) -> str:
        return f'''Join any number of args as str i.e. `"{char}".join(filter(lambda s: s, strs))`'''
    
    def new(
        cls: Type[Self], char: str = NIL, *args, 
        nils: bool = False, deco: bool = False, **kwargs
    ) -> Type[Self]:
        def decorator(kls):
            dct = dict(char = char, nils = nils, __doc__ = cls.docs(), deco = deco)
            new = cls.__class__(kls.__name__, (cls, ), dct, **kwargs)
            return new
        return decorator
    
    def cast(self, *strs: str) -> tuple: 
        return tuple(map(str, tuple(vargs(strs))))
    
    def dropnils(self, *strs: str, drop: bool = True) -> tuple:
        return tuple(filter(lambda s: s, strs)) if drop else strs
    
    def join(self, *strs, nils: bool = False) -> str:
        nils = nils or self.nils
        strs = self.cast(*strs)
        strs = self.dropnils(*strs, drop = not nils)
        return self.char.join(strs)
    
    def __call__(cls: Self, *args, **kwargs):
        curr = getattr(cls, 'char', None)        
        good = len(args) == 1 and isinstance(args[0], (str, type))
        need = (curr is None or curr == NIL) and getattr(cls, 'deco', False)
        if (good and need): 
            try: return cls.new(*args, **kwargs)
            except TypeError: ...
        return cls.join(*args, **kwargs)


# %% ../nbs/00_core.ipynb 21
class join(metaclass=joinmeta):
    '''
    Examples
    --------
    >>> @join('.')
    >>> class dotstr: ...
    
    >>> dotstr('a', 'b', '', 'c')
    'a.b.c'
    
    >>> dotstr('a', 'b', '', 'c', nils=True)
    'a.b..c'
    
    
    >>> class dunstr(join): char = '__'
    >>> dunstr('a', 'b', 'c')
    'a__b__c'
    '''

# %% ../nbs/00_core.ipynb 23
@join.new(DOT)
class dotstr(join): 
    char = DOT

class nilstr(join): 
    char = NIL

class sunstr(join): 
    char = U1

class dunstr(join): 
    char = U2

class dashstr(join): 
    char = DASH
    
class mulstr(join): 
    char = 'x'

# %% ../nbs/00_core.ipynb 29
class justmeta(type):
    '''Metaclass for filtering strings for just the specified character.'''
    flag: ClassVar[Optional[KeepStrs]] = None
    flip: ClassVar[bool] = False
    deco: ClassVar[bool] = False
    
    def docs(cls, char: str = NIL) -> str:
        char = getattr(cls.flag, '__name__', cls.flag)
        return f'''Filter a string for just the specified characters ({char})'''
    
    def filt(self, s: str) -> TypeGuard[str]:
        def isflag(s: str) -> bool:
            if callable(self.flag): 
                return self.flag(s)
            elif isinstance(self.flag, str): 
                return s in self.flag
            return s == self.flag
        
        if not self.flip: 
            return isflag(s)
        
        def notflag(s: str) -> bool: 
            return not isflag(s)

        return notflag(s)

    def new(
        cls: Type[Self], flag: KeepStrs = str.isascii, *args, 
        flip: bool = False, deco: bool = False, **kwargs
    ) -> Type[Self]:
        def decorator(kls):
            dct = dict(flag = flag, flip = flip, __doc__ = cls.docs(), deco = deco)
            new = cls.__class__(kls.__name__, (cls, ), dct, **kwargs)
            return new
        return decorator
        
    def just(self, *strs, flip: Optional[bool] = None, **kwargs) -> str:
        '''Filters a string for just the specified characters'''
        flip = flip if flip is not None else self.flip
        func = lambda s: bool(flip) ^ self.filt(s)
        return NIL.join(list(filter(func, join(strs, **kwargs))))
    
    def __call__(cls: Self, *args, **kwargs):
        curr = getattr(cls, 'flag', None)
        good = len(args) == 1 and isinstance(args[0], (str, type, Callable))
        need = (curr is None) and getattr(cls, 'deco', False)
        if (good and need):
        # len(args) == 1 and isinstance(args[0], (type, str, Callable)) and cls.flag is None: 
            return cls.new(*args, **kwargs)
        return cls.just(*args, **kwargs)

# %% ../nbs/00_core.ipynb 31
class just(metaclass=justmeta):
    '''
    Examples
    --------
    >>> @just(str.isalpha)
    >>> class justabc: ...
    
    >>> justabc('abc123', 'xyz')
    'abcxyz'
    
    >>> justabc('abc123', 'xyz', flip=True)
    '123'
    
    >>> class justpunc(just): flag = string.punctuation
    >>> justpunc('abc..z123', 'xyz')
    '..'
    
    >>> justpunc('abc..z123', 'xyz', flip=True)
    'abcz123xyz'
    '''
    

# %% ../nbs/00_core.ipynb 33
@just.new(string.punctuation)
class justpunc:
    '''Filters a string for just punctuation values'''
    
class justabc(just):
    '''Filters a string for just alpha values'''
    flag = str.isalpha

class justnum(just):
    '''Filters a string for just numeric values'''
    flag = str.isnumeric
