# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_flag.ipynb.

# %% auto 0
__all__ = ['TYPE_FLAGS', 'TypeFlagMeta', 'TypeFlag']

# %% ../nbs/01_flag.ipynb 6
from _collections_abc import dict_keys, dict_values, dict_items
from functools import wraps, partial

# %% ../nbs/01_flag.ipynb 8
from typing import (Self, Optional, TypeGuard, Generator, )

# %% ../nbs/01_flag.ipynb 10
#| export


# %% ../nbs/01_flag.ipynb 12
#| export

# %% ../nbs/01_flag.ipynb 14
from .atyp import dictiters, Types, FlagDict, NeedCast, TypeCastingConfig

# %% ../nbs/01_flag.ipynb 17
class TypeFlagMeta(type):
    _flags: dict[str, Self] = {}
    def __getattr__(cls, attr: str):
        try: return super().__getattr__(attr)
        except (AttributeError, KeyError):
            try: return cls._flags.get(attr, None)
            except KeyError: raise AttributeError(f"'{cls.__name__}' has no attribute '{attr}'")
    
    def flagged(cls, **kwargs: TypeCastingConfig) -> Types:
        '''Returns the types that are flagged by the given kwargs.'''
        res: Types = ()
        for flag in cls._flags.values():
            res += flag.flag(**kwargs)
        return res
    
    def asdict(cls, **kwargs: TypeCastingConfig) -> FlagDict:
        '''Returns a dictionary of flags and their boolean values.'''
        res: FlagDict = {}
        for flag in cls._flags.values():
            res[flag.attr] = True if flag.flag(**kwargs) != () else False
        return res
        
    def __prep__(cls, kind: type | Types, name: str | None = None, default: bool = True) -> tuple[Types, str, bool]:
        kind = kind if isinstance(kind, tuple) else (kind, )
        if name is None: name = getattr(kind[0], '__name__' , 'misc').lower()
        return kind, name, default

# %% ../nbs/01_flag.ipynb 19
class TypeFlag(metaclass=TypeFlagMeta):
    kind: Types
    name: str | None = None
    default: bool = True
    attr: str = property(lambda self: f'__{self.name}')
    
    def __new__(cls, kind: type | Types, name: str | None = None, default: bool = True):
        kind, name, default = cls.__prep__(kind, name, default)
        if name in cls._flags: return cls._flags[name]
        cls._flags[name] = (self := super().__new__(cls))
        return self
    
    def __init__(self, kind: type | tuple[type, ...], name: str | None = None, default: bool = True):
        self.kind, self.name, self.default = type(self).__prep__(kind, name, default)
    
    def __repr__(self) -> str: return f'TypeFlag({self.name})'
    def flag(self, **kwargs: TypeCastingConfig) -> Types:
        hasname = kwargs.get(self.attr, self.default)
        return self.kind if hasname else ()

# %% ../nbs/01_flag.ipynb 21
TYPE_FLAGS: tuple[TypeFlag, ...] = (
    TypeFlag(list, default=False),
    TypeFlag(tuple),
    TypeFlag(range), 
    TypeFlag(dict, default=False), 
    TypeFlag(dict_keys), 
    TypeFlag(dict_values), 
    TypeFlag(dict_items), 
    TypeFlag(dictiters, name='dictiters'), 
    TypeFlag(Generator)
)
