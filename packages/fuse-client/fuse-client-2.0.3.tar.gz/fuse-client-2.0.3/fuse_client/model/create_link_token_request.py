# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class CreateLinkTokenRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "session_client_secret",
            "client_name",
            "entity",
            "institution_id",
        }
        
        class properties:
            institution_id = schemas.StrSchema
        
            @staticmethod
            def entity() -> typing.Type['Entity']:
                return Entity
            client_name = schemas.StrSchema
            session_client_secret = schemas.StrSchema
            webhook_url = schemas.StrSchema
            
            
            class mx(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        config = schemas.DictSchema
                        __annotations__ = {
                            "config": config,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["config", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union[MetaOapg.properties.config, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["config", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    config: typing.Union[MetaOapg.properties.config, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mx':
                    return super().__new__(
                        cls,
                        *_args,
                        config=config,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class plaid(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        config = schemas.DictSchema
                        __annotations__ = {
                            "config": config,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["config", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union[MetaOapg.properties.config, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["config", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    config: typing.Union[MetaOapg.properties.config, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'plaid':
                    return super().__new__(
                        cls,
                        *_args,
                        config=config,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class teller(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class config(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class selectAccount(
                                        schemas.EnumBase,
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            enum_value_to_name = {
                                                "disabled": "DISABLED",
                                                "single": "SINGLE",
                                                "multiple": "MULTIPLE",
                                            }
                                        
                                        @schemas.classproperty
                                        def DISABLED(cls):
                                            return cls("disabled")
                                        
                                        @schemas.classproperty
                                        def SINGLE(cls):
                                            return cls("single")
                                        
                                        @schemas.classproperty
                                        def MULTIPLE(cls):
                                            return cls("multiple")
                                    
                                    
                                    class accountFilter(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class depository(
                                                    schemas.ComposedSchema,
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        
                                                        class one_of_0(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                enum_value_to_name = {
                                                                    "all": "ALL",
                                                                }
                                                            
                                                            @schemas.classproperty
                                                            def ALL(cls):
                                                                return cls("all")
                                                        
                                                        
                                                        class one_of_1(
                                                            schemas.DictSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                class properties:
                                                                    
                                                                    
                                                                    class subtypes(
                                                                        schemas.ListSchema
                                                                    ):
                                                                    
                                                                    
                                                                        class MetaOapg:
                                                                            
                                                                            
                                                                            class items(
                                                                                schemas.EnumBase,
                                                                                schemas.StrSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    enum_value_to_name = {
                                                                                        "checking": "CHECKING",
                                                                                        "savings": "SAVINGS",
                                                                                    }
                                                                                
                                                                                @schemas.classproperty
                                                                                def CHECKING(cls):
                                                                                    return cls("checking")
                                                                                
                                                                                @schemas.classproperty
                                                                                def SAVINGS(cls):
                                                                                    return cls("savings")
                                                                    
                                                                        def __new__(
                                                                            cls,
                                                                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        ) -> 'subtypes':
                                                                            return super().__new__(
                                                                                cls,
                                                                                _arg,
                                                                                _configuration=_configuration,
                                                                            )
                                                                    
                                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                                            return super().__getitem__(i)
                                                                    __annotations__ = {
                                                                        "subtypes": subtypes,
                                                                    }
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["subtypes"]) -> MetaOapg.properties.subtypes: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                            
                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["subtypes", ], str]):
                                                                # dict_instance[name] accessor
                                                                return super().__getitem__(name)
                                                            
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["subtypes"]) -> typing.Union[MetaOapg.properties.subtypes, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                            
                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subtypes", ], str]):
                                                                return super().get_item_oapg(name)
                                                            
                                                        
                                                            def __new__(
                                                                cls,
                                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                subtypes: typing.Union[MetaOapg.properties.subtypes, list, tuple, schemas.Unset] = schemas.unset,
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                            ) -> 'one_of_1':
                                                                return super().__new__(
                                                                    cls,
                                                                    *_args,
                                                                    subtypes=subtypes,
                                                                    _configuration=_configuration,
                                                                    **kwargs,
                                                                )
                                                        
                                                        @classmethod
                                                        @functools.lru_cache()
                                                        def one_of(cls):
                                                            # we need this here to make our import statements work
                                                            # we must store _composed_schemas in here so the code is only run
                                                            # when we invoke this method. If we kept this at the class
                                                            # level we would get an error because the class level
                                                            # code would be run when this module is imported, and these composed
                                                            # classes don't exist yet because their module has not finished
                                                            # loading
                                                            return [
                                                                cls.one_of_0,
                                                                cls.one_of_1,
                                                            ]
                                                
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'depository':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                
                                                
                                                class credit(
                                                    schemas.ComposedSchema,
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        
                                                        class one_of_0(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                enum_value_to_name = {
                                                                    "all": "ALL",
                                                                }
                                                            
                                                            @schemas.classproperty
                                                            def ALL(cls):
                                                                return cls("all")
                                                        
                                                        
                                                        class one_of_1(
                                                            schemas.DictSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                class properties:
                                                                    
                                                                    
                                                                    class subtypes(
                                                                        schemas.ListSchema
                                                                    ):
                                                                    
                                                                    
                                                                        class MetaOapg:
                                                                            
                                                                            
                                                                            class items(
                                                                                schemas.EnumBase,
                                                                                schemas.StrSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    enum_value_to_name = {
                                                                                        "credit_card": "CREDIT_CARD",
                                                                                    }
                                                                                
                                                                                @schemas.classproperty
                                                                                def CREDIT_CARD(cls):
                                                                                    return cls("credit_card")
                                                                    
                                                                        def __new__(
                                                                            cls,
                                                                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        ) -> 'subtypes':
                                                                            return super().__new__(
                                                                                cls,
                                                                                _arg,
                                                                                _configuration=_configuration,
                                                                            )
                                                                    
                                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                                            return super().__getitem__(i)
                                                                    __annotations__ = {
                                                                        "subtypes": subtypes,
                                                                    }
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["subtypes"]) -> MetaOapg.properties.subtypes: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                            
                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["subtypes", ], str]):
                                                                # dict_instance[name] accessor
                                                                return super().__getitem__(name)
                                                            
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["subtypes"]) -> typing.Union[MetaOapg.properties.subtypes, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                            
                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subtypes", ], str]):
                                                                return super().get_item_oapg(name)
                                                            
                                                        
                                                            def __new__(
                                                                cls,
                                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                subtypes: typing.Union[MetaOapg.properties.subtypes, list, tuple, schemas.Unset] = schemas.unset,
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                            ) -> 'one_of_1':
                                                                return super().__new__(
                                                                    cls,
                                                                    *_args,
                                                                    subtypes=subtypes,
                                                                    _configuration=_configuration,
                                                                    **kwargs,
                                                                )
                                                        
                                                        @classmethod
                                                        @functools.lru_cache()
                                                        def one_of(cls):
                                                            # we need this here to make our import statements work
                                                            # we must store _composed_schemas in here so the code is only run
                                                            # when we invoke this method. If we kept this at the class
                                                            # level we would get an error because the class level
                                                            # code would be run when this module is imported, and these composed
                                                            # classes don't exist yet because their module has not finished
                                                            # loading
                                                            return [
                                                                cls.one_of_0,
                                                                cls.one_of_1,
                                                            ]
                                                
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'credit':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                __annotations__ = {
                                                    "depository": depository,
                                                    "credit": credit,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["depository"]) -> MetaOapg.properties.depository: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["credit"]) -> MetaOapg.properties.credit: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["depository", "credit", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["depository"]) -> typing.Union[MetaOapg.properties.depository, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["credit"]) -> typing.Union[MetaOapg.properties.credit, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["depository", "credit", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            depository: typing.Union[MetaOapg.properties.depository, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                            credit: typing.Union[MetaOapg.properties.credit, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'accountFilter':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                depository=depository,
                                                credit=credit,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "selectAccount": selectAccount,
                                        "accountFilter": accountFilter,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["selectAccount"]) -> MetaOapg.properties.selectAccount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["accountFilter"]) -> MetaOapg.properties.accountFilter: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["selectAccount", "accountFilter", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["selectAccount"]) -> typing.Union[MetaOapg.properties.selectAccount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["accountFilter"]) -> typing.Union[MetaOapg.properties.accountFilter, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["selectAccount", "accountFilter", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                selectAccount: typing.Union[MetaOapg.properties.selectAccount, str, schemas.Unset] = schemas.unset,
                                accountFilter: typing.Union[MetaOapg.properties.accountFilter, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'config':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    selectAccount=selectAccount,
                                    accountFilter=accountFilter,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "config": config,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["config", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union[MetaOapg.properties.config, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["config", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    config: typing.Union[MetaOapg.properties.config, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'teller':
                    return super().__new__(
                        cls,
                        *_args,
                        config=config,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class snaptrade(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class config(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class connectionType(
                                        schemas.EnumBase,
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            enum_value_to_name = {
                                                "read": "READ",
                                                "trade": "TRADE",
                                            }
                                        
                                        @schemas.classproperty
                                        def READ(cls):
                                            return cls("read")
                                        
                                        @schemas.classproperty
                                        def TRADE(cls):
                                            return cls("trade")
                                    __annotations__ = {
                                        "connectionType": connectionType,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["connectionType"]) -> MetaOapg.properties.connectionType: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["connectionType", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["connectionType"]) -> typing.Union[MetaOapg.properties.connectionType, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connectionType", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                connectionType: typing.Union[MetaOapg.properties.connectionType, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'config':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    connectionType=connectionType,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "config": config,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["config", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union[MetaOapg.properties.config, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["config", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    config: typing.Union[MetaOapg.properties.config, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'snaptrade':
                    return super().__new__(
                        cls,
                        *_args,
                        config=config,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "institution_id": institution_id,
                "entity": entity,
                "client_name": client_name,
                "session_client_secret": session_client_secret,
                "webhook_url": webhook_url,
                "mx": mx,
                "plaid": plaid,
                "teller": teller,
                "snaptrade": snaptrade,
            }
    
    session_client_secret: MetaOapg.properties.session_client_secret
    client_name: MetaOapg.properties.client_name
    entity: 'Entity'
    institution_id: MetaOapg.properties.institution_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> 'Entity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_name"]) -> MetaOapg.properties.client_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session_client_secret"]) -> MetaOapg.properties.session_client_secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_url"]) -> MetaOapg.properties.webhook_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mx"]) -> MetaOapg.properties.mx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plaid"]) -> MetaOapg.properties.plaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teller"]) -> MetaOapg.properties.teller: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snaptrade"]) -> MetaOapg.properties.snaptrade: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["institution_id", "entity", "client_name", "session_client_secret", "webhook_url", "mx", "plaid", "teller", "snaptrade", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> 'Entity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_name"]) -> MetaOapg.properties.client_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session_client_secret"]) -> MetaOapg.properties.session_client_secret: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_url"]) -> typing.Union[MetaOapg.properties.webhook_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mx"]) -> typing.Union[MetaOapg.properties.mx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plaid"]) -> typing.Union[MetaOapg.properties.plaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teller"]) -> typing.Union[MetaOapg.properties.teller, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snaptrade"]) -> typing.Union[MetaOapg.properties.snaptrade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["institution_id", "entity", "client_name", "session_client_secret", "webhook_url", "mx", "plaid", "teller", "snaptrade", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        session_client_secret: typing.Union[MetaOapg.properties.session_client_secret, str, ],
        client_name: typing.Union[MetaOapg.properties.client_name, str, ],
        entity: 'Entity',
        institution_id: typing.Union[MetaOapg.properties.institution_id, str, ],
        webhook_url: typing.Union[MetaOapg.properties.webhook_url, str, schemas.Unset] = schemas.unset,
        mx: typing.Union[MetaOapg.properties.mx, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        plaid: typing.Union[MetaOapg.properties.plaid, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        teller: typing.Union[MetaOapg.properties.teller, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        snaptrade: typing.Union[MetaOapg.properties.snaptrade, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateLinkTokenRequest':
        return super().__new__(
            cls,
            *_args,
            session_client_secret=session_client_secret,
            client_name=client_name,
            entity=entity,
            institution_id=institution_id,
            webhook_url=webhook_url,
            mx=mx,
            plaid=plaid,
            teller=teller,
            snaptrade=snaptrade,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.entity import Entity
