# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class MigrateFinancialConnectionsAggregatorConnectionData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The input data for the financial connections to be migrated into the unified Fuse API.
    """


    class MetaOapg:
        
        class properties:
            
            
            class plaid(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "access_token",
                    }
                    
                    class properties:
                        access_token = schemas.StrSchema
                        use_item_webhook = schemas.BoolSchema
                        __annotations__ = {
                            "access_token": access_token,
                            "use_item_webhook": use_item_webhook,
                        }
                
                access_token: MetaOapg.properties.access_token
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["use_item_webhook"]) -> MetaOapg.properties.use_item_webhook: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", "use_item_webhook", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["use_item_webhook"]) -> typing.Union[MetaOapg.properties.use_item_webhook, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", "use_item_webhook", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    access_token: typing.Union[MetaOapg.properties.access_token, str, ],
                    use_item_webhook: typing.Union[MetaOapg.properties.use_item_webhook, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'plaid':
                    return super().__new__(
                        cls,
                        *_args,
                        access_token=access_token,
                        use_item_webhook=use_item_webhook,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class mx(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "mx_guid",
                        "user_guid",
                    }
                    
                    class properties:
                        user_guid = schemas.StrSchema
                        member_guid = schemas.StrSchema
                        __annotations__ = {
                            "user_guid": user_guid,
                            "member_guid": member_guid,
                        }
                
                mx_guid: schemas.AnyTypeSchema
                user_guid: MetaOapg.properties.user_guid
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_guid"]) -> MetaOapg.properties.user_guid: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["member_guid"]) -> MetaOapg.properties.member_guid: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_guid", "member_guid", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_guid"]) -> MetaOapg.properties.user_guid: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["member_guid"]) -> typing.Union[MetaOapg.properties.member_guid, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_guid", "member_guid", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    mx_guid: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    user_guid: typing.Union[MetaOapg.properties.user_guid, str, ],
                    member_guid: typing.Union[MetaOapg.properties.member_guid, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mx':
                    return super().__new__(
                        cls,
                        *_args,
                        mx_guid=mx_guid,
                        user_guid=user_guid,
                        member_guid=member_guid,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class teller(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "access_token",
                    }
                    
                    class properties:
                        access_token = schemas.StrSchema
                        __annotations__ = {
                            "access_token": access_token,
                        }
                
                access_token: MetaOapg.properties.access_token
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    access_token: typing.Union[MetaOapg.properties.access_token, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'teller':
                    return super().__new__(
                        cls,
                        *_args,
                        access_token=access_token,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "plaid": plaid,
                "mx": mx,
                "teller": teller,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plaid"]) -> MetaOapg.properties.plaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mx"]) -> MetaOapg.properties.mx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teller"]) -> MetaOapg.properties.teller: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["plaid", "mx", "teller", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plaid"]) -> typing.Union[MetaOapg.properties.plaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mx"]) -> typing.Union[MetaOapg.properties.mx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teller"]) -> typing.Union[MetaOapg.properties.teller, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["plaid", "mx", "teller", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        plaid: typing.Union[MetaOapg.properties.plaid, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        mx: typing.Union[MetaOapg.properties.mx, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        teller: typing.Union[MetaOapg.properties.teller, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MigrateFinancialConnectionsAggregatorConnectionData':
        return super().__new__(
            cls,
            *_args,
            plaid=plaid,
            mx=mx,
            teller=teller,
            _configuration=_configuration,
            **kwargs,
        )
