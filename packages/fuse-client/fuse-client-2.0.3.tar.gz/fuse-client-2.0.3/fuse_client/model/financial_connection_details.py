# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinancialConnectionDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "aggregator",
            "connection_status",
            "id",
            "connection_status_updated_at",
            "is_oauth",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class connection_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "connected": "CONNECTED",
                        "disconnected": "DISCONNECTED",
                        "finished": "FINISHED",
                    }
                
                @schemas.classproperty
                def CONNECTED(cls):
                    return cls("connected")
                
                @schemas.classproperty
                def DISCONNECTED(cls):
                    return cls("disconnected")
                
                @schemas.classproperty
                def FINISHED(cls):
                    return cls("finished")
            connection_status_updated_at = schemas.StrSchema
            is_oauth = schemas.BoolSchema
        
            @staticmethod
            def aggregator() -> typing.Type['Aggregator']:
                return Aggregator
            
            
            class plaid(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "access_token",
                        "item_id",
                    }
                    
                    class properties:
                        access_token = schemas.StrSchema
                        item_id = schemas.StrSchema
                        __annotations__ = {
                            "access_token": access_token,
                            "item_id": item_id,
                        }
                
                access_token: MetaOapg.properties.access_token
                item_id: MetaOapg.properties.item_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", "item_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", "item_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    access_token: typing.Union[MetaOapg.properties.access_token, str, ],
                    item_id: typing.Union[MetaOapg.properties.item_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'plaid':
                    return super().__new__(
                        cls,
                        *_args,
                        access_token=access_token,
                        item_id=item_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class teller(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "access_token",
                        "enrollment_id",
                    }
                    
                    class properties:
                        access_token = schemas.StrSchema
                        enrollment_id = schemas.StrSchema
                        __annotations__ = {
                            "access_token": access_token,
                            "enrollment_id": enrollment_id,
                        }
                
                access_token: MetaOapg.properties.access_token
                enrollment_id: MetaOapg.properties.enrollment_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["enrollment_id"]) -> MetaOapg.properties.enrollment_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", "enrollment_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["enrollment_id"]) -> MetaOapg.properties.enrollment_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", "enrollment_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    access_token: typing.Union[MetaOapg.properties.access_token, str, ],
                    enrollment_id: typing.Union[MetaOapg.properties.enrollment_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'teller':
                    return super().__new__(
                        cls,
                        *_args,
                        access_token=access_token,
                        enrollment_id=enrollment_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class mx(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "member_guid",
                        "user_guid",
                    }
                    
                    class properties:
                        user_guid = schemas.StrSchema
                        member_guid = schemas.StrSchema
                        __annotations__ = {
                            "user_guid": user_guid,
                            "member_guid": member_guid,
                        }
                
                member_guid: MetaOapg.properties.member_guid
                user_guid: MetaOapg.properties.user_guid
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_guid"]) -> MetaOapg.properties.user_guid: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["member_guid"]) -> MetaOapg.properties.member_guid: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_guid", "member_guid", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_guid"]) -> MetaOapg.properties.user_guid: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["member_guid"]) -> MetaOapg.properties.member_guid: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_guid", "member_guid", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    member_guid: typing.Union[MetaOapg.properties.member_guid, str, ],
                    user_guid: typing.Union[MetaOapg.properties.user_guid, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mx':
                    return super().__new__(
                        cls,
                        *_args,
                        member_guid=member_guid,
                        user_guid=user_guid,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class snaptrade(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "user_secret",
                        "user_id",
                        "brokerage_authorization_id",
                    }
                    
                    class properties:
                        brokerage_authorization_id = schemas.StrSchema
                        user_id = schemas.StrSchema
                        user_secret = schemas.StrSchema
                        __annotations__ = {
                            "brokerage_authorization_id": brokerage_authorization_id,
                            "user_id": user_id,
                            "user_secret": user_secret,
                        }
                
                user_secret: MetaOapg.properties.user_secret
                user_id: MetaOapg.properties.user_id
                brokerage_authorization_id: MetaOapg.properties.brokerage_authorization_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["brokerage_authorization_id"]) -> MetaOapg.properties.brokerage_authorization_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_secret"]) -> MetaOapg.properties.user_secret: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["brokerage_authorization_id", "user_id", "user_secret", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["brokerage_authorization_id"]) -> MetaOapg.properties.brokerage_authorization_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_secret"]) -> MetaOapg.properties.user_secret: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["brokerage_authorization_id", "user_id", "user_secret", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    user_secret: typing.Union[MetaOapg.properties.user_secret, str, ],
                    user_id: typing.Union[MetaOapg.properties.user_id, str, ],
                    brokerage_authorization_id: typing.Union[MetaOapg.properties.brokerage_authorization_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'snaptrade':
                    return super().__new__(
                        cls,
                        *_args,
                        user_secret=user_secret,
                        user_id=user_id,
                        brokerage_authorization_id=brokerage_authorization_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class flinks(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "login_id",
                    }
                    
                    class properties:
                        login_id = schemas.StrSchema
                        __annotations__ = {
                            "login_id": login_id,
                        }
                
                login_id: MetaOapg.properties.login_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["login_id"]) -> MetaOapg.properties.login_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["login_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["login_id"]) -> MetaOapg.properties.login_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["login_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    login_id: typing.Union[MetaOapg.properties.login_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'flinks':
                    return super().__new__(
                        cls,
                        *_args,
                        login_id=login_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class mono(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "account_id",
                    }
                    
                    class properties:
                        account_id = schemas.StrSchema
                        __annotations__ = {
                            "account_id": account_id,
                        }
                
                account_id: MetaOapg.properties.account_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    account_id: typing.Union[MetaOapg.properties.account_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mono':
                    return super().__new__(
                        cls,
                        *_args,
                        account_id=account_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class truelayer(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "access_token",
                    }
                    
                    class properties:
                        access_token = schemas.StrSchema
                        __annotations__ = {
                            "access_token": access_token,
                        }
                
                access_token: MetaOapg.properties.access_token
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    access_token: typing.Union[MetaOapg.properties.access_token, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'truelayer':
                    return super().__new__(
                        cls,
                        *_args,
                        access_token=access_token,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class finverse(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "access_token",
                    }
                    
                    class properties:
                        access_token = schemas.StrSchema
                        login_identity_id = schemas.StrSchema
                        __annotations__ = {
                            "access_token": access_token,
                            "login_identity_id": login_identity_id,
                        }
                
                access_token: MetaOapg.properties.access_token
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["login_identity_id"]) -> MetaOapg.properties.login_identity_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", "login_identity_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["login_identity_id"]) -> typing.Union[MetaOapg.properties.login_identity_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", "login_identity_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    access_token: typing.Union[MetaOapg.properties.access_token, str, ],
                    login_identity_id: typing.Union[MetaOapg.properties.login_identity_id, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'finverse':
                    return super().__new__(
                        cls,
                        *_args,
                        access_token=access_token,
                        login_identity_id=login_identity_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class basiq(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "connection_id",
                        "user_id",
                    }
                    
                    class properties:
                        user_id = schemas.StrSchema
                        connection_id = schemas.StrSchema
                        __annotations__ = {
                            "user_id": user_id,
                            "connection_id": connection_id,
                        }
                
                connection_id: MetaOapg.properties.connection_id
                user_id: MetaOapg.properties.user_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["connection_id"]) -> MetaOapg.properties.connection_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_id", "connection_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["connection_id"]) -> MetaOapg.properties.connection_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_id", "connection_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    connection_id: typing.Union[MetaOapg.properties.connection_id, str, ],
                    user_id: typing.Union[MetaOapg.properties.user_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'basiq':
                    return super().__new__(
                        cls,
                        *_args,
                        connection_id=connection_id,
                        user_id=user_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class belvo(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "link_id",
                    }
                    
                    class properties:
                        link_id = schemas.StrSchema
                        institution = schemas.StrSchema
                        __annotations__ = {
                            "link_id": link_id,
                            "institution": institution,
                        }
                
                link_id: MetaOapg.properties.link_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["link_id"]) -> MetaOapg.properties.link_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["institution"]) -> MetaOapg.properties.institution: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["link_id", "institution", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["link_id"]) -> MetaOapg.properties.link_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union[MetaOapg.properties.institution, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["link_id", "institution", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    link_id: typing.Union[MetaOapg.properties.link_id, str, ],
                    institution: typing.Union[MetaOapg.properties.institution, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'belvo':
                    return super().__new__(
                        cls,
                        *_args,
                        link_id=link_id,
                        institution=institution,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class finicity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "institution_login_id",
                        "customer_id",
                    }
                    
                    class properties:
                        customer_id = schemas.StrSchema
                        institution_login_id = schemas.StrSchema
                        __annotations__ = {
                            "customer_id": customer_id,
                            "institution_login_id": institution_login_id,
                        }
                
                institution_login_id: MetaOapg.properties.institution_login_id
                customer_id: MetaOapg.properties.customer_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["customer_id"]) -> MetaOapg.properties.customer_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["institution_login_id"]) -> MetaOapg.properties.institution_login_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["customer_id", "institution_login_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["customer_id"]) -> MetaOapg.properties.customer_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["institution_login_id"]) -> MetaOapg.properties.institution_login_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customer_id", "institution_login_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    institution_login_id: typing.Union[MetaOapg.properties.institution_login_id, str, ],
                    customer_id: typing.Union[MetaOapg.properties.customer_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'finicity':
                    return super().__new__(
                        cls,
                        *_args,
                        institution_login_id=institution_login_id,
                        customer_id=customer_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class akoya(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "refresh_token",
                        "expires_at",
                        "id_token",
                        "provider_id",
                    }
                    
                    class properties:
                        id_token = schemas.StrSchema
                        refresh_token = schemas.StrSchema
                        expires_at = schemas.StrSchema
                        __annotations__ = {
                            "id_token": id_token,
                            "refresh_token": refresh_token,
                            "expires_at": expires_at,
                        }
                
                refresh_token: MetaOapg.properties.refresh_token
                expires_at: MetaOapg.properties.expires_at
                id_token: MetaOapg.properties.id_token
                provider_id: schemas.AnyTypeSchema
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id_token"]) -> MetaOapg.properties.id_token: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["refresh_token"]) -> MetaOapg.properties.refresh_token: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["expires_at"]) -> MetaOapg.properties.expires_at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id_token", "refresh_token", "expires_at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id_token"]) -> MetaOapg.properties.id_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["refresh_token"]) -> MetaOapg.properties.refresh_token: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["expires_at"]) -> MetaOapg.properties.expires_at: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id_token", "refresh_token", "expires_at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    refresh_token: typing.Union[MetaOapg.properties.refresh_token, str, ],
                    expires_at: typing.Union[MetaOapg.properties.expires_at, str, ],
                    id_token: typing.Union[MetaOapg.properties.id_token, str, ],
                    provider_id: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'akoya':
                    return super().__new__(
                        cls,
                        *_args,
                        refresh_token=refresh_token,
                        expires_at=expires_at,
                        id_token=id_token,
                        provider_id=provider_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class saltedge(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "connection_id",
                    }
                    
                    class properties:
                        connection_id = schemas.StrSchema
                        __annotations__ = {
                            "connection_id": connection_id,
                        }
                
                connection_id: MetaOapg.properties.connection_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["connection_id"]) -> MetaOapg.properties.connection_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["connection_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["connection_id"]) -> MetaOapg.properties.connection_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connection_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    connection_id: typing.Union[MetaOapg.properties.connection_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'saltedge':
                    return super().__new__(
                        cls,
                        *_args,
                        connection_id=connection_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class sophtron(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "user_institution_id",
                    }
                    
                    class properties:
                        user_institution_id = schemas.StrSchema
                        __annotations__ = {
                            "user_institution_id": user_institution_id,
                        }
                
                user_institution_id: MetaOapg.properties.user_institution_id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_institution_id"]) -> MetaOapg.properties.user_institution_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_institution_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_institution_id"]) -> MetaOapg.properties.user_institution_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_institution_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    user_institution_id: typing.Union[MetaOapg.properties.user_institution_id, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'sophtron':
                    return super().__new__(
                        cls,
                        *_args,
                        user_institution_id=user_institution_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "connection_status": connection_status,
                "connection_status_updated_at": connection_status_updated_at,
                "is_oauth": is_oauth,
                "aggregator": aggregator,
                "plaid": plaid,
                "teller": teller,
                "mx": mx,
                "snaptrade": snaptrade,
                "flinks": flinks,
                "mono": mono,
                "truelayer": truelayer,
                "finverse": finverse,
                "basiq": basiq,
                "belvo": belvo,
                "finicity": finicity,
                "akoya": akoya,
                "saltedge": saltedge,
                "sophtron": sophtron,
            }
    
    aggregator: 'Aggregator'
    connection_status: MetaOapg.properties.connection_status
    id: MetaOapg.properties.id
    connection_status_updated_at: MetaOapg.properties.connection_status_updated_at
    is_oauth: MetaOapg.properties.is_oauth
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_status"]) -> MetaOapg.properties.connection_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_status_updated_at"]) -> MetaOapg.properties.connection_status_updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_oauth"]) -> MetaOapg.properties.is_oauth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregator"]) -> 'Aggregator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plaid"]) -> MetaOapg.properties.plaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teller"]) -> MetaOapg.properties.teller: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mx"]) -> MetaOapg.properties.mx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snaptrade"]) -> MetaOapg.properties.snaptrade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flinks"]) -> MetaOapg.properties.flinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mono"]) -> MetaOapg.properties.mono: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["truelayer"]) -> MetaOapg.properties.truelayer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finverse"]) -> MetaOapg.properties.finverse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basiq"]) -> MetaOapg.properties.basiq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["belvo"]) -> MetaOapg.properties.belvo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finicity"]) -> MetaOapg.properties.finicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["akoya"]) -> MetaOapg.properties.akoya: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saltedge"]) -> MetaOapg.properties.saltedge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sophtron"]) -> MetaOapg.properties.sophtron: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "connection_status", "connection_status_updated_at", "is_oauth", "aggregator", "plaid", "teller", "mx", "snaptrade", "flinks", "mono", "truelayer", "finverse", "basiq", "belvo", "finicity", "akoya", "saltedge", "sophtron", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_status"]) -> MetaOapg.properties.connection_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_status_updated_at"]) -> MetaOapg.properties.connection_status_updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_oauth"]) -> MetaOapg.properties.is_oauth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregator"]) -> 'Aggregator': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plaid"]) -> typing.Union[MetaOapg.properties.plaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teller"]) -> typing.Union[MetaOapg.properties.teller, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mx"]) -> typing.Union[MetaOapg.properties.mx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snaptrade"]) -> typing.Union[MetaOapg.properties.snaptrade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flinks"]) -> typing.Union[MetaOapg.properties.flinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mono"]) -> typing.Union[MetaOapg.properties.mono, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["truelayer"]) -> typing.Union[MetaOapg.properties.truelayer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finverse"]) -> typing.Union[MetaOapg.properties.finverse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basiq"]) -> typing.Union[MetaOapg.properties.basiq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["belvo"]) -> typing.Union[MetaOapg.properties.belvo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finicity"]) -> typing.Union[MetaOapg.properties.finicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["akoya"]) -> typing.Union[MetaOapg.properties.akoya, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saltedge"]) -> typing.Union[MetaOapg.properties.saltedge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sophtron"]) -> typing.Union[MetaOapg.properties.sophtron, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "connection_status", "connection_status_updated_at", "is_oauth", "aggregator", "plaid", "teller", "mx", "snaptrade", "flinks", "mono", "truelayer", "finverse", "basiq", "belvo", "finicity", "akoya", "saltedge", "sophtron", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        aggregator: 'Aggregator',
        connection_status: typing.Union[MetaOapg.properties.connection_status, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        connection_status_updated_at: typing.Union[MetaOapg.properties.connection_status_updated_at, str, ],
        is_oauth: typing.Union[MetaOapg.properties.is_oauth, bool, ],
        plaid: typing.Union[MetaOapg.properties.plaid, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        teller: typing.Union[MetaOapg.properties.teller, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        mx: typing.Union[MetaOapg.properties.mx, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        snaptrade: typing.Union[MetaOapg.properties.snaptrade, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        flinks: typing.Union[MetaOapg.properties.flinks, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        mono: typing.Union[MetaOapg.properties.mono, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        truelayer: typing.Union[MetaOapg.properties.truelayer, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        finverse: typing.Union[MetaOapg.properties.finverse, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        basiq: typing.Union[MetaOapg.properties.basiq, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        belvo: typing.Union[MetaOapg.properties.belvo, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        finicity: typing.Union[MetaOapg.properties.finicity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        akoya: typing.Union[MetaOapg.properties.akoya, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        saltedge: typing.Union[MetaOapg.properties.saltedge, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        sophtron: typing.Union[MetaOapg.properties.sophtron, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinancialConnectionDetails':
        return super().__new__(
            cls,
            *_args,
            aggregator=aggregator,
            connection_status=connection_status,
            id=id,
            connection_status_updated_at=connection_status_updated_at,
            is_oauth=is_oauth,
            plaid=plaid,
            teller=teller,
            mx=mx,
            snaptrade=snaptrade,
            flinks=flinks,
            mono=mono,
            truelayer=truelayer,
            finverse=finverse,
            basiq=basiq,
            belvo=belvo,
            finicity=finicity,
            akoya=akoya,
            saltedge=saltedge,
            sophtron=sophtron,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.aggregator import Aggregator
