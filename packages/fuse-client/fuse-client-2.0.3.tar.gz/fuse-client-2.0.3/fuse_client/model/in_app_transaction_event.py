# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class InAppTransactionEvent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "amount",
            "event_type",
            "iso_currency_code",
            "merchant_name",
            "id",
            "status",
            "timestamp",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class event_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "in_app_transaction": "IN_APP_TRANSACTION",
                    }
                
                @schemas.classproperty
                def IN_APP_TRANSACTION(cls):
                    return cls("in_app_transaction")
        
            @staticmethod
            def status() -> typing.Type['InAppTransactionEventStatus']:
                return InAppTransactionEventStatus
            amount = schemas.NumberSchema
            iso_currency_code = schemas.StrSchema
            merchant_name = schemas.StrSchema
            timestamp = schemas.StrSchema
        
            @staticmethod
            def transaction_type() -> typing.Type['TransactionEventType']:
                return TransactionEventType
            balance = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "event_type": event_type,
                "status": status,
                "amount": amount,
                "iso_currency_code": iso_currency_code,
                "merchant_name": merchant_name,
                "timestamp": timestamp,
                "transaction_type": transaction_type,
                "balance": balance,
            }
    
    amount: MetaOapg.properties.amount
    event_type: MetaOapg.properties.event_type
    iso_currency_code: MetaOapg.properties.iso_currency_code
    merchant_name: MetaOapg.properties.merchant_name
    id: MetaOapg.properties.id
    status: 'InAppTransactionEventStatus'
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'InAppTransactionEventStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_name"]) -> MetaOapg.properties.merchant_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_type"]) -> 'TransactionEventType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "event_type", "status", "amount", "iso_currency_code", "merchant_name", "timestamp", "transaction_type", "balance", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'InAppTransactionEventStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_name"]) -> MetaOapg.properties.merchant_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_type"]) -> typing.Union['TransactionEventType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> typing.Union[MetaOapg.properties.balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "event_type", "status", "amount", "iso_currency_code", "merchant_name", "timestamp", "transaction_type", "balance", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        event_type: typing.Union[MetaOapg.properties.event_type, str, ],
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, str, ],
        merchant_name: typing.Union[MetaOapg.properties.merchant_name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        status: 'InAppTransactionEventStatus',
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, ],
        transaction_type: typing.Union['TransactionEventType', schemas.Unset] = schemas.unset,
        balance: typing.Union[MetaOapg.properties.balance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InAppTransactionEvent':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            event_type=event_type,
            iso_currency_code=iso_currency_code,
            merchant_name=merchant_name,
            id=id,
            status=status,
            timestamp=timestamp,
            transaction_type=transaction_type,
            balance=balance,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.in_app_transaction_event_status import InAppTransactionEventStatus
from fuse_client.model.transaction_event_type import TransactionEventType
