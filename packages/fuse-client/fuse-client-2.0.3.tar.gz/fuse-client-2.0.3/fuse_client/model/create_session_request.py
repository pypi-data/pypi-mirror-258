# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class CreateSessionRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "supported_financial_institution_aggregators",
            "entity",
            "products",
        }
        
        class properties:
            
            
            class supported_financial_institution_aggregators(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Aggregator']:
                        return Aggregator
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Aggregator'], typing.List['Aggregator']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supported_financial_institution_aggregators':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Aggregator':
                    return super().__getitem__(i)
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Product']:
                        return Product
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Product'], typing.List['Product']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Product':
                    return super().__getitem__(i)
        
            @staticmethod
            def entity() -> typing.Type['Entity']:
                return Entity
            
            
            class country_codes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CountryCode']:
                        return CountryCode
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CountryCode'], typing.List['CountryCode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country_codes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CountryCode':
                    return super().__getitem__(i)
            access_token = schemas.StrSchema
            is_web_view = schemas.BoolSchema
            __annotations__ = {
                "supported_financial_institution_aggregators": supported_financial_institution_aggregators,
                "products": products,
                "entity": entity,
                "country_codes": country_codes,
                "access_token": access_token,
                "is_web_view": is_web_view,
            }
    
    supported_financial_institution_aggregators: MetaOapg.properties.supported_financial_institution_aggregators
    entity: 'Entity'
    products: MetaOapg.properties.products
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supported_financial_institution_aggregators"]) -> MetaOapg.properties.supported_financial_institution_aggregators: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> 'Entity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_codes"]) -> MetaOapg.properties.country_codes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_web_view"]) -> MetaOapg.properties.is_web_view: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["supported_financial_institution_aggregators", "products", "entity", "country_codes", "access_token", "is_web_view", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supported_financial_institution_aggregators"]) -> MetaOapg.properties.supported_financial_institution_aggregators: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> 'Entity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_codes"]) -> typing.Union[MetaOapg.properties.country_codes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> typing.Union[MetaOapg.properties.access_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_web_view"]) -> typing.Union[MetaOapg.properties.is_web_view, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["supported_financial_institution_aggregators", "products", "entity", "country_codes", "access_token", "is_web_view", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        supported_financial_institution_aggregators: typing.Union[MetaOapg.properties.supported_financial_institution_aggregators, list, tuple, ],
        entity: 'Entity',
        products: typing.Union[MetaOapg.properties.products, list, tuple, ],
        country_codes: typing.Union[MetaOapg.properties.country_codes, list, tuple, schemas.Unset] = schemas.unset,
        access_token: typing.Union[MetaOapg.properties.access_token, str, schemas.Unset] = schemas.unset,
        is_web_view: typing.Union[MetaOapg.properties.is_web_view, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateSessionRequest':
        return super().__new__(
            cls,
            *_args,
            supported_financial_institution_aggregators=supported_financial_institution_aggregators,
            entity=entity,
            products=products,
            country_codes=country_codes,
            access_token=access_token,
            is_web_view=is_web_view,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.aggregator import Aggregator
from fuse_client.model.country_code import CountryCode
from fuse_client.model.entity import Entity
from fuse_client.model.product import Product
