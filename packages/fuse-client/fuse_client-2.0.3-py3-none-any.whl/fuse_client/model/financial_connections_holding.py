# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinancialConnectionsHolding(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "cost_basis",
            "institution_price",
            "security",
            "quantity",
            "value",
            "remote_account_id",
        }
        
        class properties:
            remote_account_id = schemas.StrSchema
            cost_basis = schemas.NumberSchema
            value = schemas.NumberSchema
            quantity = schemas.NumberSchema
            institution_price = schemas.NumberSchema
        
            @staticmethod
            def security() -> typing.Type['FinancialConnectionsInvestmentSecurity']:
                return FinancialConnectionsInvestmentSecurity
            __annotations__ = {
                "remote_account_id": remote_account_id,
                "cost_basis": cost_basis,
                "value": value,
                "quantity": quantity,
                "institution_price": institution_price,
                "security": security,
            }
    
    cost_basis: MetaOapg.properties.cost_basis
    institution_price: MetaOapg.properties.institution_price
    security: 'FinancialConnectionsInvestmentSecurity'
    quantity: MetaOapg.properties.quantity
    value: MetaOapg.properties.value
    remote_account_id: MetaOapg.properties.remote_account_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_account_id"]) -> MetaOapg.properties.remote_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_basis"]) -> MetaOapg.properties.cost_basis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_price"]) -> MetaOapg.properties.institution_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security"]) -> 'FinancialConnectionsInvestmentSecurity': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["remote_account_id", "cost_basis", "value", "quantity", "institution_price", "security", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_account_id"]) -> MetaOapg.properties.remote_account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_basis"]) -> MetaOapg.properties.cost_basis: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_price"]) -> MetaOapg.properties.institution_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security"]) -> 'FinancialConnectionsInvestmentSecurity': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["remote_account_id", "cost_basis", "value", "quantity", "institution_price", "security", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cost_basis: typing.Union[MetaOapg.properties.cost_basis, decimal.Decimal, int, float, ],
        institution_price: typing.Union[MetaOapg.properties.institution_price, decimal.Decimal, int, float, ],
        security: 'FinancialConnectionsInvestmentSecurity',
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, ],
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, ],
        remote_account_id: typing.Union[MetaOapg.properties.remote_account_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinancialConnectionsHolding':
        return super().__new__(
            cls,
            *_args,
            cost_basis=cost_basis,
            institution_price=institution_price,
            security=security,
            quantity=quantity,
            value=value,
            remote_account_id=remote_account_id,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.financial_connections_investment_security import FinancialConnectionsInvestmentSecurity
