# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinancialConnectionsInvestmentTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "date",
            "amount",
            "fees",
            "security",
            "quantity",
            "price",
            "remote_id",
            "description",
            "currency",
            "type",
            "remote_account_id",
        }
        
        class properties:
            remote_id = schemas.StrSchema
            remote_account_id = schemas.StrSchema
            amount = schemas.NumberSchema
            description = schemas.StrSchema
            fees = schemas.NumberSchema
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            date = schemas.DateTimeSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "cash": "CASH",
                        "buy": "BUY",
                        "sell": "SELL",
                        "transfer": "TRANSFER",
                        "fee": "FEE",
                        "cancel": "CANCEL",
                        "-": "HYPHEN_MINUS",
                    }
                
                @schemas.classproperty
                def CASH(cls):
                    return cls("cash")
                
                @schemas.classproperty
                def BUY(cls):
                    return cls("buy")
                
                @schemas.classproperty
                def SELL(cls):
                    return cls("sell")
                
                @schemas.classproperty
                def TRANSFER(cls):
                    return cls("transfer")
                
                @schemas.classproperty
                def FEE(cls):
                    return cls("fee")
                
                @schemas.classproperty
                def CANCEL(cls):
                    return cls("cancel")
                
                @schemas.classproperty
                def HYPHEN_MINUS(cls):
                    return cls("-")
            quantity = schemas.NumberSchema
            price = schemas.NumberSchema
        
            @staticmethod
            def security() -> typing.Type['FinancialConnectionsInvestmentSecurity']:
                return FinancialConnectionsInvestmentSecurity
            account_name = schemas.StrSchema
        
            @staticmethod
            def subtype() -> typing.Type['FinancialConnectionsInvestmentTransactionSubtype']:
                return FinancialConnectionsInvestmentTransactionSubtype
            __annotations__ = {
                "remote_id": remote_id,
                "remote_account_id": remote_account_id,
                "amount": amount,
                "description": description,
                "fees": fees,
                "currency": currency,
                "date": date,
                "type": type,
                "quantity": quantity,
                "price": price,
                "security": security,
                "account_name": account_name,
                "subtype": subtype,
            }
    
    date: MetaOapg.properties.date
    amount: MetaOapg.properties.amount
    fees: MetaOapg.properties.fees
    security: 'FinancialConnectionsInvestmentSecurity'
    quantity: MetaOapg.properties.quantity
    price: MetaOapg.properties.price
    remote_id: MetaOapg.properties.remote_id
    description: MetaOapg.properties.description
    currency: 'Currency'
    type: MetaOapg.properties.type
    remote_account_id: MetaOapg.properties.remote_account_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_id"]) -> MetaOapg.properties.remote_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_account_id"]) -> MetaOapg.properties.remote_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security"]) -> 'FinancialConnectionsInvestmentSecurity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'FinancialConnectionsInvestmentTransactionSubtype': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["remote_id", "remote_account_id", "amount", "description", "fees", "currency", "date", "type", "quantity", "price", "security", "account_name", "subtype", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_id"]) -> MetaOapg.properties.remote_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_account_id"]) -> MetaOapg.properties.remote_account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security"]) -> 'FinancialConnectionsInvestmentSecurity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_name"]) -> typing.Union[MetaOapg.properties.account_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union['FinancialConnectionsInvestmentTransactionSubtype', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["remote_id", "remote_account_id", "amount", "description", "fees", "currency", "date", "type", "quantity", "price", "security", "account_name", "subtype", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, datetime, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        fees: typing.Union[MetaOapg.properties.fees, decimal.Decimal, int, float, ],
        security: 'FinancialConnectionsInvestmentSecurity',
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        remote_id: typing.Union[MetaOapg.properties.remote_id, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        currency: 'Currency',
        type: typing.Union[MetaOapg.properties.type, str, ],
        remote_account_id: typing.Union[MetaOapg.properties.remote_account_id, str, ],
        account_name: typing.Union[MetaOapg.properties.account_name, str, schemas.Unset] = schemas.unset,
        subtype: typing.Union['FinancialConnectionsInvestmentTransactionSubtype', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinancialConnectionsInvestmentTransaction':
        return super().__new__(
            cls,
            *_args,
            date=date,
            amount=amount,
            fees=fees,
            security=security,
            quantity=quantity,
            price=price,
            remote_id=remote_id,
            description=description,
            currency=currency,
            type=type,
            remote_account_id=remote_account_id,
            account_name=account_name,
            subtype=subtype,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.currency import Currency
from fuse_client.model.financial_connections_investment_security import FinancialConnectionsInvestmentSecurity
from fuse_client.model.financial_connections_investment_transaction_subtype import FinancialConnectionsInvestmentTransactionSubtype
