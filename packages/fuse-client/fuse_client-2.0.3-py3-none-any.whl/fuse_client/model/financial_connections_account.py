# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinancialConnectionsAccount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "balance",
            "remote_id",
            "fingerprint",
            "name",
            "currency",
            "type",
            "remote_data",
        }
        
        class properties:
            remote_id = schemas.StrSchema
            currency = schemas.StrSchema
            fingerprint = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['AccountType']:
                return AccountType
        
            @staticmethod
            def balance() -> typing.Type['FinancialConnectionsAccountCachedBalance']:
                return FinancialConnectionsAccountCachedBalance
            remote_data = schemas.AnyTypeSchema
            
            
            class institution(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        name = schemas.StrSchema
                        __annotations__ = {
                            "name": name,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'institution':
                    return super().__new__(
                        cls,
                        *_args,
                        name=name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class mask(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mask':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def subtype() -> typing.Type['AccountSubtype']:
                return AccountSubtype
            
            
            class additional_balances(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FinancialConnectionsAccountCachedBalance']:
                        return FinancialConnectionsAccountCachedBalance
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['FinancialConnectionsAccountCachedBalance'], typing.List['FinancialConnectionsAccountCachedBalance']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additional_balances':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FinancialConnectionsAccountCachedBalance':
                    return super().__getitem__(i)
            __annotations__ = {
                "remote_id": remote_id,
                "currency": currency,
                "fingerprint": fingerprint,
                "name": name,
                "type": type,
                "balance": balance,
                "remote_data": remote_data,
                "institution": institution,
                "mask": mask,
                "subtype": subtype,
                "additional_balances": additional_balances,
            }
    
    balance: 'FinancialConnectionsAccountCachedBalance'
    remote_id: MetaOapg.properties.remote_id
    fingerprint: MetaOapg.properties.fingerprint
    name: MetaOapg.properties.name
    currency: MetaOapg.properties.currency
    type: 'AccountType'
    remote_data: MetaOapg.properties.remote_data
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_id"]) -> MetaOapg.properties.remote_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'AccountType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> 'FinancialConnectionsAccountCachedBalance': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution"]) -> MetaOapg.properties.institution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mask"]) -> MetaOapg.properties.mask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'AccountSubtype': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_balances"]) -> MetaOapg.properties.additional_balances: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["remote_id", "currency", "fingerprint", "name", "type", "balance", "remote_data", "institution", "mask", "subtype", "additional_balances", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_id"]) -> MetaOapg.properties.remote_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'AccountType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> 'FinancialConnectionsAccountCachedBalance': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union[MetaOapg.properties.institution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mask"]) -> typing.Union[MetaOapg.properties.mask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union['AccountSubtype', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_balances"]) -> typing.Union[MetaOapg.properties.additional_balances, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["remote_id", "currency", "fingerprint", "name", "type", "balance", "remote_data", "institution", "mask", "subtype", "additional_balances", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        balance: 'FinancialConnectionsAccountCachedBalance',
        remote_id: typing.Union[MetaOapg.properties.remote_id, str, ],
        fingerprint: typing.Union[MetaOapg.properties.fingerprint, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        type: 'AccountType',
        remote_data: typing.Union[MetaOapg.properties.remote_data, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        institution: typing.Union[MetaOapg.properties.institution, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        mask: typing.Union[MetaOapg.properties.mask, None, str, schemas.Unset] = schemas.unset,
        subtype: typing.Union['AccountSubtype', schemas.Unset] = schemas.unset,
        additional_balances: typing.Union[MetaOapg.properties.additional_balances, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinancialConnectionsAccount':
        return super().__new__(
            cls,
            *_args,
            balance=balance,
            remote_id=remote_id,
            fingerprint=fingerprint,
            name=name,
            currency=currency,
            type=type,
            remote_data=remote_data,
            institution=institution,
            mask=mask,
            subtype=subtype,
            additional_balances=additional_balances,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.account_subtype import AccountSubtype
from fuse_client.model.account_type import AccountType
from fuse_client.model.financial_connections_account_cached_balance import FinancialConnectionsAccountCachedBalance
