# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FuseApiError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "code",
            "details",
            "source",
            "title",
            "type",
            "request_id",
        }
        
        class properties:
            request_id = schemas.StrSchema
            title = schemas.StrSchema
            details = schemas.StrSchema
        
            @staticmethod
            def code() -> typing.Type['FuseApiErrorCode']:
                return FuseApiErrorCode
        
            @staticmethod
            def type() -> typing.Type['FuseApiErrorType']:
                return FuseApiErrorType
            
            
            class source(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "internal": "INTERNAL",
                        "aggregator": "AGGREGATOR",
                    }
                
                @schemas.classproperty
                def INTERNAL(cls):
                    return cls("internal")
                
                @schemas.classproperty
                def AGGREGATOR(cls):
                    return cls("aggregator")
            
            
            class data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def aggregator() -> typing.Type['Aggregator']:
                            return Aggregator
                        
                        
                        class errors(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                @staticmethod
                                def items() -> typing.Type['FuseApiAggregatorError']:
                                    return FuseApiAggregatorError
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple['FuseApiAggregatorError'], typing.List['FuseApiAggregatorError']],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'errors':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> 'FuseApiAggregatorError':
                                return super().__getitem__(i)
                        __annotations__ = {
                            "aggregator": aggregator,
                            "errors": errors,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["aggregator"]) -> 'Aggregator': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["aggregator", "errors", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["aggregator"]) -> typing.Union['Aggregator', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union[MetaOapg.properties.errors, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["aggregator", "errors", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    aggregator: typing.Union['Aggregator', schemas.Unset] = schemas.unset,
                    errors: typing.Union[MetaOapg.properties.errors, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *_args,
                        aggregator=aggregator,
                        errors=errors,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "request_id": request_id,
                "title": title,
                "details": details,
                "code": code,
                "type": type,
                "source": source,
                "data": data,
            }
    
    code: 'FuseApiErrorCode'
    details: MetaOapg.properties.details
    source: MetaOapg.properties.source
    title: MetaOapg.properties.title
    type: 'FuseApiErrorType'
    request_id: MetaOapg.properties.request_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> 'FuseApiErrorCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'FuseApiErrorType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "title", "details", "code", "type", "source", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> 'FuseApiErrorCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'FuseApiErrorType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "title", "details", "code", "type", "source", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        code: 'FuseApiErrorCode',
        details: typing.Union[MetaOapg.properties.details, str, ],
        source: typing.Union[MetaOapg.properties.source, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: 'FuseApiErrorType',
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FuseApiError':
        return super().__new__(
            cls,
            *_args,
            code=code,
            details=details,
            source=source,
            title=title,
            type=type,
            request_id=request_id,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.aggregator import Aggregator
from fuse_client.model.fuse_api_aggregator_error import FuseApiAggregatorError
from fuse_client.model.fuse_api_error_code import FuseApiErrorCode
from fuse_client.model.fuse_api_error_type import FuseApiErrorType
