# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinancialConnectionsAccountLiability(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class aprs(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        apr_percentage = schemas.NumberSchema
                                        apr_type = schemas.StrSchema
                                        __annotations__ = {
                                            "apr_percentage": apr_percentage,
                                            "apr_type": apr_type,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["apr_percentage"]) -> MetaOapg.properties.apr_percentage: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["apr_type"]) -> MetaOapg.properties.apr_type: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["apr_percentage", "apr_type", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["apr_percentage"]) -> typing.Union[MetaOapg.properties.apr_percentage, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["apr_type"]) -> typing.Union[MetaOapg.properties.apr_type, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apr_percentage", "apr_type", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    apr_percentage: typing.Union[MetaOapg.properties.apr_percentage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                    apr_type: typing.Union[MetaOapg.properties.apr_type, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        apr_percentage=apr_percentage,
                                        apr_type=apr_type,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'aprs':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    interest_rate_percentage = schemas.NumberSchema
                    origination_principal_amount = schemas.NumberSchema
                    next_payment_due_date = schemas.StrSchema
                    last_payment_date = schemas.StrSchema
                    last_payment_amount = schemas.NumberSchema
                    minimum_payment_amount = schemas.NumberSchema
                    __annotations__ = {
                        "aprs": aprs,
                        "interest_rate_percentage": interest_rate_percentage,
                        "origination_principal_amount": origination_principal_amount,
                        "next_payment_due_date": next_payment_due_date,
                        "last_payment_date": last_payment_date,
                        "last_payment_amount": last_payment_amount,
                        "minimum_payment_amount": minimum_payment_amount,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["aprs"]) -> MetaOapg.properties.aprs: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["interest_rate_percentage"]) -> MetaOapg.properties.interest_rate_percentage: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["origination_principal_amount"]) -> MetaOapg.properties.origination_principal_amount: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["next_payment_due_date"]) -> MetaOapg.properties.next_payment_due_date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["last_payment_date"]) -> MetaOapg.properties.last_payment_date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["last_payment_amount"]) -> MetaOapg.properties.last_payment_amount: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["minimum_payment_amount"]) -> MetaOapg.properties.minimum_payment_amount: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["aprs", "interest_rate_percentage", "origination_principal_amount", "next_payment_due_date", "last_payment_date", "last_payment_amount", "minimum_payment_amount", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["aprs"]) -> typing.Union[MetaOapg.properties.aprs, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["interest_rate_percentage"]) -> typing.Union[MetaOapg.properties.interest_rate_percentage, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["origination_principal_amount"]) -> typing.Union[MetaOapg.properties.origination_principal_amount, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["next_payment_due_date"]) -> typing.Union[MetaOapg.properties.next_payment_due_date, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["last_payment_date"]) -> typing.Union[MetaOapg.properties.last_payment_date, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["last_payment_amount"]) -> typing.Union[MetaOapg.properties.last_payment_amount, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["minimum_payment_amount"]) -> typing.Union[MetaOapg.properties.minimum_payment_amount, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["aprs", "interest_rate_percentage", "origination_principal_amount", "next_payment_due_date", "last_payment_date", "last_payment_amount", "minimum_payment_amount", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                aprs: typing.Union[MetaOapg.properties.aprs, list, tuple, schemas.Unset] = schemas.unset,
                interest_rate_percentage: typing.Union[MetaOapg.properties.interest_rate_percentage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                origination_principal_amount: typing.Union[MetaOapg.properties.origination_principal_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                next_payment_due_date: typing.Union[MetaOapg.properties.next_payment_due_date, str, schemas.Unset] = schemas.unset,
                last_payment_date: typing.Union[MetaOapg.properties.last_payment_date, str, schemas.Unset] = schemas.unset,
                last_payment_amount: typing.Union[MetaOapg.properties.last_payment_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                minimum_payment_amount: typing.Union[MetaOapg.properties.minimum_payment_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    aprs=aprs,
                    interest_rate_percentage=interest_rate_percentage,
                    origination_principal_amount=origination_principal_amount,
                    next_payment_due_date=next_payment_due_date,
                    last_payment_date=last_payment_date,
                    last_payment_amount=last_payment_amount,
                    minimum_payment_amount=minimum_payment_amount,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                FinancialConnectionsAccount,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinancialConnectionsAccountLiability':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.financial_connections_account import FinancialConnectionsAccount
