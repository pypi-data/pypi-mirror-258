# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinancialConnectionsInvestmentSecurity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "symbol",
            "remote_id",
            "currency",
        }
        
        class properties:
            remote_id = schemas.StrSchema
            symbol = schemas.StrSchema
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            isin = schemas.StrSchema
            sedol = schemas.StrSchema
            cusip = schemas.StrSchema
            close_price = schemas.NumberSchema
            name = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['FinancialConnectionsInvestmentSecurityType']:
                return FinancialConnectionsInvestmentSecurityType
            
            
            class exchange(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        mic_code = schemas.StrSchema
                        suffix = schemas.StrSchema
                        __annotations__ = {
                            "mic_code": mic_code,
                            "suffix": suffix,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mic_code"]) -> MetaOapg.properties.mic_code: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["mic_code", "suffix", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mic_code"]) -> typing.Union[MetaOapg.properties.mic_code, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mic_code", "suffix", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    mic_code: typing.Union[MetaOapg.properties.mic_code, str, schemas.Unset] = schemas.unset,
                    suffix: typing.Union[MetaOapg.properties.suffix, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'exchange':
                    return super().__new__(
                        cls,
                        *_args,
                        mic_code=mic_code,
                        suffix=suffix,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "remote_id": remote_id,
                "symbol": symbol,
                "currency": currency,
                "isin": isin,
                "sedol": sedol,
                "cusip": cusip,
                "close_price": close_price,
                "name": name,
                "type": type,
                "exchange": exchange,
            }
    
    symbol: MetaOapg.properties.symbol
    remote_id: MetaOapg.properties.remote_id
    currency: 'Currency'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_id"]) -> MetaOapg.properties.remote_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isin"]) -> MetaOapg.properties.isin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sedol"]) -> MetaOapg.properties.sedol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cusip"]) -> MetaOapg.properties.cusip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["close_price"]) -> MetaOapg.properties.close_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'FinancialConnectionsInvestmentSecurityType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchange"]) -> MetaOapg.properties.exchange: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["remote_id", "symbol", "currency", "isin", "sedol", "cusip", "close_price", "name", "type", "exchange", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_id"]) -> MetaOapg.properties.remote_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isin"]) -> typing.Union[MetaOapg.properties.isin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sedol"]) -> typing.Union[MetaOapg.properties.sedol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cusip"]) -> typing.Union[MetaOapg.properties.cusip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["close_price"]) -> typing.Union[MetaOapg.properties.close_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['FinancialConnectionsInvestmentSecurityType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchange"]) -> typing.Union[MetaOapg.properties.exchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["remote_id", "symbol", "currency", "isin", "sedol", "cusip", "close_price", "name", "type", "exchange", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        symbol: typing.Union[MetaOapg.properties.symbol, str, ],
        remote_id: typing.Union[MetaOapg.properties.remote_id, str, ],
        currency: 'Currency',
        isin: typing.Union[MetaOapg.properties.isin, str, schemas.Unset] = schemas.unset,
        sedol: typing.Union[MetaOapg.properties.sedol, str, schemas.Unset] = schemas.unset,
        cusip: typing.Union[MetaOapg.properties.cusip, str, schemas.Unset] = schemas.unset,
        close_price: typing.Union[MetaOapg.properties.close_price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        type: typing.Union['FinancialConnectionsInvestmentSecurityType', schemas.Unset] = schemas.unset,
        exchange: typing.Union[MetaOapg.properties.exchange, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinancialConnectionsInvestmentSecurity':
        return super().__new__(
            cls,
            *_args,
            symbol=symbol,
            remote_id=remote_id,
            currency=currency,
            isin=isin,
            sedol=sedol,
            cusip=cusip,
            close_price=close_price,
            name=name,
            type=type,
            exchange=exchange,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.currency import Currency
from fuse_client.model.financial_connections_investment_security_type import FinancialConnectionsInvestmentSecurityType
