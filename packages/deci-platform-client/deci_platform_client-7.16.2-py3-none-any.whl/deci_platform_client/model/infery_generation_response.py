# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class InferyGenerationResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "outputs",
            "generationMs",
            "generatedTokens",
            "queuedMs",
            "status",
        }
        
        class properties:
            
            
            class outputs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'outputs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            status = schemas.StrSchema
            queuedMs = schemas.NumberSchema
            generationMs = schemas.NumberSchema
            generatedTokens = schemas.IntSchema
            error = schemas.StrSchema
            __annotations__ = {
                "outputs": outputs,
                "status": status,
                "queuedMs": queuedMs,
                "generationMs": generationMs,
                "generatedTokens": generatedTokens,
                "error": error,
            }
    
    outputs: MetaOapg.properties.outputs
    generationMs: MetaOapg.properties.generationMs
    generatedTokens: MetaOapg.properties.generatedTokens
    queuedMs: MetaOapg.properties.queuedMs
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputs"]) -> MetaOapg.properties.outputs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queuedMs"]) -> MetaOapg.properties.queuedMs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generationMs"]) -> MetaOapg.properties.generationMs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generatedTokens"]) -> MetaOapg.properties.generatedTokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["outputs", "status", "queuedMs", "generationMs", "generatedTokens", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputs"]) -> MetaOapg.properties.outputs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queuedMs"]) -> MetaOapg.properties.queuedMs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generationMs"]) -> MetaOapg.properties.generationMs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generatedTokens"]) -> MetaOapg.properties.generatedTokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["outputs", "status", "queuedMs", "generationMs", "generatedTokens", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        outputs: typing.Union[MetaOapg.properties.outputs, list, tuple, ],
        generationMs: typing.Union[MetaOapg.properties.generationMs, decimal.Decimal, int, float, ],
        generatedTokens: typing.Union[MetaOapg.properties.generatedTokens, decimal.Decimal, int, ],
        queuedMs: typing.Union[MetaOapg.properties.queuedMs, decimal.Decimal, int, float, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        error: typing.Union[MetaOapg.properties.error, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InferyGenerationResponse':
        return super().__new__(
            cls,
            *_args,
            outputs=outputs,
            generationMs=generationMs,
            generatedTokens=generatedTokens,
            queuedMs=queuedMs,
            status=status,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )
