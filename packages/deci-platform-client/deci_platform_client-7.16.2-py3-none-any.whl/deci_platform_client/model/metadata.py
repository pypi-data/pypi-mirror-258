# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class Metadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "inputTokenCount",
            "decodeEnqueueTime",
            "decodeDequeueTime",
            "generatedTokenCount",
            "firstStreamedTokenTime",
            "prefillEnqueueTime",
            "prefillDequeueTime",
            "finalizeTime",
            "submissionTime",
            "decodeBatchSizes",
        }
        
        class properties:
            inputTokenCount = schemas.IntSchema
            generatedTokenCount = schemas.IntSchema
            
            
            class decodeBatchSizes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'decodeBatchSizes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            submissionTime = schemas.NumberSchema
            prefillEnqueueTime = schemas.NumberSchema
            prefillDequeueTime = schemas.NumberSchema
            decodeEnqueueTime = schemas.NumberSchema
            decodeDequeueTime = schemas.NumberSchema
            finalizeTime = schemas.NumberSchema
            firstStreamedTokenTime = schemas.NumberSchema
            __annotations__ = {
                "inputTokenCount": inputTokenCount,
                "generatedTokenCount": generatedTokenCount,
                "decodeBatchSizes": decodeBatchSizes,
                "submissionTime": submissionTime,
                "prefillEnqueueTime": prefillEnqueueTime,
                "prefillDequeueTime": prefillDequeueTime,
                "decodeEnqueueTime": decodeEnqueueTime,
                "decodeDequeueTime": decodeDequeueTime,
                "finalizeTime": finalizeTime,
                "firstStreamedTokenTime": firstStreamedTokenTime,
            }
    
    inputTokenCount: MetaOapg.properties.inputTokenCount
    decodeEnqueueTime: MetaOapg.properties.decodeEnqueueTime
    decodeDequeueTime: MetaOapg.properties.decodeDequeueTime
    generatedTokenCount: MetaOapg.properties.generatedTokenCount
    firstStreamedTokenTime: MetaOapg.properties.firstStreamedTokenTime
    prefillEnqueueTime: MetaOapg.properties.prefillEnqueueTime
    prefillDequeueTime: MetaOapg.properties.prefillDequeueTime
    finalizeTime: MetaOapg.properties.finalizeTime
    submissionTime: MetaOapg.properties.submissionTime
    decodeBatchSizes: MetaOapg.properties.decodeBatchSizes
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputTokenCount"]) -> MetaOapg.properties.inputTokenCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generatedTokenCount"]) -> MetaOapg.properties.generatedTokenCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decodeBatchSizes"]) -> MetaOapg.properties.decodeBatchSizes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submissionTime"]) -> MetaOapg.properties.submissionTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefillEnqueueTime"]) -> MetaOapg.properties.prefillEnqueueTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefillDequeueTime"]) -> MetaOapg.properties.prefillDequeueTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decodeEnqueueTime"]) -> MetaOapg.properties.decodeEnqueueTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decodeDequeueTime"]) -> MetaOapg.properties.decodeDequeueTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalizeTime"]) -> MetaOapg.properties.finalizeTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstStreamedTokenTime"]) -> MetaOapg.properties.firstStreamedTokenTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["inputTokenCount", "generatedTokenCount", "decodeBatchSizes", "submissionTime", "prefillEnqueueTime", "prefillDequeueTime", "decodeEnqueueTime", "decodeDequeueTime", "finalizeTime", "firstStreamedTokenTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputTokenCount"]) -> MetaOapg.properties.inputTokenCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generatedTokenCount"]) -> MetaOapg.properties.generatedTokenCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decodeBatchSizes"]) -> MetaOapg.properties.decodeBatchSizes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submissionTime"]) -> MetaOapg.properties.submissionTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefillEnqueueTime"]) -> MetaOapg.properties.prefillEnqueueTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefillDequeueTime"]) -> MetaOapg.properties.prefillDequeueTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decodeEnqueueTime"]) -> MetaOapg.properties.decodeEnqueueTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decodeDequeueTime"]) -> MetaOapg.properties.decodeDequeueTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalizeTime"]) -> MetaOapg.properties.finalizeTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstStreamedTokenTime"]) -> MetaOapg.properties.firstStreamedTokenTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["inputTokenCount", "generatedTokenCount", "decodeBatchSizes", "submissionTime", "prefillEnqueueTime", "prefillDequeueTime", "decodeEnqueueTime", "decodeDequeueTime", "finalizeTime", "firstStreamedTokenTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        inputTokenCount: typing.Union[MetaOapg.properties.inputTokenCount, decimal.Decimal, int, ],
        decodeEnqueueTime: typing.Union[MetaOapg.properties.decodeEnqueueTime, decimal.Decimal, int, float, ],
        decodeDequeueTime: typing.Union[MetaOapg.properties.decodeDequeueTime, decimal.Decimal, int, float, ],
        generatedTokenCount: typing.Union[MetaOapg.properties.generatedTokenCount, decimal.Decimal, int, ],
        firstStreamedTokenTime: typing.Union[MetaOapg.properties.firstStreamedTokenTime, decimal.Decimal, int, float, ],
        prefillEnqueueTime: typing.Union[MetaOapg.properties.prefillEnqueueTime, decimal.Decimal, int, float, ],
        prefillDequeueTime: typing.Union[MetaOapg.properties.prefillDequeueTime, decimal.Decimal, int, float, ],
        finalizeTime: typing.Union[MetaOapg.properties.finalizeTime, decimal.Decimal, int, float, ],
        submissionTime: typing.Union[MetaOapg.properties.submissionTime, decimal.Decimal, int, float, ],
        decodeBatchSizes: typing.Union[MetaOapg.properties.decodeBatchSizes, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Metadata':
        return super().__new__(
            cls,
            *_args,
            inputTokenCount=inputTokenCount,
            decodeEnqueueTime=decodeEnqueueTime,
            decodeDequeueTime=decodeDequeueTime,
            generatedTokenCount=generatedTokenCount,
            firstStreamedTokenTime=firstStreamedTokenTime,
            prefillEnqueueTime=prefillEnqueueTime,
            prefillDequeueTime=prefillDequeueTime,
            finalizeTime=finalizeTime,
            submissionTime=submissionTime,
            decodeBatchSizes=decodeBatchSizes,
            _configuration=_configuration,
            **kwargs,
        )
