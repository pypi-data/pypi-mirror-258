# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class GenerateIn(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "maxGeneratedTokens",
            "batchSize",
            "prompt",
        }
        
        class properties:
            batchSize = schemas.IntSchema
            maxGeneratedTokens = schemas.IntSchema
            prompt = schemas.StrSchema
            __annotations__ = {
                "batchSize": batchSize,
                "maxGeneratedTokens": maxGeneratedTokens,
                "prompt": prompt,
            }
    
    maxGeneratedTokens: MetaOapg.properties.maxGeneratedTokens
    batchSize: MetaOapg.properties.batchSize
    prompt: MetaOapg.properties.prompt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchSize"]) -> MetaOapg.properties.batchSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxGeneratedTokens"]) -> MetaOapg.properties.maxGeneratedTokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["batchSize", "maxGeneratedTokens", "prompt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchSize"]) -> MetaOapg.properties.batchSize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxGeneratedTokens"]) -> MetaOapg.properties.maxGeneratedTokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["batchSize", "maxGeneratedTokens", "prompt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        maxGeneratedTokens: typing.Union[MetaOapg.properties.maxGeneratedTokens, decimal.Decimal, int, ],
        batchSize: typing.Union[MetaOapg.properties.batchSize, decimal.Decimal, int, ],
        prompt: typing.Union[MetaOapg.properties.prompt, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GenerateIn':
        return super().__new__(
            cls,
            *_args,
            maxGeneratedTokens=maxGeneratedTokens,
            batchSize=batchSize,
            prompt=prompt,
            _configuration=_configuration,
            **kwargs,
        )
