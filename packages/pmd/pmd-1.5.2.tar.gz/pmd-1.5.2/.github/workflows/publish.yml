name: publish

on:
  push:
    # Avoid using all the resources/limits available by checking only
    # relevant branches and tags. Other branches can be checked via PRs.
    branches: [main]
    tags: ["v*"] # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request: # Run in every PR
  workflow_dispatch: # Allow manually triggering the workflow
  schedule:
    # Run roughly every 15 days at 00:00 UTC
    # (useful to check if updates on dependencies break the package)
    - cron: "0 0 1,16 * *"

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      wheel-distribution: ${{ steps.wheel-distribution.outputs.path }}
    steps:
      - uses: actions/checkout@v2
        with: { fetch-depth: 0 } # deep clone for setuptools-scm
      - uses: actions/setup-python@v2
        with: { python-version: "3.10" }
      - name: Lint code
        run: pipx run pre-commit run --all-files --show-diff-on-failure
      - name: Build package distribution files
        run: pipx run tox -e clean,build
      - name: Record the path of wheel distribution
        id: wheel-distribution
        run: echo "::set-output name=path::$(ls dist/*.whl)"
      - name: Store the distribution files for use in other stages
        # `tests` and `publish` will use the same pre-built distributions,
        # so we make sure to release the exact same package that was tested
        uses: actions/upload-artifact@v2
        with:
          name: python-distribution-files
          path: dist/
          retention-days: 1

  publish:
    needs: prepare
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with: { python-version: "3.10" }
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v2
        with: { name: python-distribution-files, path: dist/ }
      - name: Publish Package
        env:
          # - https://pypi.org/help/#apitoken
          # - https://docs.github.com/en/actions/security-guides/encrypted-secrets
          TWINE_REPOSITORY: pypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: pipx run tox -e publish
