"use strict";(self.webpackChunkjupyterwebcatconnect=self.webpackChunkjupyterwebcatconnect||[]).push([[537],{537:(o,e,t)=>{t.r(e),t.d(e,{default:()=>i});var n=t(922),l=t(361),c=t(546),r=t(256);class s extends Error{constructor(o="Not Found"){super(o),this.name="NotFoundError"}}class a{createNew(o,e){const t=new n.ToolbarButton({className:"myButton",label:"Submit to Web-Cat",onClick:async()=>{var t;console.log("Submit button clicked!"),console.log(document.cookie);const a=(null===(t=o.context.contentsModel)||void 0===t?void 0:t.path)||"";var i;console.log(a),await e.save();try{const o=document.querySelectorAll(".jp-Notebook-cell"),e=Array.from(o);if(console.log(e[0]),0===e.length)throw console.log("No config cell found"),new s("No config cell found");const t=e[0].querySelector(".jp-InputArea-editor").textContent||"";console.log(t);const n=/course: (\d+)/,l=/a: (.+?)#/,c=/d: (.+?)$/,r=(t.match(n)||[])[1]||null,u=(t.match(l)||[])[1]||null,d=(t.match(c)||[])[1]||null;if(console.log(r),console.log(u),console.log(d),!r||!u||!d)throw new SyntaxError("Invalid config cell");i={filename:a,course:r,a:u,d}}catch(o){if(o instanceof s)return void alert("No cell found. Notebook is empty. Please add a cell with the assignment parameters");if(o instanceof SyntaxError)return void alert("Invalid config cell found. Make sure your first cell contains your assignment parameters. For example: \n\n# Do not edit this cell\n\n# course: 123\n# a: Assignment_1\n# d: VT")}console.log(i);const u=c.ServerConnection.makeSettings(),d=l.URLExt.join(u.baseUrl,"jupyterWebCatConnect","webcat");let g;console.log(d);const b={method:"PUT",body:JSON.stringify(i),headers:{"Content-Type":"application/json"}};console.log(b);try{g=await c.ServerConnection.makeRequest(d,b,u)}catch(o){throw new c.ServerConnection.NetworkError(o)}if(console.log(document.cookie),!g.ok){const o=await g.json();throw console.log(o),new c.ServerConnection.ResponseError(g,o)}try{const o=await g.json();console.log("data",o);const e=document.createElement("iframe");console.log("1"),e.src=o.redirectLink,e.width="650",e.height="500";const t=document.createElement("div");t.appendChild(e),console.log("2");const l=new r.Widget({node:t});console.log("3"),console.log("bodyWidget",l),console.log("showDialog",n.showDialog),console.log("Dialog.warnButton",l.parent),(0,n.showDialog)({title:"Web-CAT",body:l,buttons:[n.Dialog.warnButton({label:"Close"})]}),console.log("4"),console.log("Dialog.warnButton",l.parent)}catch(o){console.error("Error processing response:",o),alert("Error processing response. Please check the server logs for more details.")}},tooltip:"Submit to WebCat"});return o.toolbar.insertItem(9,"Submit to Web-Cat",t),t}}const i={id:"jupyterWebCatConnect:plugin",description:"A JupyterLab extension to submit notebook to webcat",autoStart:!0,activate:o=>{console.log("jupyterWebCatConnect is activated!");const e=new a;o.docRegistry.addWidgetExtension("Notebook",e)}}}}]);