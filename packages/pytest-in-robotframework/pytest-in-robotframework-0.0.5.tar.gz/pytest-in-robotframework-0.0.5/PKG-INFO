Metadata-Version: 2.1
Name: pytest-in-robotframework
Version: 0.0.5
Summary: The extension enables easy execution of pytest tests within the Robot Framework environment.
Author: Petr Kus
Author-email: petrkus@email.cz
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pytest
Requires-Dist: robotframework>=6.1
Requires-Dist: decorator
Requires-Dist: pytest-is-running

# pytest-in-robotframework
*pytest-in-robotframework* enables the running of PyTests within the Robot Framework, allowing users to leverage the advantages of both frameworks.

To achieve this integration, simply add the decorator '\@pytest_execute' above all the PyTest fixtures within your Python tests/keywords in Python libraries.

At present, this code serves as a proof of concept. It is hardcoded to use the TestExperiment.py file (your library must be named TestExperiment) and the TestExperiment class. 
PyTest's console logs are captured as informational messages in Robot Framework logs. If any test in PyTest fails, the entire keyword in Robot Framework fails.

Generalization of this code will be made in the near future, along with enhanced logging from PyTest.

## Example

Robot Framework file:
```robotframework
#The Example of usage  - suite_name.robot file

*** Settings ***
Documentation     Proof of Concept integration PyTest under hood of Roboto Framework
Library  TestExperiment.py


*** Test Cases ***
Login User with Password
    Open Web Page  https://www.saucedemo.com/
    Test Login As  user  password
```

Python File: 
```python
#The Example of usage  - TestExperiment.py file
from selenium import webdriver
from selenium.webdriver.common.by import By
import time

import pytest-in-robotframework #EXAMPLE USAGE - must import!



class TestExperiment: #EXAMPLE USAGE - must have this name!
    options = webdriver.ChromeOptions()
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    driver = webdriver.Chrome(options=options)

    def open_web_page(self,page): 
        self.driver.get(page)

    @pytest_execute #EXAMPLE USAGE - this is the new decorator that execute the keyword in PyTest instead Robot Framework!
    #@pytest.mark.parametrize("user,password", [("standard_user", "secret_sauce"),("locked_out_user", "secret_sauce"),("problem_user", "secret_sauce")]) #failing example
    @pytest.mark.parametrize("user,password", [("standard_user", "secret_sauce"),("problem_user", "secret_sauce")]) #passing example
    def test_login_as(self,user,password):
        #assert False
        print("vykonal jsem prvni radek test_login_as...")
        time.sleep(1)
        username = self.driver.find_element(By.ID,'user-name')
        username.clear()
        username.send_keys(user)
        my_password = self.driver.find_element(By.ID,'password')
        my_password.clear()
        my_password.send_keys(password)
        time.sleep(1)
        login_button = self.driver.find_element(By.ID, 'login-button')
        login_button.click()
        print(__name__)
        time.sleep(1)
        button = self.driver.find_element(By.ID, 'react-burger-menu-btn')
        button.click()
        time.sleep(1)
        button = self.driver.find_element(By.ID, 'logout_sidebar_link')
        button.click()
        time.sleep(1)
```
