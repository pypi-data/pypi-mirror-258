import os
import datetime
import subprocess
import json5
import json

from pathlib import Path

import EVMVerifier.certoraContext as Ctx
from Shared import certoraUtils as Util

DEFAULT_RUNS_NUMBER = 3


def _mutation_conf_header() -> str:
    header = "/*\nThis mutation configuration file was generated by certoraRun \n"
    current_datetime = datetime.datetime.now()
    formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M")
    header += f"creation date: {formatted_datetime}\n\n"
    header += f"client version: {Ctx.get_client_version()}\n\n"
    header += f"current directory: {os.getcwd()}\n*/\n\n"

    header += "{\n"
    header += '"gambit": {\n\n'
    return header


def _mutation_conf_filename(context: Ctx.CertoraContext, build_arg_contract_file: str) -> str:
    result = ''

    if len(context.file_paths) > 1:
        result += f"\t\t// '{build_arg_contract_file}' was selected randomly.\n" \
                  f"\t\t// any one the of the contract files {context.file_paths} could have been set \n\n"
    result += f'\t\t"filename": "{build_arg_contract_file}"'
    return result


def _mutation_conf_solc(context: Ctx.CertoraContext, compiler_ver_to_run: str) -> str:
    result = ''
    solc_cmd = Path(compiler_ver_to_run).name
    if context.solc_map:
        result += f"\t\t// '{solc_cmd}' was selected based the value of solc_map attribute " \
                  f"{context.solc_map}.\n"
    elif context.solc:
        result += f"\t\t// '{solc_cmd}' was selected based the value of solc attribute {context.solc}.\n"
    else:
        result += f"\t\t// '{Util.DEFAULT_SOLC}' is the default solc version"

    process_result = subprocess.run(f'{compiler_ver_to_run} --version', capture_output=True, text=True, shell=True)

    if process_result.returncode == 0:
        output_lines = process_result.stdout.splitlines()

        if len(output_lines) >= 2:
            result += f"\t\t// actual compiler version used: {output_lines[1]}\n\n"

    result += f'\t\t"solc": "{solc_cmd}"'
    return result


def _mutation_conf_tail() -> str:
    prover_conf_path = Util.get_last_conf_file()
    result = '\t}\n}\n\n\n\n/*\nThe original prover conf:\n=========================\n'

    with prover_conf_path.open(mode="r") as f:
        for line in f:
            result += line
    result += '\n*/'
    return result


def _mutation_conf_runs() -> str:
    runs_default = DEFAULT_RUNS_NUMBER
    result = f"\t\t// number of runs is {runs_default} by default, can accept any positive integer value\n\n"
    result += f'\t\t"num_mutants": {runs_default}'
    return result


def _mutation_conf_remappings(context: Ctx.CertoraContext) -> str:
    result = "\t\t// rempapping attributes is generated from the attribute 'packages', 'packages_path' and from a " \
             "remappings.txt file\n\n"
    if context.remappings:
        formatted_list = [f'"{item}"' for item in context.remappings]
        result += f'\t\t"solc_remappings": [{", ".join(formatted_list)}]'
    return result


def _mutation_conf_optimize(context: Ctx.CertoraContext) -> str:
    result = "\t\t// optimize attributes is generated from the Prover attributes 'optimize' or 'optimize_map' \n\n"
    if context.solc_optimize or context.solc_optimize_map:
        result += '\t\t"solc_optimize": true'
    else:
        result += '\t\t// "solc_optimize": true'
    return result


def _mutation_conf_solc_allow_paths(context: Ctx.CertoraContext) -> str:
    result = "\t\t// solc_allow_paths attributes is generated from the attribute 'packages', 'packages_path' " \
             "and from a remappings.txt file\n\n"

    if context.solc_cmd_allow_paths:
        path_list = [s.strip('"') for s in context.solc_cmd_allow_paths]  # remove enclosing "
        # set of all paths as relative paths inside double quotes
        path_list_set = set(['\"' + os.path.relpath(s, '.') + '\"' for s in path_list])
        result += f'\t\t"solc_allow_paths": [{", ".join(path_list_set)}]'
    else:
        result += '\t\t"// solc_allow_paths": []'
    return result


@Util.CallOnce
def generate_mutation_conf(context: Ctx.CertoraContext, build_arg_contract_file: str, compiler_ver_to_run: str) -> None:
    json_str = _mutation_conf_header()
    json_str += _mutation_conf_filename(context, build_arg_contract_file)
    json_str += ',\n' + _mutation_conf_solc(context, compiler_ver_to_run)
    json_str += ',\n' + _mutation_conf_runs()
    json_str += ',\n' + _mutation_conf_optimize(context)
    json_str += ',\n' + _mutation_conf_solc_allow_paths(context)
    json_str += ',\n' + _mutation_conf_remappings(context)
    json_str += _mutation_conf_tail()
    annotated_file_path = 'annotated.' + context.generate_mutation_conf
    gambit_file_path = 'gambit.' + context.generate_mutation_conf

    with open(annotated_file_path, "w") as file:
        file.write(json_str)

    data = json5.loads(json_str)

    with open(context.generate_mutation_conf, 'w') as file:
        json.dump(data, file, indent=2)

    with open(gambit_file_path, 'w') as file:
        json.dump(data['gambit'], file, indent=2)
