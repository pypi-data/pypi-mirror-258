from pydantic import BaseModel, Field, ConfigDictfrom mikrotikapi.schemes.fields import (    comment_field,    id_field,    field_gen,)from mikrotikapi.schemes.groups import (    AddressMatchGroup,    PortProtocolGroup,    InterfaceListGroup,    MarkGroup,)from mikrotikapi.utils.api_path import api_path# chain change default valueclass MangleScheme(    AddressMatchGroup,    PortProtocolGroup,    InterfaceListGroup,    MarkGroup,    BaseModel,):    id: str = id_field    action: str = Field(None)    disable: bool = Field(None, exclude=True)    disabled: bool = Field(None)    dynamic: bool = Field(None, exclude=True)    invalid: bool = Field(None, exclude=True)    comment: str = comment_field    log: bool = Field(None, exclude=True)    log_prefix: str = field_gen(None, name="log_prefix")    new_routing_mark: str = field_gen("", name="new_routing_mark")    @property    def tariff(self) -> str | None:        try:            return f"{self.comment.split(':')[0]}"        except AttributeError:            return None    # @computed_field    @property    def profile_id_validate(self) -> int | None:        try:            return int(self.comment.split(":")[1])        except (AttributeError, ValueError, IndexError):            return None    @property    def comment_value_0(self) -> str | None:        try:            return self.comment.split(":")[0]        except (AttributeError, IndexError):            return None    @property    def comment_value_1(self) -> str | None:        try:            return self.comment.split(":")[1]        except (AttributeError, IndexError):            return None    @property    def comment_value_2(self) -> str | None:        try:            return self.comment.split(":")[2]        except (AttributeError, IndexError):            return None    @staticmethod    def api_patch(id_=None):        return api_path("/rest/ip/firewall/mangle", id_)    model_config = ConfigDict(populate_by_name=True)