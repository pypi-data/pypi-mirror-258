from pydantic import (    BaseModel,    Field,    ConfigDict,)from mikrotikapi.schemes.components import (    ToAddresses,    SrcAddressBlock,    ProtocolBlock,    ToPorts,    ActionBlock,)from mikrotikapi.schemes.fields import (    id_field,    comment_field,    routing_mark_field,    bytes_field,    log_prefix_field,    field_gen,)class NatScheme(    ProtocolBlock,    ToPorts,    ActionBlock,    SrcAddressBlock,    ToAddresses,    BaseModel,):    id: str = id_field    bytes: int = bytes_field    comment: str = comment_field    disabled: bool = Field(default=False)    dst_port: int = field_gen(None, name="dst_port")    dynamic: bool = Field(None, frozen=True, exclude=True)    invalid: bool = Field(None, frozen=True, exclude=True)    log: bool = Field(False)    log_prefix: str = log_prefix_field    packets: int = Field(None, frozen=True, exclude=True)    routing_mark: str = routing_mark_field    in_interface: str = field_gen("", name="in_interface")    out_interface: str = field_gen("", name="out_interface")    @staticmethod    def api_patch(_id=None):        if _id:            return f"/rest/ip/firewall/nat/{_id}"        return "/rest/ip/firewall/nat"    model_config = ConfigDict(populate_by_name=True)