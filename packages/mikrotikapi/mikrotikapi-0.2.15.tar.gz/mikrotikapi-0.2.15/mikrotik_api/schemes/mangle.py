from __future__ import annotationsfrom typing import Optionalfrom pydantic import BaseModel, Field, IPvAnyNetworkclass MangleScheme(BaseModel):    id: str = Field(default=None, alias=".id")    action: str = Field(default=None)    disable: bool = Field(default=None, exclude=True)    disabled: bool = Field(default=None)    dynamic: bool = Field(default=None, exclude=True)    invalid: bool = Field(default=None, exclude=True)    comment: str = Field(default=None)    chain: str = Field(        default=None,    )    log: bool = Field(default=None, exclude=True)    log_prefix: str = Field(default=None, alias="log-prefix")    new_routing_mark: str = Field(default=None, alias="new-routing-mark")    # src_address: str | None = Field(default=None, alias="src-address")    src_address: Optional[IPvAnyNetwork] | str = Field(default=None, alias="src-address")    # @field_validator("new_routing_mark")    # def new_routing_mark_to_camel_case(cls, name):    #     return to_camel_case(name)    # @computed_field(repr=False)    # @property    # def interface_name(self) -> str | None:    #     try:    #         return self.new_routing_mark.upper()    #     except AttributeError:    #         return None    # @computed_field    @property    def tariff(self) -> str | None:        try:            return f"{self.comment.split(':')[0]}"        except AttributeError:            return None    # @computed_field    @property    def profile_id_validate(self) -> int | None:        try:            return int(self.comment.split(":")[1])        except (AttributeError, ValueError, IndexError):            return None    @property    def comment_value_0(self) -> str | None:        try:            return self.comment.split(":")[0]        except (AttributeError, IndexError):            return None    @property    def comment_value_1(self) -> str | None:        try:            return self.comment.split(":")[1]        except (AttributeError, IndexError):            return None    @property    def comment_value_2(self) -> str | None:        try:            return self.comment.split(":")[2]        except (AttributeError, IndexError):            return None    @staticmethod    def api_patch(_id=None):        if _id:            return f"/rest/ip/firewall/mangle/{_id}"        return "/rest/ip/firewall/mangle"    class Config:        populate_by_name = True